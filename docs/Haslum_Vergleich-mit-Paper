Implementierung PDB Generierung nach Haslum, in Bezug auf das Paper "Domain-Independent Construction of Pattern Database Heuristics for
Cost-Optimal Planning":

"Estimating Search Effort":
Nicht umgesetzt

"Pattern Construction as Search":
Genau umsetzt wie beschrieben

"Evaluating the Neighbourhood":
Umgesetzt wurde nur die sog. "counting approximation"

"Comparing h^c(n) and h^c'(n)":
Die Formel wurde wie im Paper beschrieben umgesetzt, allerdings berechnen wir tatsächlich die PDBs zur Bestimmung der H-Werte und verwenden NICHT A*

"Sampling the Search Space":
Umgesetzt wurde das, was im zweiten Absatz dieses Abschnitts beschrieben wird: Random Walk, wobei die Länge des Random Walks durch den H-Wert des Initialzustandes der aktuellen Pattern-Collection bestimmt wird. Da wir auch nicht-uniform-cost-Probleme unterstützen, wurde auch der Ansatz in Klammern aus dem Paper umgesetzt: die Länge des Random Walks wird mit Hilfe der durchschnittlichen Operatorkosten angepasst, welche allerdings NICHT während der Random Walks aktualisiert, sondern nur zu Beginn einmal ausgerechnet.
Auch bei uns wird eine Binomialverteilung zum Samplen verwendet, allerdings eine mit (ungefähr) p=0,5. Genau wie im Paper wird auch bei Deadlocks während eines Random Walks selbiger einfach nochmal neugestartet.

"Avoiding Redundant Evaluations":
Nur die erste der beiden Techniken wurde umgesetzt, ebenfalls mit Hilfe eines Kausalgraphen und der relevanten Variablen. Die zweite Technik, das Konfidenzintervall, wurde nicht umgesetzt, da wir auch keine A*-Suche verwenden, sondern die PDBs tatsächlich erzeugen.

"Ending the Search":
Speicherlimits werden auch bei uns (wie im Paper beschrieben) berücksichtigt; die Anzahl der Iterationen wird nicht beschränkt, allerdings gibt es auch die Möglichkeit, eine "minimale Verbesserung" pro Iteration als Option zu übergen.
