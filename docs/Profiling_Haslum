Profiling der PDB-Erzeugung nach Haslum et al.

Bei 'pipesworld-notankage', 'p22-net3-b12-g4.pddl' wurde die
PDB-Erzeugung von Version 0 auf 1 (=> Einführen des Cachings) deutlich
schneller (etwa Faktor 3), und es wurde wohl dieselbe PDB-Collection
erzeugt. Das Caching scheint hier also etwas zu bringen.

Bei 'logistics00', 'probLOGISTICS-9-0.pddl' wurde die PDB-Erzeugung von
Version 0 auf 1 (=> Einführen des Cachings) langsamer (um etwa 10%), und
es wurde wohl dieselbe PDB-Collection erzeugt. Das Caching scheint hier
also zu schaden.

=> Sollte man noch mal versuchen zu reproduzieren und dann mal einen
Profiler darauf loslassen. (Dazu nach der Heuristik-Erzeugung abbrechen,
also gar nicht die eigentliche Suche starten.)
--
siehe prof_logistics_v0, prof_logistics_v1, prof_pipes_v0, prof_pipes_v1

logistics: in v0 werden 637 pdbs, in v1 85 pdbs erzeugt.
pipes: in v0 werden 5771 pdbs, in v1 1256 pdbs erzeugt.

Vermutung: der Zugriff mittels Map dauert laenger als die pdb-Erzeugung,
wenn die pdbs klein sind.
--

Bei Sokoban hat sich die Performance von v1 auf v2 ein ganzes Stück
verschlechtert. Bei Problem 08 wurde in v1 noch ein etwas besseres
Pattern gefunden, aber ab v2 findet schon die erste
Local-Search-Iteration keine Verbesserung mehr. Woran liegt das?
--
Bug gefixt!!!
--


Bei v3 wurde insgesamt die Performance schlechter (außer in
Blocksworld), aber die Qualität der Heuristik besser. Warum, ist nach
Durchsicht eines Logistics-Beispiels (7-0) nicht ganz klar. Die
PDB-Collection-Generierung brauchte länger, aber warum ist nicht so
ersichtlich. Profiler anwerfen? Es wäre auch ganz informativ, nach jeder
Hillclimbing-Runde den aktuellen Timer-Stand auszugeben. (Beispiel-Code,
der so was macht, z.B. in der Suche, eager_search.cc oder so, wobei das
wahrscheinlich an eine andere Klasse übergeben wird, z.B.
search_progress.cc.)
--
Aktuelle Version (v6) vs. v2
In der aktuellen Version dauert die Pattern-Suche 35.57s, also laenger
als in Version 2 mit 26.53s. Die Suche selbst ist in der aktuellen Version
schneller mit 1.83s vs. 7.62s. (Woran liegt das? Makefile o3?)
Der initiale h-Wert ist jeweils identisch. 
Die Anzahl der Improvements ist aber unterschiedlich. In der aktuellen Version werden
18 bessere Nachfolgekollektionen gefunden, waehrend in v2 nur 13 bessere
Kollektionen gefunden werden. In der aktuellen Version vergroessert sich
dabei die Suchnachbarschaft enorm. Zu Beginn sind 70 Patterns in der
Suchnachbarschaft und in der letzten Iteration 630.

Version 3 vs. Version 2
--

