!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABORT	search/utils/system.h	23;"	d
ABSTRACT_TASK_H	search/abstract_task.h	2;"	d
ALGORITHMS_DYNAMIC_BITSET_H	search/algorithms/dynamic_bitset.h	2;"	d
ALGORITHMS_EQUIVALENCE_RELATION_H	search/algorithms/equivalence_relation.h	2;"	d
ALGORITHMS_INT_PACKER_H	search/algorithms/int_packer.h	2;"	d
ALGORITHMS_MAX_CLIQUES_H	search/algorithms/max_cliques.h	2;"	d
ALGORITHMS_ORDERED_SET_H	search/algorithms/ordered_set.h	2;"	d
ALGORITHMS_PRIORITY_QUEUES_H	search/algorithms/priority_queues.h	2;"	d
ALGORITHMS_SEGMENTED_VECTOR_H	search/algorithms/segmented_vector.h	2;"	d
ALL_STATES	search/potentials/single_potential_heuristics.cc	/^    ALL_STATES,$/;"	m	class:potentials::OptimizeFor	file:
ALL_TRANSITION_SYSTEMS	search/merge_and_shrink/label_reduction.h	/^        ALL_TRANSITION_SYSTEMS,$/;"	e	enum:merge_and_shrink::LabelReduction::LabelReductionMethod
ALL_TRANSITION_SYSTEMS_WITH_FIXPOINT	search/merge_and_shrink/label_reduction.h	/^        ALL_TRANSITION_SYSTEMS_WITH_FIXPOINT$/;"	e	enum:merge_and_shrink::LabelReduction::LabelReductionMethod
AXIOMS_H	search/axioms.h	2;"	d
AbstractGraph	search/bliss/graph.cc	/^AbstractGraph::AbstractGraph()$/;"	f	class:bliss::AbstractGraph
AbstractGraph	search/bliss/graph.h	/^class AbstractGraph$/;"	c	namespace:bliss
AbstractOperator	search/pdbs/pattern_database.cc	/^AbstractOperator::AbstractOperator(const vector<FactPair> &prev_pairs,$/;"	f	class:pdbs::AbstractOperator
AbstractOperator	search/pdbs/pattern_database.h	/^class AbstractOperator {$/;"	c	namespace:pdbs
AbstractQueue	search/algorithms/priority_queues.h	/^    AbstractQueue() {}$/;"	f	class:priority_queues::AbstractQueue
AbstractQueue	search/algorithms/priority_queues.h	/^class AbstractQueue {$/;"	c	namespace:priority_queues
AbstractSearch	search/cegar/abstract_search.cc	/^AbstractSearch::AbstractSearch($/;"	f	class:cegar::AbstractSearch
AbstractSearch	search/cegar/abstract_search.h	/^class AbstractSearch {$/;"	c	namespace:cegar
AbstractSearchInfo	search/cegar/abstract_state.h	/^    AbstractSearchInfo()$/;"	f	class:cegar::AbstractSearchInfo
AbstractSearchInfo	search/cegar/abstract_state.h	/^class AbstractSearchInfo {$/;"	c	namespace:cegar
AbstractState	search/cegar/abstract_state.cc	/^AbstractState::AbstractState(AbstractState &&other)$/;"	f	class:cegar::AbstractState
AbstractState	search/cegar/abstract_state.cc	/^AbstractState::AbstractState(const Domains &domains, Node *node)$/;"	f	class:cegar::AbstractState
AbstractState	search/cegar/abstract_state.h	/^class AbstractState {$/;"	c	namespace:cegar
AbstractTask	search/abstract_task.h	/^class AbstractTask {$/;"	c
Abstraction	search/cegar/abstraction.cc	/^Abstraction::Abstraction($/;"	f	class:cegar::Abstraction
Abstraction	search/cegar/abstraction.h	/^class Abstraction {$/;"	c	namespace:cegar
Action	translate/pddl/actions.py	/^class Action(object):$/;"	c
AdaptiveQueue	search/algorithms/priority_queues.h	/^    AdaptiveQueue() : wrapped_queue(new BucketQueue<Value>) {$/;"	f	class:priority_queues::AdaptiveQueue
AdaptiveQueue	search/algorithms/priority_queues.h	/^class AdaptiveQueue {$/;"	c	namespace:priority_queues
AdditiveCartesianHeuristic	search/cegar/additive_cartesian_heuristic.cc	/^AdditiveCartesianHeuristic::AdditiveCartesianHeuristic($/;"	f	class:cegar::AdditiveCartesianHeuristic
AdditiveCartesianHeuristic	search/cegar/additive_cartesian_heuristic.h	/^class AdditiveCartesianHeuristic : public Heuristic {$/;"	c	namespace:cegar
AdditiveHeuristic	search/heuristics/additive_heuristic.cc	/^AdditiveHeuristic::AdditiveHeuristic(const Options &opts)$/;"	f	class:additive_heuristic::AdditiveHeuristic
AdditiveHeuristic	search/heuristics/additive_heuristic.h	/^class AdditiveHeuristic : public relaxation_heuristic::RelaxationHeuristic {$/;"	c	namespace:additive_heuristic
AlternationOpenList	search/open_lists/alternation_open_list.cc	/^AlternationOpenList<Entry>::AlternationOpenList(const Options &opts)$/;"	f	class:AlternationOpenList
AlternationOpenList	search/open_lists/alternation_open_list.cc	/^class AlternationOpenList : public OpenList<Entry> {$/;"	c	file:
AlternationOpenListFactory	search/open_lists/alternation_open_list.cc	/^AlternationOpenListFactory::AlternationOpenListFactory(const Options &options)$/;"	f	class:AlternationOpenListFactory
AlternationOpenListFactory	search/open_lists/alternation_open_list.h	/^class AlternationOpenListFactory : public OpenListFactory {$/;"	c
Any	search/options/any.h	/^    Any() : content(nullptr) {$/;"	f	class:options::Any
Any	search/options/any.h	/^    Any(const Any &other)$/;"	f	class:options::Any
Any	search/options/any.h	/^    Any(const ValueType &value)$/;"	f	class:options::Any
Any	search/options/any.h	/^class Any {$/;"	c	namespace:options
ArgError	search/options/errors.cc	/^ArgError::ArgError(string msg)$/;"	f	class:options::ArgError
ArgError	search/options/errors.h	/^struct ArgError {$/;"	s	namespace:options
ArgumentInfo	search/options/doc_store.h	/^    ArgumentInfo($/;"	f	struct:options::ArgumentInfo
ArgumentInfo	search/options/doc_store.h	/^struct ArgumentInfo {$/;"	s	namespace:options
Assign	translate/pddl/f_expression.py	/^class Assign(FunctionAssignment):$/;"	c
Assignment	translate/constraints.py	/^class Assignment(object):$/;"	c
AtLimit	search/merge_and_shrink/shrink_bisimulation.h	/^    enum AtLimit {$/;"	g	class:merge_and_shrink::ShrinkBisimulation
Atom	translate/pddl/conditions.py	/^class Atom(Literal):$/;"	c
AtomicTSOrder	search/merge_and_shrink/merge_scoring_function_total_order.h	/^    enum class AtomicTSOrder {$/;"	c	class:merge_and_shrink::MergeScoringFunctionTotalOrder
Axiom	translate/pddl/axioms.py	/^class Axiom(object):$/;"	c
AxiomConditionProxy	translate/normalize.py	/^class AxiomConditionProxy(ConditionProxy):$/;"	c
AxiomEvaluator	search/axioms.cc	/^AxiomEvaluator::AxiomEvaluator(const TaskProxy &task_proxy) {$/;"	f	class:AxiomEvaluator
AxiomEvaluator	search/axioms.h	/^class AxiomEvaluator {$/;"	c
AxiomLiteral	search/axioms.h	/^    struct AxiomLiteral {$/;"	s	class:AxiomEvaluator
AxiomRule	search/axioms.h	/^        AxiomRule(int cond_count, int eff_var, int eff_val, AxiomLiteral *eff_literal)$/;"	f	struct:AxiomEvaluator::AxiomRule
AxiomRule	search/axioms.h	/^    struct AxiomRule {$/;"	s	class:AxiomEvaluator
AxiomsProxy	search/task_proxy.h	/^    explicit AxiomsProxy(const AbstractTask &task)$/;"	f	class:AxiomsProxy
AxiomsProxy	search/task_proxy.h	/^class AxiomsProxy {$/;"	c
BEFORE_GOAL_ZONE	search/heuristics/lm_cut_landmarks.h	/^    BEFORE_GOAL_ZONE = 3$/;"	e	enum:lm_cut_heuristic::PropositionStatus
BENCHMARKS	translate/tests/test_scripts.py	/^BENCHMARKS = os.path.join(REPO, "misc", "tests", "benchmarks")$/;"	v
BITS_PER_BIN	search/algorithms/int_packer.cc	/^static const int BITS_PER_BIN = sizeof(IntPacker::Bin) * 8;$/;"	m	namespace:int_packer	file:
BLISS_BIGNUM_HH	search/bliss/bignum.h	2;"	d
BLISS_CONSISTENCY_CHECKS	search/bliss/defs.h	66;"	d
BLISS_DEFS_HH	search/bliss/defs.h	2;"	d
BLISS_EXPENSIVE_CONSISTENCY_CHECKS	search/bliss/defs.h	67;"	d
BLISS_GRAPH_HH	search/bliss/graph.h	2;"	d
BLISS_HEAP_HH	search/bliss/heap.h	2;"	d
BLISS_KQUEUE_HH	search/bliss/kqueue.h	2;"	d
BLISS_KSTACK_H	search/bliss/kstack.h	2;"	d
BLISS_ORBIT_HH	search/bliss/orbit.h	2;"	d
BLISS_PARTITION_HH	search/bliss/partition.h	2;"	d
BLISS_TIMER_HH	search/bliss/timer.h	2;"	d
BLISS_UINTSEQHASH_HH	search/bliss/uintseqhash.h	2;"	d
BLISS_UTILS_HH	search/bliss/utils.h	2;"	d
BLISS_VERIFY_AUTOMORPHISMS	search/bliss/defs.h	73;"	d
BLISS_VERIFY_EQUITABLEDNESS	search/bliss/defs.h	79;"	d
BacktrackInfo	search/bliss/partition.h	/^  class BacktrackInfo {$/;"	c	class:bliss::Partition
BacktrackPoint	search/bliss/partition.h	/^  typedef unsigned int BacktrackPoint;$/;"	t	class:bliss::Partition
BadAnyCast	search/options/any.h	/^class BadAnyCast : public std::bad_cast {$/;"	c	namespace:options
BalanceChecker	translate/invariant_finder.py	/^class BalanceChecker(object):$/;"	c
BigNum	search/bliss/bignum.h	/^  BigNum() {mpz_init(v); }$/;"	f	class:bliss::BigNum
BigNum	search/bliss/bignum.h	/^class BigNum$/;"	c	namespace:bliss
Bin	search/algorithms/int_packer.h	/^    typedef unsigned int Bin;$/;"	t	class:int_packer::IntPacker
BlindSearchHeuristic	search/heuristics/blind_search_heuristic.cc	/^BlindSearchHeuristic::BlindSearchHeuristic(const Options &opts)$/;"	f	class:blind_search_heuristic::BlindSearchHeuristic
BlindSearchHeuristic	search/heuristics/blind_search_heuristic.h	/^class BlindSearchHeuristic : public Heuristic {$/;"	c	namespace:blind_search_heuristic
BlissException	search/bliss/defs.h	/^struct BlissException : public std::exception {$/;"	s	namespace:bliss
BlissMemoryOut	search/bliss/defs.h	/^struct BlissMemoryOut : public BlissException, public std::bad_alloc {$/;"	s	namespace:bliss
BlissTimeOut	search/bliss/defs.h	/^struct BlissTimeOut : public BlissException {$/;"	s	namespace:bliss
Block	search/algorithms/equivalence_relation.h	/^class Block {$/;"	c	namespace:equivalence_relation
BlockListConstIter	search/algorithms/equivalence_relation.h	/^typedef std::list<Block>::const_iterator BlockListConstIter;$/;"	t	namespace:equivalence_relation
BlockListIter	search/algorithms/equivalence_relation.h	/^typedef std::list<Block>::iterator BlockListIter;$/;"	t	namespace:equivalence_relation
Bounds	search/options/bounds.h	/^    Bounds(std::string min, std::string max)$/;"	f	struct:options::Bounds
Bounds	search/options/bounds.h	/^struct Bounds {$/;"	s	namespace:options
Bucket	search/algorithms/priority_queues.h	/^    typedef std::vector<Value> Bucket;$/;"	t	class:priority_queues::BucketQueue
Bucket	search/merge_and_shrink/shrink_bucket_based.h	/^    typedef std::vector<int> Bucket;$/;"	t	class:merge_and_shrink::ShrinkBucketBased
Bucket	search/open_lists/pareto_open_list.cc	/^    typedef deque<Entry> Bucket;$/;"	t	class:ParetoOpenList	file:
Bucket	search/open_lists/standard_scalar_open_list.cc	/^    typedef deque<Entry> Bucket;$/;"	t	class:StandardScalarOpenList	file:
BucketMap	search/open_lists/pareto_open_list.cc	/^    typedef unordered_map<KeyType, Bucket> BucketMap;$/;"	t	class:ParetoOpenList	file:
BucketQueue	search/algorithms/priority_queues.h	/^    BucketQueue() : current_bucket_no(0), num_entries(0), num_pushes(0) {$/;"	f	class:priority_queues::BucketQueue
BucketQueue	search/algorithms/priority_queues.h	/^class BucketQueue : public AbstractQueue<Value> {$/;"	c	namespace:priority_queues
BuildRule	translate/build_model.py	/^class BuildRule:$/;"	c
CAUSAL_GRAPH_H	search/causal_graph.h	2;"	d
CEGAR_ABSTRACTION_H	search/cegar/abstraction.h	2;"	d
CEGAR_ABSTRACT_SEARCH_H	search/cegar/abstract_search.h	2;"	d
CEGAR_ABSTRACT_STATE_H	search/cegar/abstract_state.h	2;"	d
CEGAR_ADDITIVE_CARTESIAN_HEURISTIC_H	search/cegar/additive_cartesian_heuristic.h	2;"	d
CEGAR_CARTESIAN_HEURISTIC_FUNCTION_H	search/cegar/cartesian_heuristic_function.h	2;"	d
CEGAR_COST_SATURATION_H	search/cegar/cost_saturation.h	2;"	d
CEGAR_DOMAINS_H	search/cegar/domains.h	2;"	d
CEGAR_REFINEMENT_HIERARCHY_H	search/cegar/refinement_hierarchy.h	2;"	d
CEGAR_SPLIT_SELECTOR_H	search/cegar/split_selector.h	2;"	d
CEGAR_SUBTASK_GENERATORS_H	search/cegar/subtask_generators.h	2;"	d
CEGAR_TRANSITION_H	search/cegar/transition.h	2;"	d
CEGAR_TRANSITION_UPDATER_H	search/cegar/transition_updater.h	2;"	d
CEGAR_UTILS_H	search/cegar/utils.h	2;"	d
CEGAR_UTILS_LANDMARKS_H	search/cegar/utils_landmarks.h	2;"	d
CERT_EDGE	search/bliss/graph.h	/^  static const unsigned int CERT_EDGE  = 1; \/\/UINT_MAX-1;$/;"	m	class:bliss::AbstractGraph
CERT_SPLIT	search/bliss/graph.h	/^  static const unsigned int CERT_SPLIT = 0; \/\/UINT_MAX;$/;"	m	class:bliss::AbstractGraph
CGCache	search/heuristics/cg_cache.cc	/^CGCache::CGCache(TaskProxy &task_proxy) : task_proxy(task_proxy) {$/;"	f	class:cg_heuristic::CGCache
CGCache	search/heuristics/cg_cache.h	/^class CGCache {$/;"	c	namespace:cg_heuristic
CGHeuristic	search/heuristics/cg_heuristic.cc	/^CGHeuristic::CGHeuristic(const Options &opts)$/;"	f	class:cg_heuristic::CGHeuristic
CGHeuristic	search/heuristics/cg_heuristic.h	/^class CGHeuristic : public Heuristic {$/;"	c	namespace:cg_heuristic
CG_GOAL_LEVEL	search/variable_order_finder.h	/^    CG_GOAL_LEVEL,$/;"	e	enum:VariableOrderType
CG_GOAL_RANDOM	search/variable_order_finder.h	/^    CG_GOAL_RANDOM,$/;"	e	enum:VariableOrderType
CLOSED	search/search_node_info.h	/^    enum NodeStatus {NEW = 0, OPEN = 1, CLOSED = 2, DEAD_END = 3};$/;"	e	enum:SearchNodeInfo::NodeStatus
CLP	search/lp/lp_solver.h	/^    CLP, CPLEX, GUROBI$/;"	m	class:lp::LPSolverType
CONDITIONAL_DELETE_EFFECT_VERTEX	search/structural_symmetries/graph_creator.cc	/^              CONDITIONAL_DELETE_EFFECT_VERTEX, MAX_VALUE};$/;"	e	enum:color_t	file:
CONDITIONAL_EFFECT_VERTEX	search/structural_symmetries/graph_creator.cc	/^              GOAL_VERTEX, INIT_VERTEX, CONDITIONAL_EFFECT_VERTEX,$/;"	e	enum:color_t	file:
CPLEX	search/lp/lp_solver.h	/^    CLP, CPLEX, GUROBI$/;"	m	class:lp::LPSolverType
CPLEX_ERROR_OOM	search/lp/lp_internals.cc	/^static const string CPLEX_ERROR_OOM = "CPX0000  CPLEX Error  1001: Out of memory.";$/;"	m	namespace:lp	file:
CPLEX_ERROR_OOM_DEVEX	search/lp/lp_internals.cc	/^static const string CPLEX_ERROR_OOM_DEVEX = "CPX0000  Not enough memory for devex.";$/;"	m	namespace:lp	file:
CPLEX_ERROR_OOM_PRE	search/lp/lp_internals.cc	/^static const string CPLEX_ERROR_OOM_PRE = "CPX0000  Insufficient memory for presolve.";$/;"	m	namespace:lp	file:
CPLEX_WARNING_COMPRESS	search/lp/lp_internals.cc	/^static const string CPLEX_WARNING_COMPRESS = "CPX0000  Compressing row and column files.";$/;"	m	namespace:lp	file:
CPLEX_WARNING_WRITE_MPS_COLUMNS	search/lp/lp_internals.cc	/^static const string CPLEX_WARNING_WRITE_MPS_COLUMNS = "CPX0000  Default column names x1, x2 ... being created.";$/;"	m	namespace:lp	file:
CPLEX_WARNING_WRITE_MPS_ROWS	search/lp/lp_internals.cc	/^static const string CPLEX_WARNING_WRITE_MPS_ROWS = "CPX0000  Default row    names c1, c2 ... being created.";$/;"	m	namespace:lp	file:
CRCell	search/bliss/partition.h	/^  class CRCell {$/;"	c	class:bliss::Partition
CRITICAL_ERROR	search/utils/system.h	/^    CRITICAL_ERROR = 1,$/;"	m	class:utils::ExitCode
CR_BTInfo	search/bliss/partition.h	/^  class CR_BTInfo {$/;"	c	class:bliss::Partition
CR_CEP	search/bliss/graph.h	/^  class CR_CEP {$/;"	c	class:bliss::AbstractGraph
CanonicalPDBs	search/pdbs/canonical_pdbs.cc	/^CanonicalPDBs::CanonicalPDBs($/;"	f	class:pdbs::CanonicalPDBs
CanonicalPDBs	search/pdbs/canonical_pdbs.h	/^class CanonicalPDBs {$/;"	c	namespace:pdbs
CanonicalPDBsHeuristic	search/pdbs/canonical_pdbs_heuristic.cc	/^CanonicalPDBsHeuristic::CanonicalPDBsHeuristic(const Options &opts)$/;"	f	class:pdbs::CanonicalPDBsHeuristic
CanonicalPDBsHeuristic	search/pdbs/canonical_pdbs_heuristic.h	/^class CanonicalPDBsHeuristic : public Heuristic {$/;"	c	namespace:pdbs
CartesianHeuristicFunction	search/cegar/cartesian_heuristic_function.cc	/^CartesianHeuristicFunction::CartesianHeuristicFunction($/;"	f	class:cegar::CartesianHeuristicFunction
CartesianHeuristicFunction	search/cegar/cartesian_heuristic_function.h	/^    CartesianHeuristicFunction(CartesianHeuristicFunction &&other)$/;"	f	class:cegar::CartesianHeuristicFunction
CartesianHeuristicFunction	search/cegar/cartesian_heuristic_function.h	/^class CartesianHeuristicFunction {$/;"	c	namespace:cegar
CausalGraph	search/causal_graph.cc	/^CausalGraph::CausalGraph(const TaskProxy &task_proxy) {$/;"	f	class:CausalGraph
CausalGraph	search/causal_graph.h	/^class CausalGraph {$/;"	c
CausalGraph	translate/variable_order.py	/^class CausalGraph(object):$/;"	c
CausalGraphBuilder	search/causal_graph.cc	/^    explicit CausalGraphBuilder(int var_count)$/;"	f	struct:CausalGraphBuilder
CausalGraphBuilder	search/causal_graph.cc	/^struct CausalGraphBuilder {$/;"	s	file:
Cell	search/bliss/partition.h	/^  class Cell$/;"	c	class:bliss::Partition
CombiningEvaluator	search/evaluators/combining_evaluator.cc	/^CombiningEvaluator::CombiningEvaluator($/;"	f	class:combining_evaluator::CombiningEvaluator
CombiningEvaluator	search/evaluators/combining_evaluator.h	/^class CombiningEvaluator : public ScalarEvaluator {$/;"	c	namespace:combining_evaluator
Condition	search/successor_generator.h	/^    typedef std::vector<FactProxy> Condition;$/;"	t	class:SuccessorGenerator
Condition	translate/pddl/conditions.py	/^class Condition(object):$/;"	c
ConditionProxy	translate/normalize.py	/^class ConditionProxy(object):$/;"	c
ConditionalEffect	translate/pddl/effects.py	/^class ConditionalEffect(object):$/;"	c
ConditionsProxy	search/task_proxy.h	/^    explicit ConditionsProxy(const AbstractTask &task)$/;"	f	class:ConditionsProxy
ConditionsProxy	search/task_proxy.h	/^class ConditionsProxy {$/;"	c
Conjunction	translate/pddl/conditions.py	/^class Conjunction(JunctorCondition):$/;"	c
ConjunctiveEffect	translate/pddl/effects.py	/^class ConjunctiveEffect(object):$/;"	c
ConstEvaluator	search/evaluators/const_evaluator.cc	/^ConstEvaluator::ConstEvaluator(const Options &opts)$/;"	f	class:const_evaluator::ConstEvaluator
ConstEvaluator	search/evaluators/const_evaluator.h	/^class ConstEvaluator : public Heuristic {$/;"	c	namespace:const_evaluator
ConstantCondition	translate/pddl/conditions.py	/^class ConstantCondition(Condition):$/;"	c
ConstraintGenerator	search/operator_counting/constraint_generator.h	/^class ConstraintGenerator {$/;"	c	namespace:operator_counting
ConstraintSystem	translate/constraints.py	/^class ConstraintSystem(object):$/;"	c
ContextEnhancedAdditiveHeuristic	search/heuristics/cea_heuristic.cc	/^ContextEnhancedAdditiveHeuristic::ContextEnhancedAdditiveHeuristic($/;"	f	class:cea_heuristic::ContextEnhancedAdditiveHeuristic
ContextEnhancedAdditiveHeuristic	search/heuristics/cea_heuristic.h	/^class ContextEnhancedAdditiveHeuristic : public Heuristic {$/;"	c	namespace:cea_heuristic
CostAdaptedTask	search/tasks/cost_adapted_task.cc	/^CostAdaptedTask::CostAdaptedTask(const Options &opts)$/;"	f	class:tasks::CostAdaptedTask
CostAdaptedTask	search/tasks/cost_adapted_task.h	/^class CostAdaptedTask : public DelegatingTask {$/;"	c	namespace:tasks
CostEffect	translate/pddl/effects.py	/^class CostEffect(object):$/;"	c
CostMatrix	translate/greedy_join.py	/^class CostMatrix(object):$/;"	c
CostSaturation	search/cegar/cost_saturation.cc	/^CostSaturation::CostSaturation($/;"	f	class:cegar::CostSaturation
CostSaturation	search/cegar/cost_saturation.h	/^class CostSaturation {$/;"	c	namespace:cegar
CountdownTimer	search/utils/countdown_timer.cc	/^CountdownTimer::CountdownTimer(double max_time)$/;"	f	class:utils::CountdownTimer
CountdownTimer	search/utils/countdown_timer.h	/^class CountdownTimer {$/;"	c	namespace:utils
DEAD_END	search/heuristic.h	/^    enum {DEAD_END = -1, NO_VALUE = -2};$/;"	e	enum:Heuristic::__anon4
DEAD_END	search/search_node_info.h	/^    enum NodeStatus {NEW = 0, OPEN = 1, CLOSED = 2, DEAD_END = 3};$/;"	e	enum:SearchNodeInfo::NodeStatus
DEBUG	translate/fact_groups.py	/^DEBUG = False$/;"	v
DEBUG	translate/sas_tasks.py	/^DEBUG = False$/;"	v
DEBUG	translate/simplify.py	/^DEBUG = False$/;"	v
DEBUG	translate/translate.py	/^DEBUG = False$/;"	v
DEBUG	translate/variable_order.py	/^DEBUG = False$/;"	v
DEFAULT_LAZY_BOOST	search/search_engines/lazy_search.cc	/^static const int DEFAULT_LAZY_BOOST = 1000;$/;"	m	namespace:lazy_search	file:
DIR	translate/tests/test_scripts.py	/^DIR = os.path.dirname(os.path.abspath(__file__))$/;"	v
DISTANCE_UNKNOWN	search/merge_and_shrink/distances.cc	/^const int Distances::DISTANCE_UNKNOWN;$/;"	m	class:merge_and_shrink::Distances	file:
DISTANCE_UNKNOWN	search/merge_and_shrink/distances.h	/^    static const int DISTANCE_UNKNOWN = -1;$/;"	m	class:merge_and_shrink::Distances
DOMAIN	translate/tests/test_scripts.py	/^DOMAIN = os.path.join(BENCHMARKS, "gripper", "domain.pddl")$/;"	v
DOMAIN_TRANSITION_GRAPH_H	search/domain_transition_graph.h	2;"	d
DTGFactory	search/domain_transition_graph.cc	/^DTGFactory::DTGFactory(const TaskProxy &task_proxy,$/;"	f	class:DTGFactory
DTGFactory	search/domain_transition_graph.h	/^class DTGFactory {$/;"	c
DelegatingTask	search/tasks/delegating_task.cc	/^DelegatingTask::DelegatingTask(const shared_ptr<AbstractTask> &parent)$/;"	f	class:tasks::DelegatingTask
DelegatingTask	search/tasks/delegating_task.h	/^class DelegatingTask : public AbstractTask {$/;"	c	namespace:tasks
Digraph	search/bliss/graph.cc	/^Digraph::Digraph(const unsigned int nof_vertices)$/;"	f	class:bliss::Digraph
Digraph	search/bliss/graph.h	/^class Digraph : public AbstractGraph$/;"	c	namespace:bliss
Disjunction	translate/pddl/conditions.py	/^class Disjunction(JunctorCondition):$/;"	c
Distances	search/merge_and_shrink/distances.cc	/^Distances::Distances(const TransitionSystem &transition_system)$/;"	f	class:merge_and_shrink::Distances
Distances	search/merge_and_shrink/distances.h	/^class Distances {$/;"	c	namespace:merge_and_shrink
DiversePotentialHeuristics	search/potentials/diverse_potential_heuristics.cc	/^DiversePotentialHeuristics::DiversePotentialHeuristics(const Options &opts)$/;"	f	class:potentials::DiversePotentialHeuristics
DiversePotentialHeuristics	search/potentials/diverse_potential_heuristics.h	/^class DiversePotentialHeuristics {$/;"	c	namespace:potentials
DocPrinter	search/options/doc_printer.cc	/^DocPrinter::DocPrinter(ostream &out)$/;"	f	class:options::DocPrinter
DocPrinter	search/options/doc_printer.h	/^class DocPrinter {$/;"	c	namespace:options
DocStore	search/options/doc_store.h	/^class DocStore {$/;"	c	namespace:options
DocStruct	search/options/doc_store.h	/^struct DocStruct {$/;"	s	namespace:options
DoesNothing	translate/simplify.py	/^class DoesNothing(Exception):$/;"	c
DomainAbstractedTask	search/tasks/domain_abstracted_task.cc	/^DomainAbstractedTask::DomainAbstractedTask($/;"	f	class:extra_tasks::DomainAbstractedTask
DomainAbstractedTask	search/tasks/domain_abstracted_task.h	/^class DomainAbstractedTask : public tasks::DelegatingTask {$/;"	c	namespace:extra_tasks
DomainAbstractedTaskFactory	search/tasks/domain_abstracted_task_factory.cc	/^DomainAbstractedTaskFactory::DomainAbstractedTaskFactory($/;"	f	class:extra_tasks::DomainAbstractedTaskFactory
DomainAbstractedTaskFactory	search/tasks/domain_abstracted_task_factory.cc	/^class DomainAbstractedTaskFactory {$/;"	c	namespace:extra_tasks	file:
DomainTransitionGraph	search/domain_transition_graph.cc	/^DomainTransitionGraph::DomainTransitionGraph(int var_index, int node_count) {$/;"	f	class:DomainTransitionGraph
DomainTransitionGraph	search/domain_transition_graph.h	/^class DomainTransitionGraph {$/;"	c
DomainTransitionGraph	translate/simplify.py	/^class DomainTransitionGraph(object):$/;"	c
Domains	search/cegar/domains.cc	/^Domains::Domains(const vector<int> &domain_sizes) {$/;"	f	class:cegar::Domains
Domains	search/cegar/domains.h	/^class Domains {$/;"	c	namespace:cegar
DynamicBitset	search/algorithms/dynamic_bitset.h	/^    explicit DynamicBitset(std::size_t num_bits)$/;"	f	class:dynamic_bitset::DynamicBitset
DynamicBitset	search/algorithms/dynamic_bitset.h	/^class DynamicBitset {$/;"	c	namespace:dynamic_bitset
EFFECT_VERTEX	search/structural_symmetries/graph_creator.cc	/^enum color_t {PREDICATE_VERTEX, VALUE_VERTEX, PRECOND_VERTEX, EFFECT_VERTEX,$/;"	e	enum:color_t	file:
EVALUATION_CONTEXT_H	search/evaluation_context.h	2;"	d
EVALUATION_RESULT_H	search/evaluation_result.h	2;"	d
EVALUATORS_COMBINING_EVALUATOR_H	search/evaluators/combining_evaluator.h	2;"	d
EVALUATORS_CONST_EVALUATOR_H	search/evaluators/const_evaluator.h	2;"	d
EVALUATORS_G_EVALUATOR_H	search/evaluators/g_evaluator.h	2;"	d
EVALUATORS_MAX_EVALUATOR_H	search/evaluators/max_evaluator.h	2;"	d
EVALUATORS_PREF_EVALUATOR_H	search/evaluators/pref_evaluator.h	2;"	d
EVALUATORS_SUM_EVALUATOR_H	search/evaluators/sum_evaluator.h	2;"	d
EVALUATORS_WEIGHTED_EVALUATOR_H	search/evaluators/weighted_evaluator.h	2;"	d
EagerSearch	search/search_engines/eager_search.cc	/^EagerSearch::EagerSearch(const Options &opts)$/;"	f	class:eager_search::EagerSearch
EagerSearch	search/search_engines/eager_search.h	/^class EagerSearch : public SearchEngine {$/;"	c	namespace:eager_search
EdgeType	search/landmarks/landmark_graph.h	/^enum class EdgeType {$/;"	c	namespace:landmarks
Effect	translate/pddl/effects.py	/^class Effect(object):$/;"	c
EffectConditionProxy	translate/normalize.py	/^class EffectConditionProxy(ConditionProxy):$/;"	c
EffectConditionsProxy	search/task_proxy.h	/^    EffectConditionsProxy($/;"	f	class:EffectConditionsProxy
EffectConditionsProxy	search/task_proxy.h	/^class EffectConditionsProxy : public ConditionsProxy {$/;"	c
EffectProxy	search/task_proxy.h	/^    EffectProxy(const AbstractTask &task, int op_index, int eff_index, bool is_axiom)$/;"	f	class:EffectProxy
EffectProxy	search/task_proxy.h	/^class EffectProxy {$/;"	c
EffectsProxy	search/task_proxy.h	/^    EffectsProxy(const AbstractTask &task, int op_index, bool is_axiom)$/;"	f	class:EffectsProxy
EffectsProxy	search/task_proxy.h	/^class EffectsProxy {$/;"	c
ElementAllocator	search/algorithms/segmented_vector.h	/^    typedef typename Allocator::template rebind<Element>::other ElementAllocator;$/;"	t	class:segmented_vector::SegmentedArrayVector
ElementListConstIter	search/algorithms/equivalence_relation.h	/^typedef std::list<int>::const_iterator ElementListConstIter;$/;"	t	namespace:equivalence_relation
ElementListIter	search/algorithms/equivalence_relation.h	/^typedef std::list<int>::iterator ElementListIter;$/;"	t	namespace:equivalence_relation
ElementPosition	search/algorithms/equivalence_relation.h	/^    typedef std::pair<BlockListIter, ElementListIter> ElementPosition;$/;"	t	class:equivalence_relation::EquivalenceRelation
ElementPositionMap	search/algorithms/equivalence_relation.h	/^    typedef std::unordered_map<int, ElementPosition> ElementPositionMap;$/;"	t	class:equivalence_relation::EquivalenceRelation
EnforcedHillClimbingSearch	search/search_engines/enforced_hill_climbing_search.cc	/^EnforcedHillClimbingSearch::EnforcedHillClimbingSearch($/;"	f	class:enforced_hill_climbing_search::EnforcedHillClimbingSearch
EnforcedHillClimbingSearch	search/search_engines/enforced_hill_climbing_search.h	/^class EnforcedHillClimbingSearch : public SearchEngine {$/;"	c	namespace:enforced_hill_climbing_search
Entry	search/algorithms/priority_queues.h	/^    typedef std::pair<int, Value> Entry;$/;"	t	class:priority_queues::AbstractQueue
Entry	search/algorithms/priority_queues.h	/^    typedef std::pair<int, Value> Entry;$/;"	t	class:priority_queues::AdaptiveQueue
Entry	search/algorithms/priority_queues.h	/^    typedef typename AbstractQueue<Value>::Entry Entry;$/;"	t	class:priority_queues::BucketQueue
Entry	search/algorithms/priority_queues.h	/^    typedef typename AbstractQueue<Value>::Entry Entry;$/;"	t	class:priority_queues::HeapQueue
EntryAllocator	search/algorithms/segmented_vector.h	/^    typedef typename Allocator::template rebind<Entry>::other EntryAllocator;$/;"	t	class:segmented_vector::SegmentedVector
EntryVectorMap	search/per_state_information.h	/^                               segmented_vector::SegmentedVector<Entry> * > EntryVectorMap;$/;"	t	class:PerStateInformation
EpsilonGreedyOpenList	search/open_lists/epsilon_greedy_open_list.cc	/^EpsilonGreedyOpenList<Entry>::EpsilonGreedyOpenList(const Options &opts)$/;"	f	class:EpsilonGreedyOpenList
EpsilonGreedyOpenList	search/open_lists/epsilon_greedy_open_list.cc	/^class EpsilonGreedyOpenList : public OpenList<Entry> {$/;"	c	file:
EpsilonGreedyOpenListFactory	search/open_lists/epsilon_greedy_open_list.cc	/^EpsilonGreedyOpenListFactory::EpsilonGreedyOpenListFactory($/;"	f	class:EpsilonGreedyOpenListFactory
EpsilonGreedyOpenListFactory	search/open_lists/epsilon_greedy_open_list.h	/^class EpsilonGreedyOpenListFactory : public OpenListFactory {$/;"	c
EquivalenceRelation	search/algorithms/equivalence_relation.cc	/^EquivalenceRelation::EquivalenceRelation(int n)$/;"	f	class:equivalence_relation::EquivalenceRelation
EquivalenceRelation	search/algorithms/equivalence_relation.cc	/^EquivalenceRelation::EquivalenceRelation(int n, const list<Block> &blocks_)$/;"	f	class:equivalence_relation::EquivalenceRelation
EquivalenceRelation	search/algorithms/equivalence_relation.h	/^class EquivalenceRelation {$/;"	c	namespace:equivalence_relation
ErrorCatchingCoinMessageHandler	search/lp/lp_internals.cc	/^    ErrorCatchingCoinMessageHandler()$/;"	f	class:lp::ErrorCatchingCoinMessageHandler
ErrorCatchingCoinMessageHandler	search/lp/lp_internals.cc	/^class ErrorCatchingCoinMessageHandler : public CoinMessageHandler {$/;"	c	namespace:lp	file:
EvaluationContext	search/evaluation_context.cc	/^EvaluationContext::EvaluationContext($/;"	f	class:EvaluationContext
EvaluationContext	search/evaluation_context.h	/^class EvaluationContext {$/;"	c
EvaluationResult	search/evaluation_result.cc	/^EvaluationResult::EvaluationResult() : h_value(UNINITIALIZED) {$/;"	f	class:EvaluationResult
EvaluationResult	search/evaluation_result.h	/^class EvaluationResult {$/;"	c
ExProposition	search/landmarks/exploration.h	/^    ExProposition()$/;"	f	struct:landmarks::ExProposition
ExProposition	search/landmarks/exploration.h	/^struct ExProposition {$/;"	s	namespace:landmarks
ExUnaryOperator	search/landmarks/exploration.h	/^    ExUnaryOperator(const std::vector<ExProposition *> &pre, ExProposition *eff,$/;"	f	struct:landmarks::ExUnaryOperator
ExUnaryOperator	search/landmarks/exploration.h	/^struct ExUnaryOperator {$/;"	s	namespace:landmarks
ExistentialCondition	translate/pddl/conditions.py	/^class ExistentialCondition(QuantifiedCondition):$/;"	c
ExitCode	search/utils/system.h	/^enum class ExitCode {$/;"	c	namespace:utils
Exploration	search/landmarks/exploration.cc	/^Exploration::Exploration(const options::Options &opts)$/;"	f	class:landmarks::Exploration
Exploration	search/landmarks/exploration.h	/^class Exploration : public Heuristic {$/;"	c	namespace:landmarks
FAILED	search/search_engine.h	/^enum SearchStatus {IN_PROGRESS, TIMEOUT, FAILED, SOLVED, INTERRUPTED};$/;"	e	enum:SearchStatus
FFHeuristic	search/heuristics/ff_heuristic.cc	/^FFHeuristic::FFHeuristic(const Options &opts)$/;"	f	class:ff_heuristic::FFHeuristic
FFHeuristic	search/heuristics/ff_heuristic.h	/^class FFHeuristic : public additive_heuristic::AdditiveHeuristic {$/;"	c	namespace:ff_heuristic
FFSlaveHeuristic	search/landmarks/lama_ff_synergy.cc	/^    explicit FFSlaveHeuristic(LamaFFSynergy *synergy,$/;"	f	class:landmarks::FFSlaveHeuristic
FFSlaveHeuristic	search/landmarks/lama_ff_synergy.cc	/^class FFSlaveHeuristic : public Heuristic {$/;"	c	namespace:landmarks	file:
FTSConstIterator	search/merge_and_shrink/factored_transition_system.cc	/^FTSConstIterator::FTSConstIterator($/;"	f	class:merge_and_shrink::FTSConstIterator
FTSConstIterator	search/merge_and_shrink/factored_transition_system.h	/^class FTSConstIterator {$/;"	c	namespace:merge_and_shrink
FTSFactory	search/merge_and_shrink/fts_factory.cc	/^FTSFactory::FTSFactory(const TaskProxy &task_proxy)$/;"	f	class:merge_and_shrink::FTSFactory
FTSFactory	search/merge_and_shrink/fts_factory.cc	/^class FTSFactory {$/;"	c	namespace:merge_and_shrink	file:
Fact	translate/pddl_to_prolog.py	/^class Fact:$/;"	c
FactOrder	search/cegar/subtask_generators.h	/^enum class FactOrder {$/;"	c	namespace:cegar
FactPair	search/abstract_task.h	/^    FactPair(int var, int value)$/;"	f	struct:FactPair
FactPair	search/abstract_task.h	/^struct FactPair {$/;"	s
FactProxy	search/task_proxy.h	/^class FactProxy {$/;"	c
FactProxy	search/task_proxy.h	/^inline FactProxy::FactProxy(const AbstractTask &task, const FactPair &fact)$/;"	f	class:FactProxy
FactProxy	search/task_proxy.h	/^inline FactProxy::FactProxy(const AbstractTask &task, int var_id, int value)$/;"	f	class:FactProxy
FactoredTransitionSystem	search/merge_and_shrink/factored_transition_system.cc	/^FactoredTransitionSystem::FactoredTransitionSystem($/;"	f	class:merge_and_shrink::FactoredTransitionSystem
FactoredTransitionSystem	search/merge_and_shrink/factored_transition_system.cc	/^FactoredTransitionSystem::FactoredTransitionSystem(FactoredTransitionSystem &&other)$/;"	f	class:merge_and_shrink::FactoredTransitionSystem
FactoredTransitionSystem	search/merge_and_shrink/factored_transition_system.h	/^class FactoredTransitionSystem {$/;"	c	namespace:merge_and_shrink
Factory	search/options/registries.h	/^    typedef T (*Factory)(OptionParser &);$/;"	t	class:options::Registry
FactsProxy	search/task_proxy.h	/^    explicit FactsProxy(const AbstractTask &task)$/;"	f	class:FactsProxy
FactsProxy	search/task_proxy.h	/^class FactsProxy {$/;"	c
FactsProxyIterator	search/task_proxy.h	/^    FactsProxyIterator(const AbstractTask &task, int var_id, int value)$/;"	f	class:FactsProxyIterator
FactsProxyIterator	search/task_proxy.h	/^class FactsProxyIterator {$/;"	c
Falsity	translate/pddl/conditions.py	/^class Falsity(ConstantCondition):$/;"	c
Flaw	search/cegar/abstraction.cc	/^    Flaw($/;"	f	struct:cegar::Flaw
Flaw	search/cegar/abstraction.cc	/^struct Flaw {$/;"	s	namespace:cegar	file:
FluentSetComparer	search/landmarks/landmark_factory_h_m.h	/^struct FluentSetComparer {$/;"	s	namespace:landmarks
Function	translate/pddl/functions.py	/^class Function(object):$/;"	c
FunctionAssignment	translate/pddl/f_expression.py	/^class FunctionAssignment(object):$/;"	c
FunctionalExpression	translate/pddl/f_expression.py	/^class FunctionalExpression(object):$/;"	c
GEvaluator	search/evaluators/g_evaluator.h	/^class GEvaluator : public ScalarEvaluator {$/;"	c	namespace:g_evaluator
GLOBALS_H	search/globals.h	2;"	d
GLOBAL_OPERATOR_H	search/global_operator.h	2;"	d
GLOBAL_STATE_H	search/global_state.h	2;"	d
GOAL_CG_LEVEL	search/variable_order_finder.h	/^    GOAL_CG_LEVEL,$/;"	e	enum:VariableOrderType
GOAL_VERTEX	search/structural_symmetries/graph_creator.cc	/^              GOAL_VERTEX, INIT_VERTEX, CONDITIONAL_EFFECT_VERTEX,$/;"	e	enum:color_t	file:
GOAL_ZONE	search/heuristics/lm_cut_landmarks.h	/^    GOAL_ZONE = 2,$/;"	e	enum:lm_cut_heuristic::PropositionStatus
GeneratorBase	search/successor_generator.cc	/^class GeneratorBase {$/;"	c	file:
GeneratorEmpty	search/successor_generator.cc	/^class GeneratorEmpty : public GeneratorBase {$/;"	c	file:
GeneratorLeaf	search/successor_generator.cc	/^GeneratorLeaf::GeneratorLeaf(list<OperatorProxy> &&applicable_operators)$/;"	f	class:GeneratorLeaf
GeneratorLeaf	search/successor_generator.cc	/^class GeneratorLeaf : public GeneratorBase {$/;"	c	file:
GeneratorSwitch	search/successor_generator.cc	/^GeneratorSwitch::GeneratorSwitch($/;"	f	class:GeneratorSwitch
GeneratorSwitch	search/successor_generator.cc	/^class GeneratorSwitch : public GeneratorBase {$/;"	c	file:
GlobalCondition	search/global_operator.cc	/^GlobalCondition::GlobalCondition(int variable, int value, bool check_facts)$/;"	f	class:GlobalCondition
GlobalCondition	search/global_operator.cc	/^GlobalCondition::GlobalCondition(istream &in) {$/;"	f	class:GlobalCondition
GlobalCondition	search/global_operator.h	/^struct GlobalCondition {$/;"	s
GlobalEffect	search/global_operator.cc	/^GlobalEffect::GlobalEffect(int variable, int value, const vector<GlobalCondition> &conds, bool check_facts)$/;"	f	class:GlobalEffect
GlobalEffect	search/global_operator.h	/^struct GlobalEffect {$/;"	s
GlobalOperator	search/global_operator.cc	/^GlobalOperator::GlobalOperator(istream &in, bool axiom, int index) $/;"	f	class:GlobalOperator
GlobalOperator	search/global_operator.h	/^class GlobalOperator {$/;"	c
GlobalState	search/global_state.cc	/^GlobalState::GlobalState($/;"	f	class:GlobalState
GlobalState	search/global_state.h	/^class GlobalState {$/;"	c
GoalConditionProxy	translate/normalize.py	/^class GoalConditionProxy(ConditionProxy):$/;"	c
GoalCountHeuristic	search/heuristics/goal_count_heuristic.cc	/^GoalCountHeuristic::GoalCountHeuristic(const Options &opts)$/;"	f	class:goal_count_heuristic::GoalCountHeuristic
GoalCountHeuristic	search/heuristics/goal_count_heuristic.h	/^class GoalCountHeuristic : public Heuristic {$/;"	c	namespace:goal_count_heuristic
GoalDecomposition	search/cegar/subtask_generators.cc	/^GoalDecomposition::GoalDecomposition(const Options &opts)$/;"	f	class:cegar::GoalDecomposition
GoalDecomposition	search/cegar/subtask_generators.h	/^class GoalDecomposition : public SubtaskGenerator {$/;"	c	namespace:cegar
GoalsProxy	search/task_proxy.h	/^    explicit GoalsProxy(const AbstractTask &task)$/;"	f	class:GoalsProxy
GoalsProxy	search/task_proxy.h	/^class GoalsProxy : public ConditionsProxy {$/;"	c
Graph	search/bliss/graph.cc	/^Graph::Graph(const unsigned int nof_vertices)$/;"	f	class:bliss::Graph
Graph	search/bliss/graph.h	/^class Graph : public AbstractGraph$/;"	c	namespace:bliss
Graph	translate/graph.py	/^class Graph:$/;"	c
GraphCreator	search/structural_symmetries/graph_creator.cc	/^GraphCreator::GraphCreator(const Options &opts)$/;"	f	class:GraphCreator
GraphCreator	search/structural_symmetries/graph_creator.h	/^class GraphCreator  {$/;"	c
Group	search/structural_symmetries/group.cc	/^Group::Group(const options::Options &opts)$/;"	f	class:Group
Group	search/structural_symmetries/group.h	/^class Group {$/;"	c
GroupAndTransitions	search/merge_and_shrink/transition_system.h	/^    GroupAndTransitions(const LabelGroup &label_group,$/;"	f	struct:merge_and_shrink::GroupAndTransitions
GroupAndTransitions	search/merge_and_shrink/transition_system.h	/^struct GroupAndTransitions {$/;"	s	namespace:merge_and_shrink
GroupCoverQueue	translate/fact_groups.py	/^class GroupCoverQueue:$/;"	c
HADD_UP	search/cegar/subtask_generators.h	/^    HADD_UP,$/;"	m	class:cegar::FactOrder
HEURISTICS_ADDITIVE_HEURISTIC_H	search/heuristics/additive_heuristic.h	2;"	d
HEURISTICS_BLIND_SEARCH_HEURISTIC_H	search/heuristics/blind_search_heuristic.h	2;"	d
HEURISTICS_CEA_HEURISTIC_H	search/heuristics/cea_heuristic.h	2;"	d
HEURISTICS_CG_CACHE_H	search/heuristics/cg_cache.h	2;"	d
HEURISTICS_CG_HEURISTIC_H	search/heuristics/cg_heuristic.h	2;"	d
HEURISTICS_FF_HEURISTIC_H	search/heuristics/ff_heuristic.h	2;"	d
HEURISTICS_GOAL_COUNT_HEURISTIC_H	search/heuristics/goal_count_heuristic.h	2;"	d
HEURISTICS_HM_HEURISTIC_H	search/heuristics/hm_heuristic.h	2;"	d
HEURISTICS_LM_CUT_HEURISTIC_H	search/heuristics/lm_cut_heuristic.h	2;"	d
HEURISTICS_LM_CUT_LANDMARKS_H	search/heuristics/lm_cut_landmarks.h	2;"	d
HEURISTICS_MAX_HEURISTIC_H	search/heuristics/max_heuristic.h	2;"	d
HEURISTICS_RELAXATION_HEURISTIC_H	search/heuristics/relaxation_heuristic.h	2;"	d
HEURISTIC_CACHE_H	search/heuristic_cache.h	2;"	d
HEURISTIC_H	search/heuristic.h	2;"	d
HEntry	search/heuristic.h	/^        HEntry(int h, bool dirty)$/;"	f	struct:Heuristic::HEntry
HEntry	search/heuristic.h	/^    struct HEntry {$/;"	s	class:Heuristic
HIGH	search/merge_and_shrink/shrink_fh.h	/^    enum HighLow {HIGH, LOW};$/;"	e	enum:merge_and_shrink::ShrinkFH::HighLow
HMEntry	search/landmarks/landmark_factory_h_m.h	/^    HMEntry()$/;"	f	struct:landmarks::HMEntry
HMEntry	search/landmarks/landmark_factory_h_m.h	/^struct HMEntry {$/;"	s	namespace:landmarks
HMHeuristic	search/heuristics/hm_heuristic.cc	/^HMHeuristic::HMHeuristic(const Options &opts)$/;"	f	class:hm_heuristic::HMHeuristic
HMHeuristic	search/heuristics/hm_heuristic.h	/^class HMHeuristic : public Heuristic {$/;"	c	namespace:hm_heuristic
HSPMaxHeuristic	search/heuristics/max_heuristic.cc	/^HSPMaxHeuristic::HSPMaxHeuristic(const Options &opts)$/;"	f	class:max_heuristic::HSPMaxHeuristic
HSPMaxHeuristic	search/heuristics/max_heuristic.h	/^class HSPMaxHeuristic : public relaxation_heuristic::RelaxationHeuristic {$/;"	c	namespace:max_heuristic
tree_heap	search/search_engines/top_k_eager_search.h	/^	PerStateInformation<StateActionHeap> tree_heap;$/;"	m	class:top_k_eager_search::TopKEagerSearch
incomming_heap	search/search_engines/top_k_eager_search.h	/^    PerStateInformation<StateActionHeap> incomming_heap;$/;"	m	class:top_k_eager_search::TopKEagerSearch
Heap	search/algorithms/priority_queues.h	/^    class Heap$/;"	c	class:priority_queues::HeapQueue
Heap	search/bliss/heap.h	/^  Heap() {array = 0; n = 0; N = 0; }$/;"	f	class:bliss::Heap
Heap	search/bliss/heap.h	/^class Heap$/;"	c	namespace:bliss
HeapNode	search/open_lists/epsilon_greedy_open_list.cc	/^        HeapNode(int id, int h, const Entry &entry)$/;"	f	struct:EpsilonGreedyOpenList::HeapNode
HeapNode	search/open_lists/epsilon_greedy_open_list.cc	/^    struct HeapNode {$/;"	s	class:EpsilonGreedyOpenList	file:
HeapQueue	search/algorithms/priority_queues.h	/^    HeapQueue() {$/;"	f	class:priority_queues::HeapQueue
HeapQueue	search/algorithms/priority_queues.h	/^class HeapQueue : public AbstractQueue<Value> {$/;"	c	namespace:priority_queues
Heuristic	search/heuristic.cc	/^Heuristic::Heuristic(const Options &opts)$/;"	f	class:Heuristic
Heuristic	search/heuristic.h	/^class Heuristic : public ScalarEvaluator {$/;"	c
HeuristicCache	search/heuristic_cache.cc	/^HeuristicCache::HeuristicCache(const GlobalState &state)$/;"	f	class:HeuristicCache
HeuristicCache	search/heuristic_cache.h	/^class HeuristicCache {$/;"	c
HighLow	search/merge_and_shrink/shrink_fh.h	/^    enum HighLow {HIGH, LOW};$/;"	g	class:merge_and_shrink::ShrinkFH
HillClimbingTimeout	search/pdbs/pattern_collection_generator_hillclimbing.cc	/^struct HillClimbingTimeout : public exception {};$/;"	s	namespace:pdbs	file:
Holder	search/options/any.h	/^        Holder(const ValueType &value)$/;"	f	class:options::Any::Holder
Holder	search/options/any.h	/^    class Holder : public Placeholder {$/;"	c	class:options::Any
INDENT_AMOUNT	search/utils/logging.cc	/^    static const int INDENT_AMOUNT = 2;$/;"	m	class:utils::MemoryTracer	file:
INF	search/cegar/utils.h	/^const int INF = std::numeric_limits<int>::max();$/;"	m	namespace:cegar
INF	search/merge_and_shrink/types.cc	/^const int INF = numeric_limits<int>::max();$/;"	m	namespace:merge_and_shrink	file:
INFINITY	search/utils/util.h	25;"	d
INFTY	search/evaluation_result.cc	/^const int EvaluationResult::INFTY = numeric_limits<int>::max();$/;"	m	class:EvaluationResult	file:
INFTY	search/evaluation_result.h	/^    static const int INFTY;$/;"	m	class:EvaluationResult
INITIAL_STATE	search/potentials/single_potential_heuristics.cc	/^    INITIAL_STATE,$/;"	m	class:potentials::OptimizeFor	file:
INIT_VERTEX	search/structural_symmetries/graph_creator.cc	/^              GOAL_VERTEX, INIT_VERTEX, CONDITIONAL_EFFECT_VERTEX,$/;"	e	enum:color_t	file:
INPUT_ERROR	search/utils/system.h	/^    INPUT_ERROR = 2,$/;"	m	class:utils::ExitCode
INTERRUPTED	search/search_engine.h	/^enum SearchStatus {IN_PROGRESS, TIMEOUT, FAILED, SOLVED, INTERRUPTED};$/;"	e	enum:SearchStatus
INVALID	search/evaluation_context.h	/^    static const int INVALID = -1;$/;"	m	class:EvaluationContext
IN_PROGRESS	search/search_engine.h	/^enum SearchStatus {IN_PROGRESS, TIMEOUT, FAILED, SOLVED, INTERRUPTED};$/;"	e	enum:SearchStatus
Impossible	translate/pddl/conditions.py	/^class Impossible(Exception):$/;"	c
Impossible	translate/simplify.py	/^class Impossible(Exception):$/;"	c
Increase	translate/pddl/f_expression.py	/^class Increase(FunctionAssignment):$/;"	c
IncrementalCanonicalPDBs	search/pdbs/incremental_canonical_pdbs.cc	/^IncrementalCanonicalPDBs::IncrementalCanonicalPDBs($/;"	f	class:pdbs::IncrementalCanonicalPDBs
IncrementalCanonicalPDBs	search/pdbs/incremental_canonical_pdbs.h	/^class IncrementalCanonicalPDBs {$/;"	c	namespace:pdbs
IntPacker	search/algorithms/int_packer.cc	/^IntPacker::IntPacker(const vector<int> &ranges)$/;"	f	class:int_packer::IntPacker
IntPacker	search/algorithms/int_packer.h	/^class IntPacker {$/;"	c	namespace:int_packer
IntRelation	search/causal_graph.h	/^typedef std::vector<std::vector<int>> IntRelation;$/;"	t
IntRelationBuilder	search/causal_graph.cc	/^IntRelationBuilder::IntRelationBuilder(int range)$/;"	f	class:IntRelationBuilder
IntRelationBuilder	search/causal_graph.cc	/^class IntRelationBuilder {$/;"	c	file:
IntSet	search/causal_graph.cc	/^    typedef unordered_set<int> IntSet;$/;"	t	class:IntRelationBuilder	file:
Invariant	translate/invariants.py	/^class Invariant:$/;"	c
InvariantPart	translate/invariants.py	/^class InvariantPart:$/;"	c
IteratedSearch	search/search_engines/iterated_search.cc	/^IteratedSearch::IteratedSearch(const Options &opts)$/;"	f	class:iterated_search::IteratedSearch
IteratedSearch	search/search_engines/iterated_search.h	/^class IteratedSearch : public SearchEngine {$/;"	c	namespace:iterated_search
JoinRule	translate/build_model.py	/^class JoinRule(BuildRule):$/;"	c
JunctorCondition	translate/pddl/conditions.py	/^class JunctorCondition(Condition):$/;"	c
KQueue	search/bliss/kqueue.h	/^KQueue<Type>::KQueue()$/;"	f	class:bliss::KQueue
KQueue	search/bliss/kqueue.h	/^class KQueue$/;"	c	namespace:bliss
KSTAR_H	search/search_engines/kstar.h	2;"	d
KStack	search/bliss/kstack.h	/^KStack<Type>::KStack()$/;"	f	class:bliss::KStack
KStack	search/bliss/kstack.h	/^class KStack {$/;"	c	namespace:bliss
KStar	search/search_engines/kstar.cc	/^KStar::KStar(const options::Options &opts) 	$/;"	f	class:kstar::KStar
KStar	search/search_engines/kstar.h	/^class KStar : public top_k_eager_search::TopKEagerSearch $/;"	c	namespace:kstar
KeySet	search/open_lists/pareto_open_list.cc	/^    typedef set<KeyType> KeySet;$/;"	t	class:ParetoOpenList	file:
KeyType	search/open_lists/pareto_open_list.cc	/^    typedef vector<int> KeyType;$/;"	t	class:ParetoOpenList	file:
LANDMARKS_EXPLORATION_H	search/landmarks/exploration.h	2;"	d
LANDMARKS_LAMA_FF_SYNERGY_H	search/landmarks/lama_ff_synergy.h	2;"	d
LANDMARKS_LANDMARK_COST_ASSIGNMENT_H	search/landmarks/landmark_cost_assignment.h	2;"	d
LANDMARKS_LANDMARK_COUNT_HEURISTIC_H	search/landmarks/landmark_count_heuristic.h	2;"	d
LANDMARKS_LANDMARK_FACTORY_H	search/landmarks/landmark_factory.h	2;"	d
LANDMARKS_LANDMARK_FACTORY_H_M_H	search/landmarks/landmark_factory_h_m.h	2;"	d
LANDMARKS_LANDMARK_FACTORY_MERGED_H	search/landmarks/landmark_factory_merged.h	2;"	d
LANDMARKS_LANDMARK_FACTORY_RPG_EXHAUST_H	search/landmarks/landmark_factory_rpg_exhaust.h	2;"	d
LANDMARKS_LANDMARK_FACTORY_RPG_SASP_H	search/landmarks/landmark_factory_rpg_sasp.h	2;"	d
LANDMARKS_LANDMARK_FACTORY_ZHU_GIVAN_H	search/landmarks/landmark_factory_zhu_givan.h	2;"	d
LANDMARKS_LANDMARK_GRAPH_H	search/landmarks/landmark_graph.h	2;"	d
LANDMARKS_LANDMARK_STATUS_MANAGER_H	search/landmarks/landmark_status_manager.h	2;"	d
LANDMARKS_UTIL_H	search/landmarks/util.h	2;"	d
LEAF_NODE	search/cegar/refinement_hierarchy.h	/^    static const int LEAF_NODE = -1;$/;"	m	class:cegar::Node
LEAF_NODE	search/pdbs/match_tree.cc	/^    static const int LEAF_NODE = -1;$/;"	m	struct:pdbs::MatchTree::Node	file:
LEVEL	search/merge_and_shrink/merge_scoring_function_total_order.h	/^        LEVEL,$/;"	m	class:merge_and_shrink::MergeScoringFunctionTotalOrder::AtomicTSOrder
LEVEL	search/variable_order_finder.h	/^    LEVEL,$/;"	e	enum:VariableOrderType
LINUX	search/utils/system.h	4;"	d
LMCutConstraints	search/operator_counting/lm_cut_constraints.h	/^class LMCutConstraints : public ConstraintGenerator {$/;"	c	namespace:operator_counting
LOW	search/merge_and_shrink/shrink_fh.h	/^    enum HighLow {HIGH, LOW};$/;"	e	enum:merge_and_shrink::ShrinkFH::HighLow
LPConstraint	search/lp/lp_solver.cc	/^LPConstraint::LPConstraint(double lower_bound, double upper_bound)$/;"	f	class:lp::LPConstraint
LPConstraint	search/lp/lp_solver.h	/^class LPConstraint {$/;"	c	namespace:lp
LPObjectiveSense	search/lp/lp_solver.h	/^enum class LPObjectiveSense {$/;"	c	namespace:lp
LPSolver	search/lp/lp_solver.cc	/^LPSolver::LPSolver(LPSolverType solver_type)$/;"	f	class:lp::LPSolver
LPSolver	search/lp/lp_solver.h	/^class LPSolver {$/;"	c	namespace:lp
LPSolverType	search/lp/lp_solver.h	/^enum class LPSolverType {$/;"	c	namespace:lp
LPVariable	search/lp/lp_solver.cc	/^LPVariable::LPVariable(double lower_bound, double upper_bound,$/;"	f	class:lp::LPVariable
LPVariable	search/lp/lp_solver.h	/^struct LPVariable {$/;"	s	namespace:lp
LP_LP_INTERNALS_H	search/lp/lp_internals.h	2;"	d
LP_LP_SOLVER_H	search/lp/lp_solver.h	2;"	d
LP_METHOD	search/lp/lp_solver.h	17;"	d
LP_METHOD	search/lp/lp_solver.h	19;"	d
Label	search/merge_and_shrink/labels.h	/^    explicit Label(int cost_)$/;"	f	class:merge_and_shrink::Label
Label	search/merge_and_shrink/labels.h	/^class Label {$/;"	c	namespace:merge_and_shrink
LabelEquivalenceRelation	search/merge_and_shrink/label_equivalence_relation.cc	/^LabelEquivalenceRelation::LabelEquivalenceRelation(const Labels &labels)$/;"	f	class:merge_and_shrink::LabelEquivalenceRelation
LabelEquivalenceRelation	search/merge_and_shrink/label_equivalence_relation.h	/^class LabelEquivalenceRelation {$/;"	c	namespace:merge_and_shrink
LabelGroup	search/merge_and_shrink/label_equivalence_relation.h	/^    LabelGroup() : cost(INF) {$/;"	f	class:merge_and_shrink::LabelGroup
LabelGroup	search/merge_and_shrink/label_equivalence_relation.h	/^class LabelGroup {$/;"	c	namespace:merge_and_shrink
LabelReduction	search/merge_and_shrink/label_reduction.cc	/^LabelReduction::LabelReduction(const Options &options)$/;"	f	class:merge_and_shrink::LabelReduction
LabelReduction	search/merge_and_shrink/label_reduction.h	/^class LabelReduction {$/;"	c	namespace:merge_and_shrink
LabelReductionMethod	search/merge_and_shrink/label_reduction.h	/^    enum LabelReductionMethod {$/;"	g	class:merge_and_shrink::LabelReduction
LabelReductionSystemOrder	search/merge_and_shrink/label_reduction.h	/^    enum LabelReductionSystemOrder {$/;"	g	class:merge_and_shrink::LabelReduction
Labels	search/merge_and_shrink/labels.cc	/^Labels::Labels(vector<unique_ptr<Label>> &&labels)$/;"	f	class:merge_and_shrink::Labels
Labels	search/merge_and_shrink/labels.h	/^class Labels {$/;"	c	namespace:merge_and_shrink
LamaFFSynergy	search/landmarks/lama_ff_synergy.cc	/^LamaFFSynergy::LamaFFSynergy(const Options &opts)$/;"	f	class:landmarks::LamaFFSynergy
LamaFFSynergy	search/landmarks/lama_ff_synergy.h	/^class LamaFFSynergy {$/;"	c	namespace:landmarks
LamaMasterHeuristic	search/landmarks/lama_ff_synergy.cc	/^    explicit LamaMasterHeuristic(LamaFFSynergy *synergy)$/;"	f	class:landmarks::LamaMasterHeuristic
LamaMasterHeuristic	search/landmarks/lama_ff_synergy.cc	/^class LamaMasterHeuristic : public Heuristic {$/;"	c	namespace:landmarks	file:
LandmarkCostAssignment	search/landmarks/landmark_cost_assignment.cc	/^LandmarkCostAssignment::LandmarkCostAssignment(const vector<int> &operator_costs,$/;"	f	class:landmarks::LandmarkCostAssignment
LandmarkCostAssignment	search/landmarks/landmark_cost_assignment.h	/^class LandmarkCostAssignment {$/;"	c	namespace:landmarks
LandmarkCountHeuristic	search/landmarks/landmark_count_heuristic.cc	/^LandmarkCountHeuristic::LandmarkCountHeuristic(const options::Options &opts)$/;"	f	class:landmarks::LandmarkCountHeuristic
LandmarkCountHeuristic	search/landmarks/landmark_count_heuristic.h	/^class LandmarkCountHeuristic : public Heuristic {$/;"	c	namespace:landmarks
LandmarkCutHeuristic	search/heuristics/lm_cut_heuristic.cc	/^LandmarkCutHeuristic::LandmarkCutHeuristic(const Options &opts)$/;"	f	class:lm_cut_heuristic::LandmarkCutHeuristic
LandmarkCutHeuristic	search/heuristics/lm_cut_heuristic.h	/^class LandmarkCutHeuristic : public Heuristic {$/;"	c	namespace:lm_cut_heuristic
LandmarkCutLandmarks	search/heuristics/lm_cut_landmarks.cc	/^LandmarkCutLandmarks::LandmarkCutLandmarks(const TaskProxy &task_proxy) {$/;"	f	class:lm_cut_heuristic::LandmarkCutLandmarks
LandmarkCutLandmarks	search/heuristics/lm_cut_landmarks.h	/^class LandmarkCutLandmarks {$/;"	c	namespace:lm_cut_heuristic
LandmarkDecomposition	search/cegar/subtask_generators.cc	/^LandmarkDecomposition::LandmarkDecomposition(const Options &opts)$/;"	f	class:cegar::LandmarkDecomposition
LandmarkDecomposition	search/cegar/subtask_generators.h	/^class LandmarkDecomposition : public SubtaskGenerator {$/;"	c	namespace:cegar
LandmarkEfficientOptimalSharedCostAssignment	search/landmarks/landmark_cost_assignment.cc	/^LandmarkEfficientOptimalSharedCostAssignment::LandmarkEfficientOptimalSharedCostAssignment($/;"	f	class:landmarks::LandmarkEfficientOptimalSharedCostAssignment
LandmarkEfficientOptimalSharedCostAssignment	search/landmarks/landmark_cost_assignment.h	/^class LandmarkEfficientOptimalSharedCostAssignment : public LandmarkCostAssignment {$/;"	c	namespace:landmarks
LandmarkFactory	search/landmarks/landmark_factory.cc	/^LandmarkFactory::LandmarkFactory(const options::Options &opts)$/;"	f	class:landmarks::LandmarkFactory
LandmarkFactory	search/landmarks/landmark_factory.h	/^class LandmarkFactory {$/;"	c	namespace:landmarks
LandmarkFactoryHM	search/landmarks/landmark_factory_h_m.cc	/^LandmarkFactoryHM::LandmarkFactoryHM(const options::Options &opts)$/;"	f	class:landmarks::LandmarkFactoryHM
LandmarkFactoryHM	search/landmarks/landmark_factory_h_m.h	/^class LandmarkFactoryHM : public LandmarkFactory {$/;"	c	namespace:landmarks
LandmarkFactoryMerged	search/landmarks/landmark_factory_merged.cc	/^LandmarkFactoryMerged::LandmarkFactoryMerged(const Options &opts)$/;"	f	class:landmarks::LandmarkFactoryMerged
LandmarkFactoryMerged	search/landmarks/landmark_factory_merged.h	/^class LandmarkFactoryMerged : public LandmarkFactory {$/;"	c	namespace:landmarks
LandmarkFactoryRpgExhaust	search/landmarks/landmark_factory_rpg_exhaust.cc	/^LandmarkFactoryRpgExhaust::LandmarkFactoryRpgExhaust(const Options &opts)$/;"	f	class:landmarks::LandmarkFactoryRpgExhaust
LandmarkFactoryRpgExhaust	search/landmarks/landmark_factory_rpg_exhaust.h	/^class LandmarkFactoryRpgExhaust : public LandmarkFactory {$/;"	c	namespace:landmarks
LandmarkFactoryRpgSasp	search/landmarks/landmark_factory_rpg_sasp.cc	/^LandmarkFactoryRpgSasp::LandmarkFactoryRpgSasp(const Options &opts)$/;"	f	class:landmarks::LandmarkFactoryRpgSasp
LandmarkFactoryRpgSasp	search/landmarks/landmark_factory_rpg_sasp.h	/^class LandmarkFactoryRpgSasp : public LandmarkFactory {$/;"	c	namespace:landmarks
LandmarkFactoryZhuGivan	search/landmarks/landmark_factory_zhu_givan.cc	/^LandmarkFactoryZhuGivan::LandmarkFactoryZhuGivan(const Options &opts)$/;"	f	class:landmarks::LandmarkFactoryZhuGivan
LandmarkFactoryZhuGivan	search/landmarks/landmark_factory_zhu_givan.h	/^class LandmarkFactoryZhuGivan : public LandmarkFactory {$/;"	c	namespace:landmarks
LandmarkGraph	search/landmarks/landmark_graph.cc	/^LandmarkGraph::LandmarkGraph(const TaskProxy &task_proxy)$/;"	f	class:landmarks::LandmarkGraph
LandmarkGraph	search/landmarks/landmark_graph.h	/^class LandmarkGraph {$/;"	c	class:landmarks::EdgeType
LandmarkNode	search/landmarks/landmark_graph.h	/^    LandmarkNode(std::vector<FactPair> &facts, bool disj, bool conj = false)$/;"	f	class:landmarks::EdgeType::LandmarkNode
LandmarkNode	search/landmarks/landmark_graph.h	/^class LandmarkNode {$/;"	c	class:landmarks::EdgeType
LandmarkNodeComparer	search/landmarks/landmark_graph.h	/^struct LandmarkNodeComparer {$/;"	s	class:landmarks::EdgeType
LandmarkStatusManager	search/landmarks/landmark_status_manager.cc	/^LandmarkStatusManager::LandmarkStatusManager(LandmarkGraph &graph)$/;"	f	class:landmarks::LandmarkStatusManager
LandmarkStatusManager	search/landmarks/landmark_status_manager.h	/^class LandmarkStatusManager {$/;"	c	namespace:landmarks
LandmarkUniformSharedCostAssignment	search/landmarks/landmark_cost_assignment.cc	/^LandmarkUniformSharedCostAssignment::LandmarkUniformSharedCostAssignment($/;"	f	class:landmarks::LandmarkUniformSharedCostAssignment
LandmarkUniformSharedCostAssignment	search/landmarks/landmark_cost_assignment.h	/^class LandmarkUniformSharedCostAssignment : public LandmarkCostAssignment {$/;"	c	namespace:landmarks
LanguageSupportInfo	search/options/doc_store.h	/^    LanguageSupportInfo(std::string feat, std::string descr)$/;"	f	struct:options::LanguageSupportInfo
LanguageSupportInfo	search/options/doc_store.h	/^struct LanguageSupportInfo {$/;"	s	namespace:options
LazySearch	search/search_engines/lazy_search.cc	/^LazySearch::LazySearch(const Options &opts)$/;"	f	class:lazy_search::LazySearch
LazySearch	search/search_engines/lazy_search.h	/^class LazySearch : public SearchEngine {$/;"	c	namespace:lazy_search
LeafGenerator	translate/build_model.py	/^class LeafGenerator:$/;"	c
Literal	translate/pddl/conditions.py	/^class Literal(Condition):$/;"	c
LocalAssignment	search/domain_transition_graph.h	/^    LocalAssignment(int var, int val)$/;"	f	struct:LocalAssignment
LocalAssignment	search/domain_transition_graph.h	/^struct LocalAssignment {$/;"	s
LocalProblem	search/heuristics/cea_heuristic.cc	/^    LocalProblem()$/;"	f	struct:cea_heuristic::LocalProblem
LocalProblem	search/heuristics/cea_heuristic.cc	/^struct LocalProblem {$/;"	s	namespace:cea_heuristic	file:
LocalProblemNode	search/heuristics/cea_heuristic.cc	/^    LocalProblemNode(LocalProblem *owner_, int context_size)$/;"	f	struct:cea_heuristic::LocalProblemNode
LocalProblemNode	search/heuristics/cea_heuristic.cc	/^struct LocalProblemNode {$/;"	s	namespace:cea_heuristic	file:
LocalTransition	search/heuristics/cea_heuristic.cc	/^    LocalTransition($/;"	f	struct:cea_heuristic::LocalTransition
LocalTransition	search/heuristics/cea_heuristic.cc	/^struct LocalTransition {$/;"	s	namespace:cea_heuristic	file:
Log	search/utils/logging.h	/^struct Log {$/;"	s	namespace:utils
MAXIMIZE	search/lp/lp_solver.h	/^    MAXIMIZE, MINIMIZE$/;"	m	class:lp::LPObjectiveSense
MAX_COST_VALUE	search/heuristics/additive_heuristic.h	/^    static const int MAX_COST_VALUE = 100000000;$/;"	m	class:additive_heuristic::AdditiveHeuristic
MAX_COST_VALUE	search/landmarks/exploration.h	/^    static const int MAX_COST_VALUE = 100000000; \/\/ See additive_heuristic.h.$/;"	m	class:landmarks::Exploration
MAX_OPERATOR_COST	search/operator_cost.h	/^enum OperatorCost {NORMAL = 0, ONE = 1, PLUSONE = 2, MAX_OPERATOR_COST};$/;"	e	enum:OperatorCost
MAX_REFINED	search/cegar/split_selector.h	/^    MAX_REFINED,$/;"	m	class:cegar::PickSplit
MAX_UNWANTED	search/cegar/split_selector.h	/^    MAX_UNWANTED,$/;"	m	class:cegar::PickSplit
MAX_VALUE	search/structural_symmetries/graph_creator.cc	/^              CONDITIONAL_DELETE_EFFECT_VERTEX, MAX_VALUE};$/;"	e	enum:color_t	file:
MAYBE	search/bliss/graph.cc	/^  static const char MAYBE = 0;$/;"	m	class:bliss::TreeNode	file:
MEM_FIELD_WIDTH	search/utils/logging.cc	/^    static const int MEM_FIELD_WIDTH = 7;$/;"	m	class:utils::MemoryTracer	file:
MERGE_AND_SHRINK_DISTANCES_H	search/merge_and_shrink/distances.h	2;"	d
MERGE_AND_SHRINK_FACTORED_TRANSITION_SYSTEM_H	search/merge_and_shrink/factored_transition_system.h	2;"	d
MERGE_AND_SHRINK_FTS_FACTORY_H	search/merge_and_shrink/fts_factory.h	2;"	d
MERGE_AND_SHRINK_LABELS_H	search/merge_and_shrink/labels.h	2;"	d
MERGE_AND_SHRINK_LABEL_EQUIVALENCE_RELATION_H	search/merge_and_shrink/label_equivalence_relation.h	2;"	d
MERGE_AND_SHRINK_LABEL_REDUCTION_H	search/merge_and_shrink/label_reduction.h	2;"	d
MERGE_AND_SHRINK_MERGE_AND_SHRINK_HEURISTIC_H	search/merge_and_shrink/merge_and_shrink_heuristic.h	2;"	d
MERGE_AND_SHRINK_MERGE_AND_SHRINK_REPRESENTATION_H	search/merge_and_shrink/merge_and_shrink_representation.h	2;"	d
MERGE_AND_SHRINK_MERGE_SCORING_FUNCTION_DFP_H	search/merge_and_shrink/merge_scoring_function_dfp.h	2;"	d
MERGE_AND_SHRINK_MERGE_SCORING_FUNCTION_GOAL_RELEVANCE_H	search/merge_and_shrink/merge_scoring_function_goal_relevance.h	2;"	d
MERGE_AND_SHRINK_MERGE_SCORING_FUNCTION_H	search/merge_and_shrink/merge_scoring_function.h	2;"	d
MERGE_AND_SHRINK_MERGE_SCORING_FUNCTION_SINGLE_RANDOM_H	search/merge_and_shrink/merge_scoring_function_single_random.h	2;"	d
MERGE_AND_SHRINK_MERGE_SCORING_FUNCTION_TOTAL_ORDER_H	search/merge_and_shrink/merge_scoring_function_total_order.h	2;"	d
MERGE_AND_SHRINK_MERGE_SELECTOR_H	search/merge_and_shrink/merge_selector.h	2;"	d
MERGE_AND_SHRINK_MERGE_SELECTOR_SCORE_BASED_FILTERING_H	search/merge_and_shrink/merge_selector_score_based_filtering.h	2;"	d
MERGE_AND_SHRINK_MERGE_STRATEGY_FACTORY_H	search/merge_and_shrink/merge_strategy_factory.h	2;"	d
MERGE_AND_SHRINK_MERGE_STRATEGY_FACTORY_PRECOMPUTED_H	search/merge_and_shrink/merge_strategy_factory_precomputed.h	2;"	d
MERGE_AND_SHRINK_MERGE_STRATEGY_FACTORY_STATELESS_H	search/merge_and_shrink/merge_strategy_factory_stateless.h	2;"	d
MERGE_AND_SHRINK_MERGE_STRATEGY_H	search/merge_and_shrink/merge_strategy.h	2;"	d
MERGE_AND_SHRINK_MERGE_STRATEGY_PRECOMPUTED_H	search/merge_and_shrink/merge_strategy_precomputed.h	2;"	d
MERGE_AND_SHRINK_MERGE_STRATEGY_STATELESS_H	search/merge_and_shrink/merge_strategy_stateless.h	2;"	d
MERGE_AND_SHRINK_MERGE_TREE_FACTORY_H	search/merge_and_shrink/merge_tree_factory.h	2;"	d
MERGE_AND_SHRINK_MERGE_TREE_FACTORY_LINEAR_H	search/merge_and_shrink/merge_tree_factory_linear.h	2;"	d
MERGE_AND_SHRINK_MERGE_TREE_H	search/merge_and_shrink/merge_tree.h	2;"	d
MERGE_AND_SHRINK_SHRINK_BISIMULATION_H	search/merge_and_shrink/shrink_bisimulation.h	2;"	d
MERGE_AND_SHRINK_SHRINK_BUCKET_BASED_H	search/merge_and_shrink/shrink_bucket_based.h	2;"	d
MERGE_AND_SHRINK_SHRINK_FH_H	search/merge_and_shrink/shrink_fh.h	2;"	d
MERGE_AND_SHRINK_SHRINK_RANDOM_H	search/merge_and_shrink/shrink_random.h	2;"	d
MERGE_AND_SHRINK_SHRINK_STRATEGY_H	search/merge_and_shrink/shrink_strategy.h	2;"	d
MERGE_AND_SHRINK_TRANSITION_SYSTEM_H	search/merge_and_shrink/transition_system.h	2;"	d
MERGE_AND_SHRINK_TYPES_H	search/merge_and_shrink/types.h	2;"	d
MERGE_AND_SHRINK_UTILS_H	search/merge_and_shrink/utils.h	2;"	d
MINUSINF	search/merge_and_shrink/types.cc	/^const int MINUSINF = numeric_limits<int>::min();$/;"	m	namespace:merge_and_shrink	file:
MIN_BUCKETS_BEFORE_SWITCH	search/algorithms/priority_queues.h	/^    static const int MIN_BUCKETS_BEFORE_SWITCH = 100;$/;"	m	class:priority_queues::BucketQueue
MIN_HADD	search/cegar/split_selector.h	/^    MIN_HADD,$/;"	m	class:cegar::PickSplit
MIN_REFINED	search/cegar/split_selector.h	/^    MIN_REFINED,$/;"	m	class:cegar::PickSplit
MIN_UNWANTED	search/cegar/split_selector.h	/^    MIN_UNWANTED,$/;"	m	class:cegar::PickSplit
MatchGenerator	translate/build_model.py	/^class MatchGenerator:$/;"	c
MatchTree	search/pdbs/match_tree.cc	/^MatchTree::MatchTree(const TaskProxy &task_proxy,$/;"	f	class:pdbs::MatchTree
MatchTree	search/pdbs/match_tree.h	/^class MatchTree {$/;"	c	namespace:pdbs
MaxCliqueComputer	search/algorithms/max_cliques.cc	/^    MaxCliqueComputer(const vector<vector<int>> &graph_,$/;"	f	class:max_cliques::MaxCliqueComputer
MaxCliqueComputer	search/algorithms/max_cliques.cc	/^class MaxCliqueComputer {$/;"	c	namespace:max_cliques	file:
MaxDAG	translate/variable_order.py	/^class MaxDAG(object):$/;"	c
MaxEvaluator	search/evaluators/max_evaluator.cc	/^MaxEvaluator::MaxEvaluator(const Options &opts)$/;"	f	class:max_evaluator::MaxEvaluator
MaxEvaluator	search/evaluators/max_evaluator.h	/^class MaxEvaluator : public combining_evaluator::CombiningEvaluator {$/;"	c	namespace:max_evaluator
MemoryTracer	search/utils/logging.cc	/^MemoryTracer::MemoryTracer() {$/;"	f	class:utils::MemoryTracer
MemoryTracer	search/utils/logging.cc	/^class MemoryTracer {$/;"	c	namespace:utils	file:
MergeAndShrinkHeuristic	search/merge_and_shrink/merge_and_shrink_heuristic.cc	/^MergeAndShrinkHeuristic::MergeAndShrinkHeuristic(const Options &opts)$/;"	f	class:merge_and_shrink::MergeAndShrinkHeuristic
MergeAndShrinkHeuristic	search/merge_and_shrink/merge_and_shrink_heuristic.h	/^class MergeAndShrinkHeuristic : public Heuristic {$/;"	c	namespace:merge_and_shrink
MergeAndShrinkRepresentation	search/merge_and_shrink/merge_and_shrink_representation.cc	/^MergeAndShrinkRepresentation::MergeAndShrinkRepresentation(int domain_size)$/;"	f	class:merge_and_shrink::MergeAndShrinkRepresentation
MergeAndShrinkRepresentation	search/merge_and_shrink/merge_and_shrink_representation.h	/^class MergeAndShrinkRepresentation {$/;"	c	namespace:merge_and_shrink
MergeAndShrinkRepresentationLeaf	search/merge_and_shrink/merge_and_shrink_representation.cc	/^MergeAndShrinkRepresentationLeaf::MergeAndShrinkRepresentationLeaf($/;"	f	class:merge_and_shrink::MergeAndShrinkRepresentationLeaf
MergeAndShrinkRepresentationLeaf	search/merge_and_shrink/merge_and_shrink_representation.h	/^class MergeAndShrinkRepresentationLeaf : public MergeAndShrinkRepresentation {$/;"	c	namespace:merge_and_shrink
MergeAndShrinkRepresentationMerge	search/merge_and_shrink/merge_and_shrink_representation.cc	/^MergeAndShrinkRepresentationMerge::MergeAndShrinkRepresentationMerge($/;"	f	class:merge_and_shrink::MergeAndShrinkRepresentationMerge
MergeAndShrinkRepresentationMerge	search/merge_and_shrink/merge_and_shrink_representation.h	/^class MergeAndShrinkRepresentationMerge : public MergeAndShrinkRepresentation {$/;"	c	namespace:merge_and_shrink
MergeScoringFunction	search/merge_and_shrink/merge_scoring_function.cc	/^MergeScoringFunction::MergeScoringFunction()$/;"	f	class:merge_and_shrink::MergeScoringFunction
MergeScoringFunction	search/merge_and_shrink/merge_scoring_function.h	/^class MergeScoringFunction {$/;"	c	namespace:merge_and_shrink
MergeScoringFunctionDFP	search/merge_and_shrink/merge_scoring_function_dfp.h	/^class MergeScoringFunctionDFP : public MergeScoringFunction {$/;"	c	namespace:merge_and_shrink
MergeScoringFunctionGoalRelevance	search/merge_and_shrink/merge_scoring_function_goal_relevance.h	/^class MergeScoringFunctionGoalRelevance : public MergeScoringFunction {$/;"	c	namespace:merge_and_shrink
MergeScoringFunctionSingleRandom	search/merge_and_shrink/merge_scoring_function_single_random.cc	/^MergeScoringFunctionSingleRandom::MergeScoringFunctionSingleRandom($/;"	f	class:merge_and_shrink::MergeScoringFunctionSingleRandom
MergeScoringFunctionSingleRandom	search/merge_and_shrink/merge_scoring_function_single_random.h	/^class MergeScoringFunctionSingleRandom : public MergeScoringFunction {$/;"	c	namespace:merge_and_shrink
MergeScoringFunctionTotalOrder	search/merge_and_shrink/merge_scoring_function_total_order.cc	/^MergeScoringFunctionTotalOrder::MergeScoringFunctionTotalOrder($/;"	f	class:merge_and_shrink::MergeScoringFunctionTotalOrder
MergeScoringFunctionTotalOrder	search/merge_and_shrink/merge_scoring_function_total_order.h	/^class MergeScoringFunctionTotalOrder : public MergeScoringFunction {$/;"	c	namespace:merge_and_shrink
MergeSelector	search/merge_and_shrink/merge_selector.h	/^class MergeSelector {$/;"	c	namespace:merge_and_shrink
MergeSelectorScoreBasedFiltering	search/merge_and_shrink/merge_selector_score_based_filtering.cc	/^MergeSelectorScoreBasedFiltering::MergeSelectorScoreBasedFiltering($/;"	f	class:merge_and_shrink::MergeSelectorScoreBasedFiltering
MergeSelectorScoreBasedFiltering	search/merge_and_shrink/merge_selector_score_based_filtering.h	/^class MergeSelectorScoreBasedFiltering : public MergeSelector {$/;"	c	namespace:merge_and_shrink
MergeStrategy	search/merge_and_shrink/merge_strategy.cc	/^MergeStrategy::MergeStrategy($/;"	f	class:merge_and_shrink::MergeStrategy
MergeStrategy	search/merge_and_shrink/merge_strategy.h	/^class MergeStrategy {$/;"	c	namespace:merge_and_shrink
MergeStrategyFactory	search/merge_and_shrink/merge_strategy_factory.h	/^class MergeStrategyFactory {$/;"	c	namespace:merge_and_shrink
MergeStrategyFactoryPrecomputed	search/merge_and_shrink/merge_strategy_factory_precomputed.cc	/^MergeStrategyFactoryPrecomputed::MergeStrategyFactoryPrecomputed($/;"	f	class:merge_and_shrink::MergeStrategyFactoryPrecomputed
MergeStrategyFactoryPrecomputed	search/merge_and_shrink/merge_strategy_factory_precomputed.h	/^class MergeStrategyFactoryPrecomputed : public MergeStrategyFactory {$/;"	c	namespace:merge_and_shrink
MergeStrategyFactoryStateless	search/merge_and_shrink/merge_strategy_factory_stateless.cc	/^MergeStrategyFactoryStateless::MergeStrategyFactoryStateless($/;"	f	class:merge_and_shrink::MergeStrategyFactoryStateless
MergeStrategyFactoryStateless	search/merge_and_shrink/merge_strategy_factory_stateless.h	/^class MergeStrategyFactoryStateless : public MergeStrategyFactory {$/;"	c	namespace:merge_and_shrink
MergeStrategyPrecomputed	search/merge_and_shrink/merge_strategy_precomputed.cc	/^MergeStrategyPrecomputed::MergeStrategyPrecomputed($/;"	f	class:merge_and_shrink::MergeStrategyPrecomputed
MergeStrategyPrecomputed	search/merge_and_shrink/merge_strategy_precomputed.h	/^class MergeStrategyPrecomputed : public MergeStrategy {$/;"	c	namespace:merge_and_shrink
MergeStrategyStateless	search/merge_and_shrink/merge_strategy_stateless.cc	/^MergeStrategyStateless::MergeStrategyStateless($/;"	f	class:merge_and_shrink::MergeStrategyStateless
MergeStrategyStateless	search/merge_and_shrink/merge_strategy_stateless.h	/^class MergeStrategyStateless : public MergeStrategy {$/;"	c	namespace:merge_and_shrink
MergeTree	search/merge_and_shrink/merge_tree.cc	/^MergeTree::MergeTree($/;"	f	class:merge_and_shrink::MergeTree
MergeTree	search/merge_and_shrink/merge_tree.h	/^class MergeTree {$/;"	c	namespace:merge_and_shrink
MergeTreeFactory	search/merge_and_shrink/merge_tree_factory.cc	/^MergeTreeFactory::MergeTreeFactory(const options::Options &options)$/;"	f	class:merge_and_shrink::MergeTreeFactory
MergeTreeFactory	search/merge_and_shrink/merge_tree_factory.h	/^class MergeTreeFactory {$/;"	c	namespace:merge_and_shrink
MergeTreeFactoryLinear	search/merge_and_shrink/merge_tree_factory_linear.cc	/^MergeTreeFactoryLinear::MergeTreeFactoryLinear(const options::Options &options)$/;"	f	class:merge_and_shrink::MergeTreeFactoryLinear
MergeTreeFactoryLinear	search/merge_and_shrink/merge_tree_factory_linear.h	/^class MergeTreeFactoryLinear : public MergeTreeFactory {$/;"	c	namespace:merge_and_shrink
MergeTreeNode	search/merge_and_shrink/merge_tree.cc	/^MergeTreeNode::MergeTreeNode($/;"	f	class:merge_and_shrink::MergeTreeNode
MergeTreeNode	search/merge_and_shrink/merge_tree.cc	/^MergeTreeNode::MergeTreeNode(const MergeTreeNode &other)$/;"	f	class:merge_and_shrink::MergeTreeNode
MergeTreeNode	search/merge_and_shrink/merge_tree.cc	/^MergeTreeNode::MergeTreeNode(int ts_index)$/;"	f	class:merge_and_shrink::MergeTreeNode
MergeTreeNode	search/merge_and_shrink/merge_tree.h	/^struct MergeTreeNode {$/;"	s	namespace:merge_and_shrink
ModifiedGoalsTask	search/tasks/modified_goals_task.cc	/^ModifiedGoalsTask::ModifiedGoalsTask($/;"	f	class:extra_tasks::ModifiedGoalsTask
ModifiedGoalsTask	search/tasks/modified_goals_task.h	/^class ModifiedGoalsTask : public tasks::DelegatingTask {$/;"	c	namespace:extra_tasks
ModifiedOperatorCostsTask	search/tasks/modified_operator_costs_task.cc	/^ModifiedOperatorCostsTask::ModifiedOperatorCostsTask($/;"	f	class:extra_tasks::ModifiedOperatorCostsTask
ModifiedOperatorCostsTask	search/tasks/modified_operator_costs_task.h	/^class ModifiedOperatorCostsTask : public tasks::DelegatingTask {$/;"	c	namespace:extra_tasks
N	search/bliss/heap.h	/^  unsigned int N;$/;"	m	class:bliss::Heap
N	search/bliss/partition.h	/^  unsigned int N;$/;"	m	class:bliss::Partition
NEW	search/search_node_info.h	/^    enum NodeStatus {NEW = 0, OPEN = 1, CLOSED = 2, DEAD_END = 3};$/;"	e	enum:SearchNodeInfo::NodeStatus
NEW_SORT1	search/bliss/partition.cc	461;"	d	file:
NEW_TO_OLD	search/merge_and_shrink/merge_scoring_function_total_order.h	/^        NEW_TO_OLD,$/;"	m	class:merge_and_shrink::MergeScoringFunctionTotalOrder::ProductTSOrder
NO	search/bliss/graph.cc	/^  static const char NO = -1;$/;"	m	class:bliss::TreeNode	file:
NOEXCEPT	search/utils/language.h	13;"	d
NOEXCEPT	search/utils/language.h	15;"	d
NOMINMAX	search/utils/system_windows.h	6;"	d
NONE	search/options/option_parser.cc	/^const string OptionParser::NONE = "<none>";$/;"	m	class:options::OptionParser	file:
NONE	search/options/option_parser.h	/^    static const std::string NONE;$/;"	m	class:options::OptionParser
NONE	search/structural_symmetries/group.h	/^    NONE,$/;"	m	class:SearchSymmetries
NONE	search/structural_symmetries/group.h	/^    NONE,$/;"	m	class:SymmetricalLookups
NORMAL	search/merge_and_shrink/types.h	/^    NORMAL,$/;"	m	class:merge_and_shrink::Verbosity
NORMAL	search/operator_cost.h	/^enum OperatorCost {NORMAL = 0, ONE = 1, PLUSONE = 2, MAX_OPERATOR_COST};$/;"	e	enum:OperatorCost
NOT_COMPUTED	search/heuristics/cg_cache.cc	/^const int CGCache::NOT_COMPUTED;$/;"	m	class:cg_heuristic::CGCache	file:
NOT_COMPUTED	search/heuristics/cg_cache.h	/^    static const int NOT_COMPUTED = -2;$/;"	m	class:cg_heuristic::CGCache
NO_RETURN	search/utils/language.h	5;"	d
NO_RETURN	search/utils/language.h	7;"	d
NO_VALUE	search/heuristic.h	/^    enum {DEAD_END = -1, NO_VALUE = -2};$/;"	e	enum:Heuristic::__anon4
NegatedAtom	translate/pddl/conditions.py	/^class NegatedAtom(Literal):$/;"	c
NegationByFailureInfo	search/axioms.h	/^        NegationByFailureInfo(int var, AxiomLiteral *lit)$/;"	f	struct:AxiomEvaluator::NegationByFailureInfo
NegationByFailureInfo	search/axioms.h	/^    struct NegationByFailureInfo {$/;"	s	class:AxiomEvaluator
NegativeClause	translate/constraints.py	/^class NegativeClause(object):$/;"	c
Node	search/cegar/refinement_hierarchy.cc	/^Node::Node()$/;"	f	class:cegar::Node
Node	search/cegar/refinement_hierarchy.h	/^class Node {$/;"	c	namespace:cegar
Node	search/pdbs/match_tree.cc	/^MatchTree::Node::Node()$/;"	f	class:pdbs::MatchTree::Node
Node	search/pdbs/match_tree.cc	/^struct MatchTree::Node {$/;"	s	class:pdbs::MatchTree	file:
NodeStatus	search/search_node_info.h	/^    enum NodeStatus {NEW = 0, OPEN = 1, CLOSED = 2, DEAD_END = 3};$/;"	g	struct:SearchNodeInfo
NoteInfo	search/options/doc_store.h	/^    NoteInfo(std::string n, std::string descr, bool long_text_)$/;"	f	struct:options::NoteInfo
NoteInfo	search/options/doc_store.h	/^struct NoteInfo {$/;"	s	namespace:options
NullPruningMethod	search/pruning/null_pruning_method.h	/^class NullPruningMethod : public PruningMethod {$/;"	c	namespace:null_pruning_method
NumericConstant	translate/pddl/f_expression.py	/^class NumericConstant(FunctionalExpression):$/;"	c
OLD_TO_NEW	search/merge_and_shrink/merge_scoring_function_total_order.h	/^        OLD_TO_NEW,$/;"	m	class:merge_and_shrink::MergeScoringFunctionTotalOrder::ProductTSOrder
ONE	search/operator_cost.h	/^enum OperatorCost {NORMAL = 0, ONE = 1, PLUSONE = 2, MAX_OPERATOR_COST};$/;"	e	enum:OperatorCost
ONE_STATE	search/structural_symmetries/group.h	/^    ONE_STATE,$/;"	m	class:SymmetricalLookups
OPEN	search/search_node_info.h	/^    enum NodeStatus {NEW = 0, OPEN = 1, CLOSED = 2, DEAD_END = 3};$/;"	e	enum:SearchNodeInfo::NodeStatus
OPEN_LISTS_ALTERNATION_OPEN_LIST_H	search/open_lists/alternation_open_list.h	2;"	d
OPEN_LISTS_EPSILON_GREEDY_OPEN_LIST_H	search/open_lists/epsilon_greedy_open_list.h	2;"	d
OPEN_LISTS_OPEN_LIST_FACTORY_H	search/open_lists/open_list_factory.h	2;"	d
OPEN_LISTS_OPEN_LIST_H	search/open_lists/open_list.h	2;"	d
OPEN_LISTS_PARETO_OPEN_LIST_H	search/open_lists/pareto_open_list.h	2;"	d
OPEN_LISTS_STANDARD_SCALAR_OPEN_LIST_H	search/open_lists/standard_scalar_open_list.h	2;"	d
OPEN_LISTS_TIEBREAKING_OPEN_LIST_H	search/open_lists/tiebreaking_open_list.h	2;"	d
OPEN_LISTS_TYPE_BASED_OPEN_LIST_H	search/open_lists/type_based_open_list.h	2;"	d
OPERATING_SYSTEM	search/utils/system.h	12;"	d
OPERATING_SYSTEM	search/utils/system.h	15;"	d
OPERATING_SYSTEM	search/utils/system.h	9;"	d
OPERATOR_COST_H	search/operator_cost.h	2;"	d
OPERATOR_COUNTING_CONSTRAINT_GENERATOR_H	search/operator_counting/constraint_generator.h	2;"	d
OPERATOR_COUNTING_LM_CUT_CONSTRAINTS_H	search/operator_counting/lm_cut_constraints.h	2;"	d
OPERATOR_COUNTING_OPERATOR_COUNTING_HEURISTIC_H	search/operator_counting/operator_counting_heuristic.h	2;"	d
OPERATOR_COUNTING_PHO_CONSTRAINTS_H	search/operator_counting/pho_constraints.h	2;"	d
OPERATOR_COUNTING_STATE_EQUATION_CONSTRAINTS_H	search/operator_counting/state_equation_constraints.h	2;"	d
OPTIONS_ANY_H	search/options/any.h	2;"	d
OPTIONS_BOUNDS_H	search/options/bounds.h	2;"	d
OPTIONS_DOC_PRINTER_H	search/options/doc_printer.h	2;"	d
OPTIONS_DOC_STORE_H	search/options/doc_store.h	2;"	d
OPTIONS_ERRORS_H	search/options/errors.h	2;"	d
OPTIONS_OPTIONS_H	search/options/options.h	2;"	d
OPTIONS_OPTION_PARSER_H	search/options/option_parser.h	2;"	d
OPTIONS_PARSE_TREE_H	search/options/parse_tree.h	2;"	d
OPTIONS_PLUGIN_H	search/options/plugin.h	2;"	d
OPTIONS_PREDEFINITIONS_H	search/options/predefinitions.h	2;"	d
OPTIONS_REGISTRIES_H	search/options/registries.h	2;"	d
OPTIONS_SYNERGY_H	search/options/synergy.h	2;"	d
OPTIONS_TOKEN_PARSER_H	search/options/token_parser.h	2;"	d
OPTIONS_TYPE_DOCUMENTER_H	search/options/type_documenter.h	2;"	d
OPTIONS_TYPE_NAMER_H	search/options/type_namer.h	2;"	d
OPTION_PARSER_H	search/option_parser.h	2;"	d
OPTION_PARSER_UTIL_H	search/option_parser_util.h	2;"	d
ORIGINAL	search/cegar/subtask_generators.h	/^    ORIGINAL,$/;"	m	class:cegar::FactOrder
OSS	search/structural_symmetries/group.h	/^    OSS,$/;"	m	class:SearchSymmetries
OSX	search/utils/system.h	5;"	d
OUT_OF_MEMORY	search/utils/system.h	/^    OUT_OF_MEMORY = 6$/;"	m	class:utils::ExitCode
OccurrencesTracker	translate/greedy_join.py	/^class OccurrencesTracker(object):$/;"	c
OpenList	search/open_lists/open_list.h	/^OpenList<Entry>::OpenList(bool only_preferred)$/;"	f	class:OpenList
OpenList	search/open_lists/open_list.h	/^class OpenList {$/;"	c
OpenListFactory	search/open_lists/open_list_factory.h	/^class OpenListFactory {$/;"	c
OperatorCost	search/operator_cost.h	/^enum OperatorCost {NORMAL = 0, ONE = 1, PLUSONE = 2, MAX_OPERATOR_COST};$/;"	g
OperatorCountingHeuristic	search/operator_counting/operator_counting_heuristic.cc	/^OperatorCountingHeuristic::OperatorCountingHeuristic(const Options &opts)$/;"	f	class:operator_counting::OperatorCountingHeuristic
OperatorCountingHeuristic	search/operator_counting/operator_counting_heuristic.h	/^class OperatorCountingHeuristic : public Heuristic {$/;"	c	namespace:operator_counting
OperatorPermutation	search/structural_symmetries/operator_permutation.cc	/^OperatorPermutation::OperatorPermutation(const Permutation& permutation){$/;"	f	class:OperatorPermutation
OperatorPermutation	search/structural_symmetries/operator_permutation.cc	/^OperatorPermutation::OperatorPermutation(const unsigned int* full_permutation){$/;"	f	class:OperatorPermutation
OperatorPermutation	search/structural_symmetries/operator_permutation.h	/^class OperatorPermutation {$/;"	c
OperatorProxy	search/task_proxy.h	/^    OperatorProxy(const AbstractTask &task, int index, bool is_axiom)$/;"	f	class:OperatorProxy
OperatorProxy	search/task_proxy.h	/^class OperatorProxy {$/;"	c
OperatorsProxy	search/task_proxy.h	/^    explicit OperatorsProxy(const AbstractTask &task)$/;"	f	class:OperatorsProxy
OperatorsProxy	search/task_proxy.h	/^class OperatorsProxy {$/;"	c
OptimizeFor	search/potentials/single_potential_heuristics.cc	/^enum class OptimizeFor {$/;"	c	namespace:potentials	file:
OptionParser	search/options/option_parser.cc	/^OptionParser::OptionParser(ParseTree pt, bool dr)$/;"	f	class:options::OptionParser
OptionParser	search/options/option_parser.cc	/^OptionParser::OptionParser(const string config, bool dr)$/;"	f	class:options::OptionParser
OptionParser	search/options/option_parser.h	/^class OptionParser {$/;"	c	namespace:options
Options	search/options/options.h	/^    Options(bool hm = false)$/;"	f	class:options::Options
Options	search/options/options.h	/^class Options {$/;"	c	namespace:options
Orbit	search/bliss/orbit.cc	/^Orbit::Orbit()$/;"	f	class:bliss::Orbit
Orbit	search/bliss/orbit.h	/^class Orbit$/;"	c	namespace:bliss
OrbitEntry	search/bliss/orbit.h	/^  class OrbitEntry$/;"	c	class:bliss::Orbit
OrderedSet	search/algorithms/ordered_set.h	/^class OrderedSet {$/;"	c	namespace:ordered_set
PDBHeuristic	search/pdbs/pdb_heuristic.cc	/^PDBHeuristic::PDBHeuristic(const Options &opts)$/;"	f	class:pdbs::PDBHeuristic
PDBHeuristic	search/pdbs/pdb_heuristic.h	/^class PDBHeuristic : public Heuristic {$/;"	c	namespace:pdbs
PDBS_CANONICAL_PDBS_H	search/pdbs/canonical_pdbs.h	2;"	d
PDBS_CANONICAL_PDBS_HEURISTIC_H	search/pdbs/canonical_pdbs_heuristic.h	2;"	d
PDBS_DOMINANCE_PRUNING_H	search/pdbs/dominance_pruning.h	2;"	d
PDBS_INCREMENTAL_CANONICAL_PDBS_H	search/pdbs/incremental_canonical_pdbs.h	2;"	d
PDBS_MATCH_TREE_H	search/pdbs/match_tree.h	2;"	d
PDBS_MAX_ADDITIVE_PDB_SETS_H	search/pdbs/max_additive_pdb_sets.h	2;"	d
PDBS_PATTERN_COLLECTION_GENERATOR_COMBO_H	search/pdbs/pattern_collection_generator_combo.h	2;"	d
PDBS_PATTERN_COLLECTION_GENERATOR_GENETIC_H	search/pdbs/pattern_collection_generator_genetic.h	2;"	d
PDBS_PATTERN_COLLECTION_GENERATOR_HILLCLIMBING_H	search/pdbs/pattern_collection_generator_hillclimbing.h	2;"	d
PDBS_PATTERN_COLLECTION_GENERATOR_MANUAL_H	search/pdbs/pattern_collection_generator_manual.h	2;"	d
PDBS_PATTERN_COLLECTION_GENERATOR_SYSTEMATIC_H	search/pdbs/pattern_collection_generator_systematic.h	2;"	d
PDBS_PATTERN_COLLECTION_INFORMATION_H	search/pdbs/pattern_collection_information.h	2;"	d
PDBS_PATTERN_DATABASE_H	search/pdbs/pattern_database.h	2;"	d
PDBS_PATTERN_GENERATOR_GREEDY_H	search/pdbs/pattern_generator_greedy.h	2;"	d
PDBS_PATTERN_GENERATOR_H	search/pdbs/pattern_generator.h	2;"	d
PDBS_PATTERN_GENERATOR_MANUAL_H	search/pdbs/pattern_generator_manual.h	2;"	d
PDBS_PDB_HEURISTIC_H	search/pdbs/pdb_heuristic.h	2;"	d
PDBS_TYPES_H	search/pdbs/types.h	2;"	d
PDBS_VALIDATION_H	search/pdbs/validation.h	2;"	d
PDBS_ZERO_ONE_PDBS_H	search/pdbs/zero_one_pdbs.h	2;"	d
PDBS_ZERO_ONE_PDBS_HEURISTIC_H	search/pdbs/zero_one_pdbs_heuristic.h	2;"	d
PER_STATE_INFORMATION_H	search/per_state_information.h	2;"	d
PLAN_FOUND	search/utils/system.h	/^    PLAN_FOUND = 0,$/;"	m	class:utils::ExitCode
PLUGIN_H	search/plugin.h	2;"	d
PLUSONE	search/operator_cost.h	/^enum OperatorCost {NORMAL = 0, ONE = 1, PLUSONE = 2, MAX_OPERATOR_COST};$/;"	e	enum:OperatorCost
PMOp	search/landmarks/landmark_factory_h_m.h	/^struct PMOp {$/;"	s	namespace:landmarks
POTENTIALS_DIVERSE_POTENTIAL_HEURISTICS_H	search/potentials/diverse_potential_heuristics.h	2;"	d
POTENTIALS_POTENTIAL_FUNCTION_H	search/potentials/potential_function.h	2;"	d
POTENTIALS_POTENTIAL_HEURISTIC_H	search/potentials/potential_heuristic.h	2;"	d
POTENTIALS_POTENTIAL_MAX_HEURISTIC_H	search/potentials/potential_max_heuristic.h	2;"	d
POTENTIALS_POTENTIAL_OPTIMIZER_H	search/potentials/potential_optimizer.h	2;"	d
POTENTIALS_UTIL_H	search/potentials/util.h	2;"	d
PRECOND_VERTEX	search/structural_symmetries/graph_creator.cc	/^enum color_t {PREDICATE_VERTEX, VALUE_VERTEX, PRECOND_VERTEX, EFFECT_VERTEX,$/;"	e	enum:color_t	file:
PREDICATE_VERTEX	search/structural_symmetries/graph_creator.cc	/^enum color_t {PREDICATE_VERTEX, VALUE_VERTEX, PRECOND_VERTEX, EFFECT_VERTEX,$/;"	e	enum:color_t	file:
PRE_FILE_VERSION	search/globals.cc	/^const int PRE_FILE_VERSION = 3;$/;"	v
PROBLEM	translate/tests/test_scripts.py	/^PROBLEM = os.path.join(BENCHMARKS, "gripper", "prob01.pddl")$/;"	v
PRUNED_STATE	search/merge_and_shrink/types.cc	/^const int PRUNED_STATE = -1;$/;"	m	namespace:merge_and_shrink	file:
PRUNE_BY_PREFERRED	search/search_engines/enforced_hill_climbing_search.h	/^    PRUNE_BY_PREFERRED,$/;"	m	class:enforced_hill_climbing_search::PreferredUsage
PRUNING_METHOD_H	search/pruning_method.h	2;"	d
PRUNING_NULL_PRUNING_METHOD_H	search/pruning/null_pruning_method.h	2;"	d
PRUNING_STUBBORN_SETS_EC_H	search/pruning/stubborn_sets_ec.h	2;"	d
PRUNING_STUBBORN_SETS_H	search/pruning/stubborn_sets.h	2;"	d
PRUNING_STUBBORN_SETS_SIMPLE_H	search/pruning/stubborn_sets_simple.h	2;"	d
ParetoOpenList	search/open_lists/pareto_open_list.cc	/^ParetoOpenList<Entry>::ParetoOpenList(const Options &opts)$/;"	f	class:ParetoOpenList
ParetoOpenList	search/open_lists/pareto_open_list.cc	/^class ParetoOpenList : public OpenList<Entry> {$/;"	c	file:
ParetoOpenListFactory	search/open_lists/pareto_open_list.cc	/^ParetoOpenListFactory::ParetoOpenListFactory($/;"	f	class:ParetoOpenListFactory
ParetoOpenListFactory	search/open_lists/pareto_open_list.h	/^class ParetoOpenListFactory : public OpenListFactory {$/;"	c
ParseError	search/options/errors.cc	/^ParseError::ParseError(string m, ParseTree pt)$/;"	f	class:options::ParseError
ParseError	search/options/errors.cc	/^ParseError::ParseError(string m, ParseTree pt, string correct_substring)$/;"	f	class:options::ParseError
ParseError	search/options/errors.h	/^struct ParseError {$/;"	s	namespace:options
ParseError	translate/pddl_parser/lisp_parser.py	/^class ParseError(Exception):$/;"	c
ParseNode	search/options/parse_tree.h	/^    ParseNode()$/;"	f	struct:options::ParseNode
ParseNode	search/options/parse_tree.h	/^    ParseNode(std::string val, std::string k = "")$/;"	f	struct:options::ParseNode
ParseNode	search/options/parse_tree.h	/^struct ParseNode {$/;"	s	namespace:options
ParseTree	search/options/parse_tree.h	/^typedef tree<ParseNode> ParseTree;$/;"	t	namespace:options
Partition	search/bliss/partition.cc	/^Partition::Partition()$/;"	f	class:bliss::Partition
Partition	search/bliss/partition.h	/^class Partition$/;"	c	namespace:bliss
PathInfo	search/bliss/graph.cc	/^} PathInfo;$/;"	t	namespace:bliss	typeref:struct:bliss::__anon3	file:
PatternCollectionGenerator	search/pdbs/pattern_generator.h	/^class PatternCollectionGenerator {$/;"	c	namespace:pdbs
PatternCollectionGeneratorCombo	search/pdbs/pattern_collection_generator_combo.cc	/^PatternCollectionGeneratorCombo::PatternCollectionGeneratorCombo(const Options &opts)$/;"	f	class:pdbs::PatternCollectionGeneratorCombo
PatternCollectionGeneratorCombo	search/pdbs/pattern_collection_generator_combo.h	/^class PatternCollectionGeneratorCombo : public PatternCollectionGenerator {$/;"	c	namespace:pdbs
PatternCollectionGeneratorGenetic	search/pdbs/pattern_collection_generator_genetic.cc	/^PatternCollectionGeneratorGenetic::PatternCollectionGeneratorGenetic($/;"	f	class:pdbs::PatternCollectionGeneratorGenetic
PatternCollectionGeneratorGenetic	search/pdbs/pattern_collection_generator_genetic.h	/^class PatternCollectionGeneratorGenetic : public PatternCollectionGenerator {$/;"	c	namespace:pdbs
PatternCollectionGeneratorHillclimbing	search/pdbs/pattern_collection_generator_hillclimbing.cc	/^PatternCollectionGeneratorHillclimbing::PatternCollectionGeneratorHillclimbing(const Options &opts)$/;"	f	class:pdbs::PatternCollectionGeneratorHillclimbing
PatternCollectionGeneratorHillclimbing	search/pdbs/pattern_collection_generator_hillclimbing.h	/^class PatternCollectionGeneratorHillclimbing : public PatternCollectionGenerator {$/;"	c	namespace:pdbs
PatternCollectionGeneratorManual	search/pdbs/pattern_collection_generator_manual.cc	/^PatternCollectionGeneratorManual::PatternCollectionGeneratorManual(const Options &opts)$/;"	f	class:pdbs::PatternCollectionGeneratorManual
PatternCollectionGeneratorManual	search/pdbs/pattern_collection_generator_manual.h	/^class PatternCollectionGeneratorManual : public PatternCollectionGenerator {$/;"	c	namespace:pdbs
PatternCollectionGeneratorSystematic	search/pdbs/pattern_collection_generator_systematic.cc	/^PatternCollectionGeneratorSystematic::PatternCollectionGeneratorSystematic($/;"	f	class:pdbs::PatternCollectionGeneratorSystematic
PatternCollectionGeneratorSystematic	search/pdbs/pattern_collection_generator_systematic.h	/^class PatternCollectionGeneratorSystematic : public PatternCollectionGenerator {$/;"	c	namespace:pdbs
PatternCollectionInformation	search/pdbs/pattern_collection_information.cc	/^PatternCollectionInformation::PatternCollectionInformation($/;"	f	class:pdbs::PatternCollectionInformation
PatternCollectionInformation	search/pdbs/pattern_collection_information.h	/^class PatternCollectionInformation {$/;"	c	namespace:pdbs
PatternDatabase	search/pdbs/pattern_database.cc	/^PatternDatabase::PatternDatabase($/;"	f	class:pdbs::PatternDatabase
PatternDatabase	search/pdbs/pattern_database.h	/^class PatternDatabase {$/;"	c	namespace:pdbs
PatternGenerator	search/pdbs/pattern_generator.h	/^class PatternGenerator {$/;"	c	namespace:pdbs
PatternGeneratorGreedy	search/pdbs/pattern_generator_greedy.cc	/^PatternGeneratorGreedy::PatternGeneratorGreedy(const Options &opts)$/;"	f	class:pdbs::PatternGeneratorGreedy
PatternGeneratorGreedy	search/pdbs/pattern_generator_greedy.cc	/^PatternGeneratorGreedy::PatternGeneratorGreedy(int max_states)$/;"	f	class:pdbs::PatternGeneratorGreedy
PatternGeneratorGreedy	search/pdbs/pattern_generator_greedy.h	/^class PatternGeneratorGreedy : public PatternGenerator {$/;"	c	namespace:pdbs
PatternGeneratorManual	search/pdbs/pattern_generator_manual.cc	/^PatternGeneratorManual::PatternGeneratorManual(const Options &opts)$/;"	f	class:pdbs::PatternGeneratorManual
PatternGeneratorManual	search/pdbs/pattern_generator_manual.h	/^class PatternGeneratorManual : public PatternGenerator {$/;"	c	namespace:pdbs
PerStateInformation	search/per_state_information.h	/^    PerStateInformation()$/;"	f	class:PerStateInformation
PerStateInformation	search/per_state_information.h	/^    explicit PerStateInformation(const Entry &default_value_)$/;"	f	class:PerStateInformation
PerStateInformation	search/per_state_information.h	/^class PerStateInformation : public PerStateInformationBase {$/;"	c
PerStateInformationBase	search/per_state_information.h	/^    PerStateInformationBase() {$/;"	f	class:PerStateInformationBase
PerStateInformationBase	search/per_state_information.h	/^class PerStateInformationBase {$/;"	c
Permutation	search/structural_symmetries/permutation.cc	/^Permutation::Permutation(){$/;"	f	class:Permutation
Permutation	search/structural_symmetries/permutation.cc	/^Permutation::Permutation(const Permutation &perm, bool invert){$/;"	f	class:Permutation
Permutation	search/structural_symmetries/permutation.cc	/^Permutation::Permutation(const Permutation &perm1, const Permutation &perm2){$/;"	f	class:Permutation
Permutation	search/structural_symmetries/permutation.cc	/^Permutation::Permutation(const unsigned int* full_permutation){$/;"	f	class:Permutation
Permutation	search/structural_symmetries/permutation.h	/^class Permutation{$/;"	c
PhOConstraints	search/operator_counting/pho_constraints.cc	/^PhOConstraints::PhOConstraints(const Options &opts)$/;"	f	class:operator_counting::PhOConstraints
PhOConstraints	search/operator_counting/pho_constraints.h	/^class PhOConstraints : public ConstraintGenerator {$/;"	c	namespace:operator_counting
PickSplit	search/cegar/split_selector.h	/^enum class PickSplit {$/;"	c	namespace:cegar
Placeholder	search/options/any.h	/^    class Placeholder {$/;"	c	class:options::Any
PlainPrinter	search/options/doc_printer.cc	/^PlainPrinter::PlainPrinter(ostream &out, bool pa)$/;"	f	class:options::PlainPrinter
PlainPrinter	search/options/doc_printer.h	/^class PlainPrinter : public DocPrinter {$/;"	c	namespace:options
Plan	search/search_engine.h	/^    typedef std::vector<const GlobalOperator *> Plan;$/;"	t	class:SearchEngine
PlanForbidReformulatedTask	search/tasks/plan_forbid_reformulated_task.cc	/^PlanForbidReformulatedTask::PlanForbidReformulatedTask($/;"	f	class:extra_tasks::PlanForbidReformulatedTask
PlanForbidReformulatedTask	search/tasks/plan_forbid_reformulated_task.h	/^class PlanForbidReformulatedTask : public tasks::DelegatingTask {$/;"	c	namespace:extra_tasks
Plugin	search/options/plugin.h	/^    Plugin(const std::string &key, typename Registry<T *>::Factory factory) {$/;"	f	class:options::Plugin
Plugin	search/options/plugin.h	/^class Plugin {$/;"	c	namespace:options
PluginShared	search/options/plugin.h	/^    PluginShared(const std::string &key, typename Registry<std::shared_ptr<T>>::Factory factory) {$/;"	f	class:options::PluginShared
PluginShared	search/options/plugin.h	/^class PluginShared {$/;"	c	namespace:options
PluginTypeInfo	search/options/registries.h	/^    PluginTypeInfo(const std::type_index &type,$/;"	f	class:options::PluginTypeInfo
PluginTypeInfo	search/options/registries.h	/^class PluginTypeInfo {$/;"	c	namespace:options
PluginTypePlugin	search/options/plugin.h	/^    PluginTypePlugin(const std::string &type_name,$/;"	f	class:options::PluginTypePlugin
PluginTypePlugin	search/options/plugin.h	/^class PluginTypePlugin {$/;"	c	namespace:options
PluginTypeRegistry	search/options/registries.h	/^class PluginTypeRegistry {$/;"	c	namespace:options
PotentialFunction	search/potentials/potential_function.cc	/^PotentialFunction::PotentialFunction($/;"	f	class:potentials::PotentialFunction
PotentialFunction	search/potentials/potential_function.h	/^class PotentialFunction {$/;"	c	namespace:potentials
PotentialHeuristic	search/potentials/potential_heuristic.cc	/^PotentialHeuristic::PotentialHeuristic($/;"	f	class:potentials::PotentialHeuristic
PotentialHeuristic	search/potentials/potential_heuristic.h	/^class PotentialHeuristic : public Heuristic {$/;"	c	namespace:potentials
PotentialMaxHeuristic	search/potentials/potential_max_heuristic.cc	/^PotentialMaxHeuristic::PotentialMaxHeuristic($/;"	f	class:potentials::PotentialMaxHeuristic
PotentialMaxHeuristic	search/potentials/potential_max_heuristic.h	/^class PotentialMaxHeuristic : public Heuristic {$/;"	c	namespace:potentials
PotentialOptimizer	search/potentials/potential_optimizer.cc	/^PotentialOptimizer::PotentialOptimizer(const Options &opts)$/;"	f	class:potentials::PotentialOptimizer
PotentialOptimizer	search/potentials/potential_optimizer.h	/^class PotentialOptimizer {$/;"	c	namespace:potentials
PreconditionProxy	translate/normalize.py	/^class PreconditionProxy(ConditionProxy):$/;"	c
PreconditionsProxy	search/task_proxy.h	/^    PreconditionsProxy(const AbstractTask &task, int op_index, bool is_axiom)$/;"	f	class:PreconditionsProxy
PreconditionsProxy	search/task_proxy.h	/^class PreconditionsProxy : public ConditionsProxy {$/;"	c
Predefinitions	search/options/predefinitions.h	/^class Predefinitions {$/;"	c	namespace:options
Predicate	translate/pddl/predicates.py	/^class Predicate(object):$/;"	c
PrefEvaluator	search/evaluators/pref_evaluator.cc	/^PrefEvaluator::PrefEvaluator() {$/;"	f	class:pref_evaluator::PrefEvaluator
PrefEvaluator	search/evaluators/pref_evaluator.h	/^class PrefEvaluator : public ScalarEvaluator {$/;"	c	namespace:pref_evaluator
PreferredUsage	search/search_engines/enforced_hill_climbing_search.h	/^enum class PreferredUsage {$/;"	c	namespace:enforced_hill_climbing_search
PrimitiveNumericExpression	translate/pddl/f_expression.py	/^class PrimitiveNumericExpression(FunctionalExpression):$/;"	c
ProductRule	translate/build_model.py	/^class ProductRule(BuildRule):$/;"	c
ProductTSOrder	search/merge_and_shrink/merge_scoring_function_total_order.h	/^    enum class ProductTSOrder {$/;"	c	class:merge_and_shrink::MergeScoringFunctionTotalOrder
ProjectRule	translate/build_model.py	/^class ProjectRule(BuildRule):$/;"	c
PrologProgram	translate/pddl_to_prolog.py	/^class PrologProgram:$/;"	c
PropertyInfo	search/options/doc_store.h	/^    PropertyInfo(std::string prop, std::string descr)$/;"	f	struct:options::PropertyInfo
PropertyInfo	search/options/doc_store.h	/^struct PropertyInfo {$/;"	s	namespace:options
Proposition	search/heuristics/relaxation_heuristic.h	/^    Proposition(int id_) {$/;"	f	struct:relaxation_heuristic::Proposition
Proposition	search/heuristics/relaxation_heuristic.h	/^struct Proposition {$/;"	s	namespace:relaxation_heuristic
Proposition	search/operator_counting/state_equation_constraints.h	/^    Proposition() : constraint_index(-1) {$/;"	f	struct:operator_counting::Proposition
Proposition	search/operator_counting/state_equation_constraints.h	/^struct Proposition {$/;"	s	namespace:operator_counting
PropositionStatus	search/heuristics/lm_cut_landmarks.h	/^enum PropositionStatus {$/;"	g	namespace:lm_cut_heuristic
PropositionalAction	translate/pddl/actions.py	/^class PropositionalAction:$/;"	c
PropositionalAxiom	translate/pddl/axioms.py	/^class PropositionalAxiom:$/;"	c
ProxyIterator	search/task_proxy.h	/^    ProxyIterator(const ProxyCollection &collection, std::size_t pos)$/;"	f	class:ProxyIterator
ProxyIterator	search/task_proxy.h	/^class ProxyIterator {$/;"	c
PruningMethod	search/pruning_method.cc	/^PruningMethod::PruningMethod()$/;"	f	class:PruningMethod
PruningMethod	search/pruning_method.h	/^class PruningMethod {$/;"	c
QuantifiedCondition	translate/pddl/conditions.py	/^class QuantifiedCondition(Condition):$/;"	c
Queue	translate/build_model.py	/^class Queue:$/;"	c
RANDOM	search/cegar/split_selector.h	/^    RANDOM,$/;"	m	class:cegar::PickSplit
RANDOM	search/cegar/subtask_generators.h	/^    RANDOM,$/;"	m	class:cegar::FactOrder
RANDOM	search/merge_and_shrink/label_reduction.h	/^        RANDOM$/;"	e	enum:merge_and_shrink::LabelReduction::LabelReductionSystemOrder
RANDOM	search/variable_order_finder.h	/^    RANDOM,$/;"	e	enum:VariableOrderType
REACHED	search/heuristics/lm_cut_landmarks.h	/^    REACHED = 1,$/;"	e	enum:lm_cut_heuristic::PropositionStatus
REGULAR	search/merge_and_shrink/label_reduction.h	/^        REGULAR,$/;"	e	enum:merge_and_shrink::LabelReduction::LabelReductionSystemOrder
REPO	translate/tests/test_scripts.py	/^REPO = os.path.abspath(os.path.join(DIR, "..", "..", ".."))$/;"	v
RETURN	search/merge_and_shrink/shrink_bisimulation.h	/^        RETURN,$/;"	e	enum:merge_and_shrink::ShrinkBisimulation::AtLimit
REVERSE	search/merge_and_shrink/label_reduction.h	/^        REVERSE,$/;"	e	enum:merge_and_shrink::LabelReduction::LabelReductionSystemOrder
REVERSE_LEVEL	search/merge_and_shrink/merge_scoring_function_total_order.h	/^        REVERSE_LEVEL,$/;"	m	class:merge_and_shrink::MergeScoringFunctionTotalOrder::AtomicTSOrder
REVERSE_LEVEL	search/variable_order_finder.h	/^    REVERSE_LEVEL$/;"	e	enum:VariableOrderType
RandomNumberGenerator	search/utils/rng.cc	/^RandomNumberGenerator::RandomNumberGenerator() {$/;"	f	class:utils::RandomNumberGenerator
RandomNumberGenerator	search/utils/rng.cc	/^RandomNumberGenerator::RandomNumberGenerator(int seed_) {$/;"	f	class:utils::RandomNumberGenerator
RandomNumberGenerator	search/utils/rng.h	/^class RandomNumberGenerator {$/;"	c	namespace:utils
RefInfo	search/bliss/partition.h	/^  class RefInfo {$/;"	c	class:bliss::Partition
RefinementHierarchy	search/cegar/refinement_hierarchy.cc	/^RefinementHierarchy::RefinementHierarchy()$/;"	f	class:cegar::RefinementHierarchy
RefinementHierarchy	search/cegar/refinement_hierarchy.h	/^    RefinementHierarchy(RefinementHierarchy &&other)$/;"	f	class:cegar::RefinementHierarchy
RefinementHierarchy	search/cegar/refinement_hierarchy.h	/^class RefinementHierarchy {$/;"	c	namespace:cegar
Registry	search/options/registries.h	/^class Registry {$/;"	c	namespace:options
RelaxationHeuristic	search/heuristics/relaxation_heuristic.cc	/^RelaxationHeuristic::RelaxationHeuristic(const options::Options &opts)$/;"	f	class:relaxation_heuristic::RelaxationHeuristic
RelaxationHeuristic	search/heuristics/relaxation_heuristic.h	/^class RelaxationHeuristic : public Heuristic {$/;"	c	namespace:relaxation_heuristic
RelaxedOperator	search/heuristics/lm_cut_landmarks.h	/^    RelaxedOperator(std::vector<RelaxedProposition *> &&pre,$/;"	f	struct:lm_cut_heuristic::RelaxedOperator
RelaxedOperator	search/heuristics/lm_cut_landmarks.h	/^struct RelaxedOperator {$/;"	s	namespace:lm_cut_heuristic
RelaxedPlan	search/heuristics/ff_heuristic.h	/^    typedef std::vector<bool> RelaxedPlan;$/;"	t	class:ff_heuristic::FFHeuristic
RelaxedProposition	search/heuristics/lm_cut_landmarks.h	/^struct RelaxedProposition {$/;"	s	namespace:lm_cut_heuristic
Requirements	translate/pddl/tasks.py	/^class Requirements(object):$/;"	c
ResultList	translate/greedy_join.py	/^class ResultList(object):$/;"	c
RootTask	search/tasks/root_task.h	/^class RootTask : public AbstractTask {$/;"	c	namespace:tasks
Rule	translate/pddl_to_prolog.py	/^class Rule:$/;"	c
SAMPLING_H	search/sampling.h	2;"	d
SASAxiom	translate/sas_tasks.py	/^class SASAxiom:$/;"	c
SASGoal	translate/sas_tasks.py	/^class SASGoal:$/;"	c
SASInit	translate/sas_tasks.py	/^class SASInit:$/;"	c
SASMutexGroup	translate/sas_tasks.py	/^class SASMutexGroup:$/;"	c
SASOperator	translate/sas_tasks.py	/^class SASOperator:$/;"	c
SASTask	translate/sas_tasks.py	/^class SASTask:$/;"	c
SASVariables	translate/sas_tasks.py	/^class SASVariables:$/;"	c
SAS_FILE_VERSION	translate/sas_tasks.py	/^SAS_FILE_VERSION = 3$/;"	v
SCALAR_EVALUATOR_H	search/scalar_evaluator.h	2;"	d
SCC	translate/variable_order.py	/^class SCC(object):$/;"	c
SCRIPTS	translate/tests/test_scripts.py	/^SCRIPTS = [$/;"	v
SEARCH_ENGINES_EAGER_SEARCH_H	search/search_engines/eager_search.h	2;"	d
SEARCH_ENGINES_ENFORCED_HILL_CLIMBING_SEARCH_H	search/search_engines/enforced_hill_climbing_search.h	2;"	d
SEARCH_ENGINES_ITERATED_SEARCH_H	search/search_engines/iterated_search.h	2;"	d
SEARCH_ENGINES_LAZY_SEARCH_H	search/search_engines/lazy_search.h	2;"	d
SEARCH_ENGINES_SEARCH_COMMON_H	search/search_engines/search_common.h	2;"	d
SEARCH_ENGINES_TOP_K_EAGER_SEARCH_H	search/search_engines/top_k_eager_search.h	2;"	d
SEARCH_ENGINE_H	search/search_engine.h	2;"	d
SEARCH_NODE_INFO_H	search/search_node_info.h	2;"	d
SEARCH_PROGRESS_H	search/search_progress.h	2;"	d
SEARCH_SPACE_H	search/search_space.h	2;"	d
SEARCH_STATISTICS_H	search/search_statistics.h	2;"	d
SEEN_WARNING_TYPE_PREDICATE_NAME_CLASH	translate/pddl_parser/parsing_functions.py	/^SEEN_WARNING_TYPE_PREDICATE_NAME_CLASH = False$/;"	v
SEGMENT_BYTES	search/algorithms/segmented_vector.h	/^    static const size_t SEGMENT_BYTES = 8192;$/;"	m	class:segmented_vector::SegmentedArrayVector
SEGMENT_BYTES	search/algorithms/segmented_vector.h	/^    static const size_t SEGMENT_BYTES = 8192;$/;"	m	class:segmented_vector::SegmentedVector
SEGMENT_ELEMENTS	search/algorithms/segmented_vector.h	/^    static const size_t SEGMENT_ELEMENTS =$/;"	m	class:segmented_vector::SegmentedVector
SILENT	search/merge_and_shrink/types.h	/^    SILENT,$/;"	m	class:merge_and_shrink::Verbosity
SOLVED	search/search_engine.h	/^enum SearchStatus {IN_PROGRESS, TIMEOUT, FAILED, SOLVED, INTERRUPTED};$/;"	e	enum:SearchStatus
SPLIT_END	search/bliss/graph.cc	/^  static const int SPLIT_END   = -2;$/;"	m	class:bliss::TreeNode	file:
SPLIT_START	search/bliss/graph.cc	/^  static const int SPLIT_START = -1;$/;"	m	class:bliss::TreeNode	file:
STATE_ID_H	search/state_id.h	2;"	d
STATE_REGISTRY_H	search/state_registry.h	2;"	d
STRUCTURAL_SYMMETRIES_GRAPH_CREATOR_H	search/structural_symmetries/graph_creator.h	2;"	d
STRUCTURAL_SYMMETRIES_GROUP_H	search/structural_symmetries/group.h	2;"	d
STRUCTURAL_SYMMETRIES_OPERATOR_PERMUTATION_H	search/structural_symmetries/operator_permutation.h	2;"	d
STRUCTURAL_SYMMETRIES_PERMUTATION_H	search/structural_symmetries/permutation.h	2;"	d
SUBSET_OF_STATES	search/structural_symmetries/group.h	/^    SUBSET_OF_STATES,$/;"	m	class:SymmetricalLookups
SUCCESSOR_GENERATOR_H	search/successor_generator.h	2;"	d
SamplingTimeout	search/sampling.h	/^struct SamplingTimeout : public std::exception {};$/;"	s
ScalarEvaluator	search/scalar_evaluator.h	/^class ScalarEvaluator {$/;"	c
SearchControl	search/search_engines/top_k_eager_search.h	/^struct SearchControl {$/;"	s	namespace:top_k_eager_search
SearchEngine	search/search_engine.cc	/^SearchEngine::SearchEngine(const Options &opts)$/;"	f	class:SearchEngine
SearchEngine	search/search_engine.h	/^class SearchEngine {$/;"	c
SearchNode	search/search_space.cc	/^SearchNode::SearchNode(const StateRegistry &state_registry,$/;"	f	class:SearchNode
SearchNode	search/search_space.h	/^class SearchNode {$/;"	c
SearchNodeInfo	search/search_node_info.h	/^    SearchNodeInfo()$/;"	f	struct:SearchNodeInfo
SearchNodeInfo	search/search_node_info.h	/^struct SearchNodeInfo {$/;"	s
SearchProgress	search/search_progress.h	/^class SearchProgress {$/;"	c
SearchSpace	search/search_space.cc	/^SearchSpace::SearchSpace(StateRegistry &state_registry, OperatorCost cost_type)$/;"	f	class:SearchSpace
SearchSpace	search/search_space.h	/^class SearchSpace {$/;"	c
SearchStatistics	search/search_statistics.cc	/^SearchStatistics::SearchStatistics() {$/;"	f	class:SearchStatistics
SearchStatistics	search/search_statistics.h	/^class SearchStatistics {$/;"	c
SearchStatus	search/search_engine.h	/^enum SearchStatus {IN_PROGRESS, TIMEOUT, FAILED, SOLVED, INTERRUPTED};$/;"	g
SearchSymmetries	search/structural_symmetries/group.h	/^enum class SearchSymmetries {$/;"	c
SegmentedArrayVector	search/algorithms/segmented_vector.h	/^    SegmentedArrayVector(size_t elements_per_array_)$/;"	f	class:segmented_vector::SegmentedArrayVector
SegmentedArrayVector	search/algorithms/segmented_vector.h	/^    SegmentedArrayVector(size_t elements_per_array_, const ElementAllocator &allocator_)$/;"	f	class:segmented_vector::SegmentedArrayVector
SegmentedArrayVector	search/algorithms/segmented_vector.h	/^class SegmentedArrayVector {$/;"	c	namespace:segmented_vector
SegmentedVector	search/algorithms/segmented_vector.h	/^    SegmentedVector()$/;"	f	class:segmented_vector::SegmentedVector
SegmentedVector	search/algorithms/segmented_vector.h	/^    SegmentedVector(const EntryAllocator &allocator_)$/;"	f	class:segmented_vector::SegmentedVector
SegmentedVector	search/algorithms/segmented_vector.h	/^class SegmentedVector {$/;"	c	namespace:segmented_vector
ShrinkBisimulation	search/merge_and_shrink/shrink_bisimulation.cc	/^ShrinkBisimulation::ShrinkBisimulation(const Options &opts)$/;"	f	class:merge_and_shrink::ShrinkBisimulation
ShrinkBisimulation	search/merge_and_shrink/shrink_bisimulation.h	/^class ShrinkBisimulation : public ShrinkStrategy {$/;"	c	namespace:merge_and_shrink
ShrinkBucketBased	search/merge_and_shrink/shrink_bucket_based.cc	/^ShrinkBucketBased::ShrinkBucketBased(const options::Options &opts)$/;"	f	class:merge_and_shrink::ShrinkBucketBased
ShrinkBucketBased	search/merge_and_shrink/shrink_bucket_based.h	/^class ShrinkBucketBased : public ShrinkStrategy {$/;"	c	namespace:merge_and_shrink
ShrinkFH	search/merge_and_shrink/shrink_fh.cc	/^ShrinkFH::ShrinkFH(const Options &opts)$/;"	f	class:merge_and_shrink::ShrinkFH
ShrinkFH	search/merge_and_shrink/shrink_fh.h	/^class ShrinkFH : public ShrinkBucketBased {$/;"	c	namespace:merge_and_shrink
ShrinkRandom	search/merge_and_shrink/shrink_random.cc	/^ShrinkRandom::ShrinkRandom(const Options &opts)$/;"	f	class:merge_and_shrink::ShrinkRandom
ShrinkRandom	search/merge_and_shrink/shrink_random.h	/^class ShrinkRandom : public ShrinkBucketBased {$/;"	c	namespace:merge_and_shrink
ShrinkStrategy	search/merge_and_shrink/shrink_strategy.h	/^class ShrinkStrategy {$/;"	c	namespace:merge_and_shrink
Signature	search/merge_and_shrink/shrink_bisimulation.cc	/^    Signature(int h, bool is_goal, int group_,$/;"	f	struct:merge_and_shrink::Signature
Signature	search/merge_and_shrink/shrink_bisimulation.cc	/^struct Signature {$/;"	s	namespace:merge_and_shrink	file:
SimpleEffect	translate/pddl/effects.py	/^class SimpleEffect(object):$/;"	c
SortFactsByIncreasingHaddValues	search/cegar/subtask_generators.cc	/^    explicit SortFactsByIncreasingHaddValues($/;"	f	class:cegar::SortFactsByIncreasingHaddValues
SortFactsByIncreasingHaddValues	search/cegar/subtask_generators.cc	/^class SortFactsByIncreasingHaddValues {$/;"	c	namespace:cegar	file:
Split	search/cegar/split_selector.h	/^    Split(int var_id, std::vector<int> &&values)$/;"	f	struct:cegar::Split
Split	search/cegar/split_selector.h	/^struct Split {$/;"	s	namespace:cegar
SplitSelector	search/cegar/split_selector.cc	/^SplitSelector::SplitSelector($/;"	f	class:cegar::SplitSelector
SplitSelector	search/cegar/split_selector.h	/^class SplitSelector {$/;"	c	namespace:cegar
SplittingHeuristic	search/bliss/graph.h	/^  } SplittingHeuristic;$/;"	t	class:bliss::Digraph	typeref:enum:bliss::Digraph::__anon2
SplittingHeuristic	search/bliss/graph.h	/^  } SplittingHeuristic;$/;"	t	class:bliss::Graph	typeref:enum:bliss::Graph::__anon1
StandardScalarOpenList	search/open_lists/standard_scalar_open_list.cc	/^StandardScalarOpenList<Entry>::StandardScalarOpenList($/;"	f	class:StandardScalarOpenList
StandardScalarOpenList	search/open_lists/standard_scalar_open_list.cc	/^StandardScalarOpenList<Entry>::StandardScalarOpenList(const Options &opts)$/;"	f	class:StandardScalarOpenList
StandardScalarOpenList	search/open_lists/standard_scalar_open_list.cc	/^class StandardScalarOpenList : public OpenList<Entry> {$/;"	c	file:
StandardScalarOpenListFactory	search/open_lists/standard_scalar_open_list.cc	/^StandardScalarOpenListFactory::StandardScalarOpenListFactory($/;"	f	class:StandardScalarOpenListFactory
StandardScalarOpenListFactory	search/open_lists/standard_scalar_open_list.h	/^class StandardScalarOpenListFactory : public OpenListFactory {$/;"	c
State	search/task_proxy.h	/^    State(State &&other)$/;"	f	class:State
State	search/task_proxy.h	/^    State(const AbstractTask &task, std::vector<int> &&values)$/;"	f	class:State
State	search/task_proxy.h	/^class State {$/;"	c
StateActionHeap	search/search_engines/top_k_eager_search.h	/^typedef std::priority_queue<StateActionPair> StateActionHeap;$/;"	t	namespace:top_k_eager_search
StateActionPair	search/search_engines/top_k_eager_search.h	/^struct StateActionPair {$/;"	s	namespace:top_k_eager_search
StateEquationConstraints	search/operator_counting/state_equation_constraints.h	/^class StateEquationConstraints : public ConstraintGenerator {$/;"	c	namespace:operator_counting
StateID	search/state_id.h	/^    explicit StateID(int value_)$/;"	f	class:StateID
StateID	search/state_id.h	/^class StateID {$/;"	c
StateIDSemanticEqual	search/state_registry.h	/^        StateIDSemanticEqual($/;"	f	struct:StateRegistry::StateIDSemanticEqual
StateIDSemanticEqual	search/state_registry.h	/^    struct StateIDSemanticEqual {$/;"	s	class:StateRegistry
StateIDSemanticHash	search/state_registry.h	/^        StateIDSemanticHash($/;"	f	struct:StateRegistry::StateIDSemanticHash
StateIDSemanticHash	search/state_registry.h	/^    struct StateIDSemanticHash {$/;"	s	class:StateRegistry
StateIDSet	search/state_registry.h	/^                               StateIDSemanticEqual> StateIDSet;$/;"	t	class:StateRegistry
StateRegistry	search/state_registry.cc	/^StateRegistry::StateRegistry($/;"	f	class:StateRegistry
StateRegistry	search/state_registry.h	/^class StateRegistry {$/;"	c
Stats	search/bliss/graph.h	/^  Stats() { reset(); }$/;"	f	class:bliss::Stats
Stats	search/bliss/graph.h	/^class Stats$/;"	c	namespace:bliss
StubbornSets	search/pruning/stubborn_sets.h	/^class StubbornSets : public PruningMethod {$/;"	c	namespace:stubborn_sets
StubbornSetsEC	search/pruning/stubborn_sets_ec.h	/^class StubbornSetsEC : public stubborn_sets::StubbornSets {$/;"	c	namespace:stubborn_sets_ec
StubbornSetsSimple	search/pruning/stubborn_sets_simple.h	/^class StubbornSetsSimple : public stubborn_sets::StubbornSets {$/;"	c	namespace:stubborn_sets_simple
SubtaskGenerator	search/cegar/subtask_generators.h	/^class SubtaskGenerator {$/;"	c	namespace:cegar
SuccessorGenerator	search/successor_generator.cc	/^SuccessorGenerator::SuccessorGenerator(const TaskProxy &task_proxy)$/;"	f	class:SuccessorGenerator
SuccessorGenerator	search/successor_generator.h	/^class SuccessorGenerator {$/;"	c
SumEvaluator	search/evaluators/sum_evaluator.cc	/^SumEvaluator::SumEvaluator(const Options &opts)$/;"	f	class:sum_evaluator::SumEvaluator
SumEvaluator	search/evaluators/sum_evaluator.cc	/^SumEvaluator::SumEvaluator(const vector<ScalarEvaluator *> &evals)$/;"	f	class:sum_evaluator::SumEvaluator
SumEvaluator	search/evaluators/sum_evaluator.h	/^class SumEvaluator : public combining_evaluator::CombiningEvaluator {$/;"	c	namespace:sum_evaluator
SymmetricalLookups	search/structural_symmetries/group.h	/^enum class SymmetricalLookups {$/;"	c
Synergy	search/options/synergy.h	/^class Synergy {$/;"	c	namespace:options
TASKS_COST_ADAPTED_TASK_H	search/tasks/cost_adapted_task.h	2;"	d
TASKS_DELEGATING_TASK_H	search/tasks/delegating_task.h	2;"	d
TASKS_DOMAIN_ABSTRACTED_TASK_FACTORY_H	search/tasks/domain_abstracted_task_factory.h	2;"	d
TASKS_DOMAIN_ABSTRACTED_TASK_H	search/tasks/domain_abstracted_task.h	2;"	d
TASKS_MODIFIED_GOALS_TASK_H	search/tasks/modified_goals_task.h	2;"	d
TASKS_MODIFIED_OPERATOR_COSTS_TASK_H	search/tasks/modified_operator_costs_task.h	2;"	d
TASKS_PLAN_FORBID_REFORMULATED_TASK_H	search/tasks/plan_forbid_reformulated_task.h	2;"	d
TASKS_ROOT_TASK_H	search/tasks/root_task.h	2;"	d
TASK_PROXY_H	search/task_proxy.h	2;"	d
TASK_TOOLS_H	search/task_tools.h	2;"	d
TIMEOUT	search/search_engine.h	/^enum SearchStatus {IN_PROGRESS, TIMEOUT, FAILED, SOLVED, INTERRUPTED};$/;"	e	enum:SearchStatus
TIME_FIELD_WIDTH	search/utils/logging.cc	/^    static const int TIME_FIELD_WIDTH = 7;$/;"	m	class:utils::MemoryTracer	file:
TRANSLATE_DIR	translate/tests/test_scripts.py	/^TRANSLATE_DIR = os.path.dirname(DIR)$/;"	v
TSConstIterator	search/merge_and_shrink/transition_system.cc	/^TSConstIterator::TSConstIterator($/;"	f	class:merge_and_shrink::TSConstIterator
TSConstIterator	search/merge_and_shrink/transition_system.h	/^class TSConstIterator {$/;"	c	namespace:merge_and_shrink
TWO_TRANSITION_SYSTEMS	search/merge_and_shrink/label_reduction.h	/^        TWO_TRANSITION_SYSTEMS,$/;"	e	enum:merge_and_shrink::LabelReduction::LabelReductionMethod
Task	translate/pddl/tasks.py	/^class Task(object):$/;"	c
TaskDuplicator	search/cegar/subtask_generators.cc	/^TaskDuplicator::TaskDuplicator(const Options &opts)$/;"	f	class:cegar::TaskDuplicator
TaskDuplicator	search/cegar/subtask_generators.h	/^class TaskDuplicator : public SubtaskGenerator {$/;"	c	namespace:cegar
TaskProxy	search/task_proxy.h	/^    explicit TaskProxy(const AbstractTask &task)$/;"	f	class:TaskProxy
TaskProxy	search/task_proxy.h	/^class TaskProxy {$/;"	c
TieBreakingOpenList	search/open_lists/tiebreaking_open_list.cc	/^TieBreakingOpenList<Entry>::TieBreakingOpenList(const Options &opts)$/;"	f	class:TieBreakingOpenList
TieBreakingOpenList	search/open_lists/tiebreaking_open_list.cc	/^class TieBreakingOpenList : public OpenList<Entry> {$/;"	c	file:
TieBreakingOpenListFactory	search/open_lists/tiebreaking_open_list.cc	/^TieBreakingOpenListFactory::TieBreakingOpenListFactory(const Options &options)$/;"	f	class:TieBreakingOpenListFactory
TieBreakingOpenListFactory	search/open_lists/tiebreaking_open_list.h	/^class TieBreakingOpenListFactory : public OpenListFactory {$/;"	c
Timer	search/bliss/timer.cc	/^Timer::Timer()$/;"	f	class:bliss::Timer
Timer	search/bliss/timer.h	/^class Timer$/;"	c	namespace:bliss
Timer	search/utils/timer.cc	/^Timer::Timer() {$/;"	f	class:utils::Timer
Timer	search/utils/timer.h	/^class Timer {$/;"	c	namespace:utils
Timer	translate/timers.py	/^class Timer(object):$/;"	c
TokenParser	search/options/token_parser.h	/^class TokenParser {$/;"	c	namespace:options
TokenParser	search/options/token_parser.h	/^class TokenParser<T *> {$/;"	c	namespace:options
TokenParser	search/options/token_parser.h	/^class TokenParser<std::shared_ptr<T>> {$/;"	c	namespace:options
TokenParser	search/options/token_parser.h	/^class TokenParser<std::vector<T>> {$/;"	c	namespace:options
TopKEagerSearch	search/search_engines/top_k_eager_search.cc	/^TopKEagerSearch::TopKEagerSearch(const Options &opts)$/;"	f	class:top_k_eager_search::TopKEagerSearch
TopKEagerSearch	search/search_engines/top_k_eager_search.h	/^class TopKEagerSearch : public SearchEngine {$/;"	c	namespace:top_k_eager_search
Trace	search/structural_symmetries/group.h	/^    typedef std::vector<short int> Trace;$/;"	t	class:Group
TraceBlock	search/utils/logging.cc	/^TraceBlock::TraceBlock(const string &block_name)$/;"	f	class:utils::TraceBlock
TraceBlock	search/utils/logging.h	/^class TraceBlock {$/;"	c	namespace:utils
Transition	search/cegar/transition.h	/^    Transition(int op_id, AbstractState *state)$/;"	f	struct:cegar::Transition
Transition	search/cegar/transition.h	/^struct Transition {$/;"	s	namespace:cegar
Transition	search/merge_and_shrink/transition_system.h	/^    Transition(int src, int target)$/;"	f	struct:merge_and_shrink::Transition
Transition	search/merge_and_shrink/transition_system.h	/^struct Transition {$/;"	s	namespace:merge_and_shrink
TransitionSystem	search/merge_and_shrink/transition_system.cc	/^TransitionSystem::TransitionSystem($/;"	f	class:merge_and_shrink::TransitionSystem
TransitionSystem	search/merge_and_shrink/transition_system.h	/^class TransitionSystem {$/;"	c	namespace:merge_and_shrink
TransitionSystemData	search/merge_and_shrink/fts_factory.cc	/^        TransitionSystemData(TransitionSystemData &&other)$/;"	f	struct:merge_and_shrink::FTSFactory::TransitionSystemData
TransitionSystemData	search/merge_and_shrink/fts_factory.cc	/^    struct TransitionSystemData {$/;"	s	class:merge_and_shrink::FTSFactory	file:
TransitionUpdater	search/cegar/transition_updater.cc	/^TransitionUpdater::TransitionUpdater(const OperatorsProxy &ops)$/;"	f	class:cegar::TransitionUpdater
TransitionUpdater	search/cegar/transition_updater.h	/^class TransitionUpdater {$/;"	c	namespace:cegar
TreeNode	search/bliss/graph.cc	/^class TreeNode$/;"	c	namespace:bliss	file:
TriviallySolvable	translate/simplify.py	/^class TriviallySolvable(Exception):$/;"	c
Truth	translate/pddl/conditions.py	/^class Truth(ConstantCondition):$/;"	c
Txt2TagsPrinter	search/options/doc_printer.cc	/^Txt2TagsPrinter::Txt2TagsPrinter(ostream &out)$/;"	f	class:options::Txt2TagsPrinter
Txt2TagsPrinter	search/options/doc_printer.h	/^class Txt2TagsPrinter : public DocPrinter {$/;"	c	namespace:options
Type	translate/pddl/pddl_types.py	/^class Type(object):$/;"	c
TypeBasedOpenList	search/open_lists/type_based_open_list.cc	/^TypeBasedOpenList<Entry>::TypeBasedOpenList(const Options &opts)$/;"	f	class:TypeBasedOpenList
TypeBasedOpenList	search/open_lists/type_based_open_list.cc	/^class TypeBasedOpenList : public OpenList<Entry> {$/;"	c	file:
TypeBasedOpenListFactory	search/open_lists/type_based_open_list.cc	/^TypeBasedOpenListFactory::TypeBasedOpenListFactory($/;"	f	class:TypeBasedOpenListFactory
TypeBasedOpenListFactory	search/open_lists/type_based_open_list.h	/^class TypeBasedOpenListFactory : public OpenListFactory {$/;"	c
TypeDocumenter	search/options/type_documenter.h	/^struct TypeDocumenter {$/;"	s	namespace:options
TypeDocumenter	search/options/type_documenter.h	/^struct TypeDocumenter<T *> {$/;"	s	namespace:options
TypeDocumenter	search/options/type_documenter.h	/^struct TypeDocumenter<std::shared_ptr<T>> {$/;"	s	namespace:options
TypeNamer	search/options/type_namer.h	/^struct TypeNamer {$/;"	s	namespace:options
TypeNamer	search/options/type_namer.h	/^struct TypeNamer<ParseTree> {$/;"	s	namespace:options
TypeNamer	search/options/type_namer.h	/^struct TypeNamer<T *> {$/;"	s	namespace:options
TypeNamer	search/options/type_namer.h	/^struct TypeNamer<bool> {$/;"	s	namespace:options
TypeNamer	search/options/type_namer.h	/^struct TypeNamer<double> {$/;"	s	namespace:options
TypeNamer	search/options/type_namer.h	/^struct TypeNamer<int> {$/;"	s	namespace:options
TypeNamer	search/options/type_namer.h	/^struct TypeNamer<std::shared_ptr<T>> {$/;"	s	namespace:options
TypeNamer	search/options/type_namer.h	/^struct TypeNamer<std::string> {$/;"	s	namespace:options
TypeNamer	search/options/type_namer.h	/^struct TypeNamer<std::vector<T>> {$/;"	s	namespace:options
TypedObject	translate/pddl/pddl_types.py	/^class TypedObject(object):$/;"	c
UNDEFINED_OPERATOR	search/cegar/abstract_state.cc	/^const int AbstractSearchInfo::UNDEFINED_OPERATOR = -1;$/;"	m	class:cegar::AbstractSearchInfo	file:
UNDEFINED_OPERATOR	search/cegar/abstract_state.h	/^    static const int UNDEFINED_OPERATOR;$/;"	m	class:cegar::AbstractSearchInfo
UNDEFINED_VALUE	search/cegar/utils.h	/^const int UNDEFINED_VALUE = -1;$/;"	m	namespace:cegar
UNINITIALIZED	search/evaluation_result.h	/^    static const int UNINITIALIZED = -2;$/;"	m	class:EvaluationResult
UNINITIALIZED	search/merge_and_shrink/merge_tree.cc	/^const int UNINITIALIZED = -1;$/;"	m	namespace:merge_and_shrink	file:
UNREACHED	search/heuristics/lm_cut_landmarks.h	/^    UNREACHED = 0,$/;"	e	enum:lm_cut_heuristic::PropositionStatus
UNSOLVABLE	search/utils/system.h	/^    UNSOLVABLE = 4,$/;"	m	class:utils::ExitCode
UNSOLVED_INCOMPLETE	search/utils/system.h	/^    UNSOLVED_INCOMPLETE = 5,$/;"	m	class:utils::ExitCode
UNSUPPORTED	search/utils/system.h	/^    UNSUPPORTED = 3,$/;"	m	class:utils::ExitCode
USE_CACHE	search/heuristics/cg_heuristic.cc	18;"	d	file:
USE_FIRST	search/merge_and_shrink/merge_tree.h	/^    USE_FIRST,$/;"	m	class:merge_and_shrink::UpdateOption
USE_SECOND	search/merge_and_shrink/merge_tree.h	/^    USE_SECOND,$/;"	m	class:merge_and_shrink::UpdateOption
USE_UP	search/merge_and_shrink/shrink_bisimulation.h	/^        USE_UP$/;"	e	enum:merge_and_shrink::ShrinkBisimulation::AtLimit
UTIL	search/utils/util.h	2;"	d
UTILS_COLLECTIONS_H	search/utils/collections.h	2;"	d
UTILS_COUNTDOWN_TIMER_H	search/utils/countdown_timer.h	2;"	d
UTILS_HASH_H	search/utils/hash.h	2;"	d
UTILS_LANGUAGE_H	search/utils/language.h	2;"	d
UTILS_LOGGING_H	search/utils/logging.h	2;"	d
UTILS_MARKUP_H	search/utils/markup.h	2;"	d
UTILS_MATH_H	search/utils/math.h	2;"	d
UTILS_MEMORY_H	search/utils/memory.h	2;"	d
UTILS_RNG_H	search/utils/rng.h	2;"	d
UTILS_RNG_OPTIONS_H	search/utils/rng_options.h	2;"	d
UTILS_SYSTEM_H	search/utils/system.h	2;"	d
UTILS_SYSTEM_UNIX_H	search/utils/system_unix.h	2;"	d
UTILS_SYSTEM_WINDOWS_H	search/utils/system_windows.h	2;"	d
UTILS_TIMER_H	search/utils/timer.h	2;"	d
UintSeqHash	search/bliss/uintseqhash.h	/^  UintSeqHash() {h = 0; }$/;"	f	class:bliss::UintSeqHash
UintSeqHash	search/bliss/uintseqhash.h	/^  UintSeqHash(const UintSeqHash &other) {h = other.h; }$/;"	f	class:bliss::UintSeqHash
UintSeqHash	search/bliss/uintseqhash.h	/^class UintSeqHash$/;"	c	namespace:bliss
UnaryOperator	search/heuristics/relaxation_heuristic.h	/^    UnaryOperator(const std::vector<Proposition *> &pre, Proposition *eff,$/;"	f	struct:relaxation_heuristic::UnaryOperator
UnaryOperator	search/heuristics/relaxation_heuristic.h	/^struct UnaryOperator {$/;"	s	namespace:relaxation_heuristic
Unifier	translate/build_model.py	/^class Unifier:$/;"	c
UniversalCondition	translate/pddl/conditions.py	/^class UniversalCondition(QuantifiedCondition):$/;"	c
UniversalEffect	translate/pddl/effects.py	/^class UniversalEffect(object):$/;"	c
UpdateOption	search/merge_and_shrink/merge_tree.h	/^enum class UpdateOption {$/;"	c	namespace:merge_and_shrink
VALUE_VERTEX	search/structural_symmetries/graph_creator.cc	/^enum color_t {PREDICATE_VERTEX, VALUE_VERTEX, PRECOND_VERTEX, EFFECT_VERTEX,$/;"	e	enum:color_t	file:
VARIABLE_ORDER_FINDER_H	search/variable_order_finder.h	2;"	d
ValueExplanations	search/options/doc_store.h	/^typedef std::vector<std::pair<std::string, std::string>> ValueExplanations;$/;"	t	namespace:options
ValueNode	search/domain_transition_graph.h	/^    ValueNode(DomainTransitionGraph *parent, int val)$/;"	f	struct:ValueNode
ValueNode	search/domain_transition_graph.h	/^struct ValueNode {$/;"	s
ValueTransition	search/domain_transition_graph.h	/^    ValueTransition(ValueNode *targ)$/;"	f	struct:ValueTransition
ValueTransition	search/domain_transition_graph.h	/^struct ValueTransition {$/;"	s
ValueTransitionLabel	search/domain_transition_graph.h	/^    ValueTransitionLabel(int op_id, bool axiom,$/;"	f	struct:ValueTransitionLabel
ValueTransitionLabel	search/domain_transition_graph.h	/^struct ValueTransitionLabel {$/;"	s
VarValueRenaming	translate/simplify.py	/^class VarValueRenaming(object):$/;"	c
VariableInfo	search/algorithms/int_packer.cc	/^    VariableInfo()$/;"	f	class:int_packer::IntPacker::VariableInfo
VariableInfo	search/algorithms/int_packer.cc	/^    VariableInfo(int range_, int bin_index_, int shift_)$/;"	f	class:int_packer::IntPacker::VariableInfo
VariableInfo	search/algorithms/int_packer.cc	/^class IntPacker::VariableInfo {$/;"	c	class:int_packer::IntPacker	file:
VariableOrder	translate/variable_order.py	/^class VariableOrder(object):$/;"	c
VariableOrderFinder	search/variable_order_finder.cc	/^VariableOrderFinder::VariableOrderFinder(const TaskProxy &task_proxy,$/;"	f	class:VariableOrderFinder
VariableOrderFinder	search/variable_order_finder.h	/^class VariableOrderFinder {$/;"	c
VariableOrderType	search/variable_order_finder.h	/^enum VariableOrderType {$/;"	g
VariableProxy	search/task_proxy.h	/^    VariableProxy(const AbstractTask &task, int id)$/;"	f	class:VariableProxy
VariableProxy	search/task_proxy.h	/^class VariableProxy {$/;"	c
VariablesProxy	search/task_proxy.h	/^    explicit VariablesProxy(const AbstractTask &task)$/;"	f	class:VariablesProxy
VariablesProxy	search/task_proxy.h	/^class VariablesProxy {$/;"	c
Verbosity	search/merge_and_shrink/types.h	/^enum class Verbosity {$/;"	c	namespace:merge_and_shrink
Vertex	search/bliss/graph.cc	/^Digraph::Vertex::Vertex()$/;"	f	class:bliss::Digraph::Vertex
Vertex	search/bliss/graph.cc	/^Graph::Vertex::Vertex()$/;"	f	class:bliss::Graph::Vertex
Vertex	search/bliss/graph.h	/^  class Vertex {$/;"	c	class:bliss::Digraph
Vertex	search/bliss/graph.h	/^  class Vertex {$/;"	c	class:bliss::Graph
WIN32_LEAN_AND_MEAN	search/utils/system_windows.h	12;"	d
WINDOWS	search/utils/system.h	6;"	d
WeightedEvaluator	search/evaluators/weighted_evaluator.cc	/^WeightedEvaluator::WeightedEvaluator(ScalarEvaluator *eval, int weight)$/;"	f	class:weighted_evaluator::WeightedEvaluator
WeightedEvaluator	search/evaluators/weighted_evaluator.cc	/^WeightedEvaluator::WeightedEvaluator(const Options &opts)$/;"	f	class:weighted_evaluator::WeightedEvaluator
WeightedEvaluator	search/evaluators/weighted_evaluator.h	/^class WeightedEvaluator : public ScalarEvaluator {$/;"	c	namespace:weighted_evaluator
YES	search/bliss/graph.cc	/^  static const char YES = 1;$/;"	m	class:bliss::TreeNode	file:
ZeroOnePDBs	search/pdbs/zero_one_pdbs.cc	/^ZeroOnePDBs::ZeroOnePDBs($/;"	f	class:pdbs::ZeroOnePDBs
ZeroOnePDBs	search/pdbs/zero_one_pdbs.h	/^class ZeroOnePDBs {$/;"	c	namespace:pdbs
ZeroOnePDBsHeuristic	search/pdbs/zero_one_pdbs_heuristic.cc	/^ZeroOnePDBsHeuristic::ZeroOnePDBsHeuristic($/;"	f	class:pdbs::ZeroOnePDBsHeuristic
ZeroOnePDBsHeuristic	search/pdbs/zero_one_pdbs_heuristic.h	/^class ZeroOnePDBsHeuristic : public Heuristic {$/;"	c	namespace:pdbs
_ARGS	search/utils/util.h	27;"	d
_INTERNAL_ERROR	search/bliss/graph.cc	37;"	d	file:
_OUT_OF_MEMORY	search/bliss/defs.cc	/^void _OUT_OF_MEMORY(const char* file, int line) {$/;"	f	namespace:bliss
__all__	translate/pddl_parser/lisp_parser.py	/^__all__ = ["ParseError", "parse_nested_list"]$/;"	v
__all__	translate/pddl_parser/pretty_print.py	/^__all__ = ["print_nested_list"]$/;"	v
__bool__	translate/build_model.py	/^    def __bool__(self):$/;"	m	class:Queue	file:
__bool__	translate/fact_groups.py	/^    def __bool__(self):$/;"	m	class:GroupCoverQueue	file:
__eq__	translate/invariants.py	/^    def __eq__(self, other):$/;"	m	class:Invariant	file:
__eq__	translate/invariants.py	/^    def __eq__(self, other):$/;"	m	class:InvariantPart	file:
__eq__	translate/pddl/axioms.py	/^    def __eq__(self, other):$/;"	m	class:PropositionalAxiom	file:
__eq__	translate/pddl/conditions.py	/^    def __eq__(self, other):$/;"	m	class:ConstantCondition	file:
__eq__	translate/pddl/conditions.py	/^    def __eq__(self, other):$/;"	m	class:JunctorCondition	file:
__eq__	translate/pddl/conditions.py	/^    def __eq__(self, other):$/;"	m	class:Literal	file:
__eq__	translate/pddl/conditions.py	/^    def __eq__(self, other):$/;"	m	class:QuantifiedCondition	file:
__eq__	translate/pddl/effects.py	/^    def __eq__(self, other):$/;"	m	class:Effect	file:
__eq__	translate/pddl/f_expression.py	/^    def __eq__(self, other):$/;"	m	class:NumericConstant	file:
__eq__	translate/pddl/f_expression.py	/^    def __eq__(self, other):$/;"	m	class:PrimitiveNumericExpression	file:
__eq__	translate/pddl/pddl_types.py	/^    def __eq__(self, other):$/;"	m	class:TypedObject	file:
__hash__	translate/invariants.py	/^    def __hash__(self):$/;"	m	class:Invariant	file:
__hash__	translate/invariants.py	/^    def __hash__(self):$/;"	m	class:InvariantPart	file:
__hash__	translate/pddl/conditions.py	/^    __hash__ = Condition.__hash__$/;"	v	class:ConstantCondition
__hash__	translate/pddl/conditions.py	/^    __hash__ = Condition.__hash__$/;"	v	class:JunctorCondition
__hash__	translate/pddl/conditions.py	/^    __hash__ = Condition.__hash__$/;"	v	class:Literal
__hash__	translate/pddl/conditions.py	/^    __hash__ = Condition.__hash__$/;"	v	class:QuantifiedCondition
__hash__	translate/pddl/conditions.py	/^    def __hash__(self):$/;"	m	class:Condition	file:
__hash__	translate/pddl/f_expression.py	/^    def __hash__(self):$/;"	m	class:PrimitiveNumericExpression	file:
__hash__	translate/pddl/pddl_types.py	/^    def __hash__(self):$/;"	m	class:TypedObject	file:
__init__	translate/build_model.py	/^    def __init__(self):$/;"	m	class:LeafGenerator
__init__	translate/build_model.py	/^    def __init__(self, atoms):$/;"	m	class:Queue
__init__	translate/build_model.py	/^    def __init__(self, effect, conditions):$/;"	m	class:JoinRule
__init__	translate/build_model.py	/^    def __init__(self, effect, conditions):$/;"	m	class:ProductRule
__init__	translate/build_model.py	/^    def __init__(self, effect, conditions):$/;"	m	class:ProjectRule
__init__	translate/build_model.py	/^    def __init__(self, index, next):$/;"	m	class:MatchGenerator
__init__	translate/build_model.py	/^    def __init__(self, rules):$/;"	m	class:Unifier
__init__	translate/constraints.py	/^    def __init__(self):$/;"	m	class:ConstraintSystem
__init__	translate/constraints.py	/^    def __init__(self, equalities):$/;"	m	class:Assignment
__init__	translate/constraints.py	/^    def __init__(self, parts):$/;"	m	class:NegativeClause
__init__	translate/fact_groups.py	/^    def __init__(self, groups):$/;"	m	class:GroupCoverQueue
__init__	translate/graph.py	/^    def __init__(self, nodes):$/;"	m	class:Graph
__init__	translate/greedy_join.py	/^    def __init__(self, joinees):$/;"	m	class:CostMatrix
__init__	translate/greedy_join.py	/^    def __init__(self, rule):$/;"	m	class:OccurrencesTracker
__init__	translate/greedy_join.py	/^    def __init__(self, rule, name_generator):$/;"	m	class:ResultList
__init__	translate/invariant_finder.py	/^    def __init__(self, task, reachable_action_params):$/;"	m	class:BalanceChecker
__init__	translate/invariants.py	/^    def __init__(self, parts):$/;"	m	class:Invariant
__init__	translate/invariants.py	/^    def __init__(self, predicate, order, omitted_pos=-1):$/;"	m	class:InvariantPart
__init__	translate/normalize.py	/^    def __init__(self, action):$/;"	m	class:PreconditionProxy
__init__	translate/normalize.py	/^    def __init__(self, action, effect):$/;"	m	class:EffectConditionProxy
__init__	translate/normalize.py	/^    def __init__(self, axiom):$/;"	m	class:AxiomConditionProxy
__init__	translate/normalize.py	/^    def __init__(self, task):$/;"	m	class:GoalConditionProxy
__init__	translate/pddl/actions.py	/^    def __init__(self, name, parameters, num_external_parameters,$/;"	m	class:Action
__init__	translate/pddl/actions.py	/^    def __init__(self, name, precondition, effects, cost):$/;"	m	class:PropositionalAction
__init__	translate/pddl/axioms.py	/^    def __init__(self, name, condition, effect):$/;"	m	class:PropositionalAxiom
__init__	translate/pddl/axioms.py	/^    def __init__(self, name, parameters, num_external_parameters, condition):$/;"	m	class:Axiom
__init__	translate/pddl/conditions.py	/^    def __init__(self):$/;"	m	class:ConstantCondition
__init__	translate/pddl/conditions.py	/^    def __init__(self, parameters, parts):$/;"	m	class:QuantifiedCondition
__init__	translate/pddl/conditions.py	/^    def __init__(self, parts):$/;"	m	class:Condition
__init__	translate/pddl/conditions.py	/^    def __init__(self, predicate, args):$/;"	m	class:Literal
__init__	translate/pddl/effects.py	/^    def __init__(self, condition, effect):$/;"	m	class:ConditionalEffect
__init__	translate/pddl/effects.py	/^    def __init__(self, effect):$/;"	m	class:CostEffect
__init__	translate/pddl/effects.py	/^    def __init__(self, effect):$/;"	m	class:SimpleEffect
__init__	translate/pddl/effects.py	/^    def __init__(self, effects):$/;"	m	class:ConjunctiveEffect
__init__	translate/pddl/effects.py	/^    def __init__(self, parameters, condition, literal):$/;"	m	class:Effect
__init__	translate/pddl/effects.py	/^    def __init__(self, parameters, effect):$/;"	m	class:UniversalEffect
__init__	translate/pddl/f_expression.py	/^    def __init__(self, fluent, expression):$/;"	m	class:FunctionAssignment
__init__	translate/pddl/f_expression.py	/^    def __init__(self, parts):$/;"	m	class:FunctionalExpression
__init__	translate/pddl/f_expression.py	/^    def __init__(self, symbol, args):$/;"	m	class:PrimitiveNumericExpression
__init__	translate/pddl/f_expression.py	/^    def __init__(self, value):$/;"	m	class:NumericConstant
__init__	translate/pddl/functions.py	/^    def __init__(self, name, arguments, type_name):$/;"	m	class:Function
__init__	translate/pddl/pddl_types.py	/^    def __init__(self, name, basetype_name=None):$/;"	m	class:Type
__init__	translate/pddl/pddl_types.py	/^    def __init__(self, name, type_name):$/;"	m	class:TypedObject
__init__	translate/pddl/predicates.py	/^    def __init__(self, name, arguments):$/;"	m	class:Predicate
__init__	translate/pddl/tasks.py	/^    def __init__(self, domain_name, task_name, requirements,$/;"	m	class:Task
__init__	translate/pddl/tasks.py	/^    def __init__(self, requirements):$/;"	m	class:Requirements
__init__	translate/pddl_parser/lisp_parser.py	/^    def __init__(self, value):$/;"	m	class:ParseError
__init__	translate/pddl_to_prolog.py	/^    def __init__(self):$/;"	m	class:PrologProgram
__init__	translate/pddl_to_prolog.py	/^    def __init__(self, atom):$/;"	m	class:Fact
__init__	translate/pddl_to_prolog.py	/^    def __init__(self, conditions, effect):$/;"	m	class:Rule
__init__	translate/sas_tasks.py	/^    def __init__(self, condition, effect):$/;"	m	class:SASAxiom
__init__	translate/sas_tasks.py	/^    def __init__(self, facts):$/;"	m	class:SASMutexGroup
__init__	translate/sas_tasks.py	/^    def __init__(self, name, prevail, pre_post, cost):$/;"	m	class:SASOperator
__init__	translate/sas_tasks.py	/^    def __init__(self, pairs):$/;"	m	class:SASGoal
__init__	translate/sas_tasks.py	/^    def __init__(self, ranges, axiom_layers, value_names):$/;"	m	class:SASVariables
__init__	translate/sas_tasks.py	/^    def __init__(self, values):$/;"	m	class:SASInit
__init__	translate/sas_tasks.py	/^    def __init__(self, variables, mutexes, init, goal,$/;"	m	class:SASTask
__init__	translate/simplify.py	/^    def __init__(self):$/;"	m	class:VarValueRenaming
__init__	translate/simplify.py	/^    def __init__(self, init, size):$/;"	m	class:DomainTransitionGraph
__init__	translate/timers.py	/^    def __init__(self):$/;"	m	class:Timer
__init__	translate/variable_order.py	/^    def __init__(self, graph, input_order):$/;"	m	class:MaxDAG
__init__	translate/variable_order.py	/^    def __init__(self, ordering):$/;"	m	class:VariableOrder
__init__	translate/variable_order.py	/^    def __init__(self, sas_task):$/;"	m	class:CausalGraph
__init__	translate/variable_order.py	/^    def __init__(self, unweighted_graph):$/;"	m	class:SCC
__le__	translate/invariants.py	/^    def __le__(self, other):$/;"	m	class:Invariant	file:
__le__	translate/invariants.py	/^    def __le__(self, other):$/;"	m	class:InvariantPart	file:
__le__	translate/pddl/axioms.py	/^    def __le__(self, other):$/;"	m	class:PropositionalAxiom	file:
__le__	translate/pddl/conditions.py	/^    def __le__(self, other):$/;"	m	class:Condition	file:
__le__	translate/pddl/conditions.py	/^    def __le__(self, other):$/;"	m	class:Literal	file:
__lt__	translate/invariants.py	/^    def __lt__(self, other):$/;"	m	class:Invariant	file:
__lt__	translate/invariants.py	/^    def __lt__(self, other):$/;"	m	class:InvariantPart	file:
__lt__	translate/pddl/axioms.py	/^    def __lt__(self, other):$/;"	m	class:PropositionalAxiom	file:
__lt__	translate/pddl/conditions.py	/^    def __lt__(self, other):$/;"	m	class:Condition	file:
__lt__	translate/pddl/conditions.py	/^    def __lt__(self, other):$/;"	m	class:Literal	file:
__ne__	translate/invariants.py	/^    def __ne__(self, other):$/;"	m	class:Invariant	file:
__ne__	translate/invariants.py	/^    def __ne__(self, other):$/;"	m	class:InvariantPart	file:
__ne__	translate/pddl/conditions.py	/^    def __ne__(self, other):$/;"	m	class:Condition	file:
__ne__	translate/pddl/conditions.py	/^    def __ne__(self, other):$/;"	m	class:Literal	file:
__ne__	translate/pddl/pddl_types.py	/^    def __ne__(self, other):$/;"	m	class:TypedObject	file:
__nonzero__	translate/build_model.py	/^    __nonzero__ = __bool__$/;"	v	class:Queue
__nonzero__	translate/fact_groups.py	/^    __nonzero__ = __bool__$/;"	v	class:GroupCoverQueue
__repr__	translate/build_model.py	/^    def __repr__(self):$/;"	m	class:BuildRule	file:
__repr__	translate/invariants.py	/^    def __repr__(self):$/;"	m	class:Invariant	file:
__repr__	translate/pddl/actions.py	/^    def __repr__(self):$/;"	m	class:Action	file:
__repr__	translate/pddl/actions.py	/^    def __repr__(self):$/;"	m	class:PropositionalAction	file:
__repr__	translate/pddl/axioms.py	/^    def __repr__(self):$/;"	m	class:PropositionalAxiom	file:
__repr__	translate/pddl/conditions.py	/^    def __repr__(self):$/;"	m	class:Literal	file:
__repr__	translate/pddl/pddl_types.py	/^    def __repr__(self):$/;"	m	class:Type	file:
__repr__	translate/pddl/pddl_types.py	/^    def __repr__(self):$/;"	m	class:TypedObject	file:
__str__	translate/build_model.py	/^    def __str__(self):$/;"	m	class:BuildRule	file:
__str__	translate/constraints.py	/^    def __str__(self):$/;"	m	class:Assignment	file:
__str__	translate/constraints.py	/^    def __str__(self):$/;"	m	class:ConstraintSystem	file:
__str__	translate/constraints.py	/^    def __str__(self):$/;"	m	class:NegativeClause	file:
__str__	translate/invariants.py	/^    def __str__(self):$/;"	m	class:Invariant	file:
__str__	translate/invariants.py	/^    def __str__(self):$/;"	m	class:InvariantPart	file:
__str__	translate/pddl/conditions.py	/^    def __str__(self):$/;"	m	class:Literal	file:
__str__	translate/pddl/f_expression.py	/^    def __str__(self):$/;"	m	class:Assign	file:
__str__	translate/pddl/f_expression.py	/^    def __str__(self):$/;"	m	class:FunctionAssignment	file:
__str__	translate/pddl/f_expression.py	/^    def __str__(self):$/;"	m	class:NumericConstant	file:
__str__	translate/pddl/f_expression.py	/^    def __str__(self):$/;"	m	class:PrimitiveNumericExpression	file:
__str__	translate/pddl/functions.py	/^    def __str__(self):$/;"	m	class:Function	file:
__str__	translate/pddl/pddl_types.py	/^    def __str__(self):$/;"	m	class:Type	file:
__str__	translate/pddl/pddl_types.py	/^    def __str__(self):$/;"	m	class:TypedObject	file:
__str__	translate/pddl/predicates.py	/^    def __str__(self):$/;"	m	class:Predicate	file:
__str__	translate/pddl/tasks.py	/^    def __str__(self):$/;"	m	class:Requirements	file:
__str__	translate/pddl_parser/lisp_parser.py	/^    def __str__(self):$/;"	m	class:ParseError	file:
__str__	translate/pddl_to_prolog.py	/^    def __str__(self):$/;"	m	class:Fact	file:
__str__	translate/pddl_to_prolog.py	/^    def __str__(self):$/;"	m	class:Rule	file:
__str__	translate/timers.py	/^    def __str__(self):$/;"	m	class:Timer	file:
_add_options_to_parser	search/landmarks/landmark_factory.cc	/^void _add_options_to_parser(OptionParser &parser) {$/;"	f	namespace:landmarks
_add_succ_order_options	search/search_engines/lazy_search.cc	/^static void _add_succ_order_options(OptionParser &parser) {$/;"	f	namespace:lazy_search
_all_clauses_satisfiable	translate/constraints.py	/^    def _all_clauses_satisfiable(self, assignment):$/;"	m	class:ConstraintSystem
_allocate	search/structural_symmetries/operator_permutation.cc	/^void OperatorPermutation::_allocate() {$/;"	f	class:OperatorPermutation
_allocate	search/structural_symmetries/permutation.cc	/^void Permutation::_allocate() {$/;"	f	class:Permutation
_apply_to_axioms	translate/variable_order.py	/^    def _apply_to_axioms(self, axioms):$/;"	m	class:VariableOrder
_apply_to_goal	translate/variable_order.py	/^    def _apply_to_goal(self, goal):$/;"	m	class:VariableOrder
_apply_to_init	translate/variable_order.py	/^    def _apply_to_init(self, init):$/;"	m	class:VariableOrder
_apply_to_mutexes	translate/variable_order.py	/^    def _apply_to_mutexes(self, mutexes):$/;"	m	class:VariableOrder
_apply_to_operators	translate/variable_order.py	/^    def _apply_to_operators(self, operators):$/;"	m	class:VariableOrder
_apply_to_variables	translate/variable_order.py	/^    def _apply_to_variables(self, variables):$/;"	m	class:VariableOrder
_canonical_pre_post	translate/sas_tasks.py	/^    def _canonical_pre_post(self, pre_post):$/;"	m	class:SASOperator
_check_bounds	search/options/option_parser.cc	/^void _check_bounds($/;"	f	namespace:options
_clock	translate/timers.py	/^    def _clock(self):$/;"	m	class:Timer
_combine_assignments	translate/constraints.py	/^    def _combine_assignments(self, assignments):$/;"	m	class:ConstraintSystem
_compute_equivalence_classes	translate/constraints.py	/^    def _compute_equivalence_classes(self):$/;"	m	class:Assignment
_compute_mapping	translate/constraints.py	/^    def _compute_mapping(self):$/;"	m	class:Assignment
_copy_value_from_permutation	search/structural_symmetries/permutation.cc	/^void Permutation::_copy_value_from_permutation(const Permutation &perm) {$/;"	f	class:Permutation
_deallocate	search/structural_symmetries/operator_permutation.cc	/^void OperatorPermutation::_deallocate() {$/;"	f	class:OperatorPermutation
_deallocate	search/structural_symmetries/permutation.cc	/^void Permutation::_deallocate() {$/;"	f	class:Permutation
_dump	translate/pddl/conditions.py	/^    def _dump(self):$/;"	m	class:Condition
_dump	translate/pddl/conditions.py	/^    def _dump(self):$/;"	m	class:Literal
_dump	translate/pddl/conditions.py	/^    def _dump(self, indent="  "):$/;"	m	class:QuantifiedCondition
_dump	translate/pddl/f_expression.py	/^    def _dump(self):$/;"	m	class:FunctionAssignment
_dump	translate/pddl/f_expression.py	/^    def _dump(self):$/;"	m	class:FunctionalExpression
_dump	translate/pddl/f_expression.py	/^    def _dump(self):$/;"	m	class:NumericConstant
_dump	translate/pddl/f_expression.py	/^    def _dump(self):$/;"	m	class:PrimitiveNumericExpression
_get_bindings	translate/build_model.py	/^    def _get_bindings(self, atom, cond):$/;"	m	class:ProductRule
_get_predicate_id_and_arity	translate/pddl_parser/parsing_functions.py	/^def _get_predicate_id_and_arity(text, type_dict, predicate_dict):$/;"	f
_get_type_predicate_name	translate/pddl/pddl_types.py	/^def _get_type_predicate_name(type_name):$/;"	f
_insert	translate/build_model.py	/^    def _insert(self, args, value):$/;"	m	class:LeafGenerator
_insert	translate/build_model.py	/^    def _insert(self, args, value):$/;"	m	class:MatchGenerator
_insert_condition	translate/build_model.py	/^    def _insert_condition(self, rule, cond_index):$/;"	m	class:Unifier
_instantiate	translate/pddl/effects.py	/^    def _instantiate(self, var_mapping, init_facts, fluent_facts, result):$/;"	m	class:Effect
_intersect	search/landmarks/util.cc	/^unordered_map<int, int> _intersect(const unordered_map<int, int> &a, const unordered_map<int, int> &b) {$/;"	f	namespace:landmarks
_intersection	search/landmarks/landmark_factory_zhu_givan.cc	/^static lm_set _intersection(const lm_set &a, const lm_set &b) {$/;"	f	namespace:landmarks
_inverse_value_from_permutation	search/structural_symmetries/permutation.cc	/^void Permutation::_inverse_value_from_permutation(const Permutation &perm) {$/;"	f	class:Permutation
_nof_orbits	search/bliss/orbit.h	/^  unsigned int _nof_orbits;$/;"	m	class:bliss::Orbit
_parse	search/cegar/additive_cartesian_heuristic.cc	/^static Heuristic *_parse(OptionParser &parser) {$/;"	f	namespace:cegar
_parse	search/evaluators/const_evaluator.cc	/^static Heuristic *_parse(OptionParser &parser) {$/;"	f	namespace:const_evaluator
_parse	search/evaluators/g_evaluator.cc	/^static ScalarEvaluator *_parse(OptionParser &parser) {$/;"	f	namespace:g_evaluator
_parse	search/evaluators/max_evaluator.cc	/^static ScalarEvaluator *_parse(OptionParser &parser) {$/;"	f	namespace:max_evaluator
_parse	search/evaluators/pref_evaluator.cc	/^static ScalarEvaluator *_parse(OptionParser &parser) {$/;"	f	namespace:pref_evaluator
_parse	search/evaluators/sum_evaluator.cc	/^static ScalarEvaluator *_parse(OptionParser &parser) {$/;"	f	namespace:sum_evaluator
_parse	search/evaluators/weighted_evaluator.cc	/^static ScalarEvaluator *_parse(OptionParser &parser) {$/;"	f	namespace:weighted_evaluator
_parse	search/heuristics/additive_heuristic.cc	/^static Heuristic *_parse(OptionParser &parser) {$/;"	f	namespace:additive_heuristic
_parse	search/heuristics/blind_search_heuristic.cc	/^static Heuristic *_parse(OptionParser &parser) {$/;"	f	namespace:blind_search_heuristic
_parse	search/heuristics/cea_heuristic.cc	/^static Heuristic *_parse(OptionParser &parser) {$/;"	f	namespace:cea_heuristic
_parse	search/heuristics/cg_heuristic.cc	/^static Heuristic *_parse(OptionParser &parser) {$/;"	f	namespace:cg_heuristic
_parse	search/heuristics/ff_heuristic.cc	/^static Heuristic *_parse(OptionParser &parser) {$/;"	f	namespace:ff_heuristic
_parse	search/heuristics/goal_count_heuristic.cc	/^static Heuristic *_parse(OptionParser &parser) {$/;"	f	namespace:goal_count_heuristic
_parse	search/heuristics/hm_heuristic.cc	/^static Heuristic *_parse(OptionParser &parser) {$/;"	f	namespace:hm_heuristic
_parse	search/heuristics/lm_cut_heuristic.cc	/^static Heuristic *_parse(OptionParser &parser) {$/;"	f	namespace:lm_cut_heuristic
_parse	search/heuristics/max_heuristic.cc	/^static Heuristic *_parse(OptionParser &parser) {$/;"	f	namespace:max_heuristic
_parse	search/landmarks/lama_ff_synergy.cc	/^static Synergy *_parse(OptionParser &parser) {$/;"	f	namespace:landmarks
_parse	search/landmarks/landmark_count_heuristic.cc	/^static Heuristic *_parse(OptionParser &parser) {$/;"	f	namespace:landmarks
_parse	search/landmarks/landmark_factory_h_m.cc	/^static LandmarkFactory *_parse(OptionParser &parser) {$/;"	f	namespace:landmarks
_parse	search/landmarks/landmark_factory_merged.cc	/^static LandmarkFactory *_parse(OptionParser &parser) {$/;"	f	namespace:landmarks
_parse	search/landmarks/landmark_factory_rpg_exhaust.cc	/^static LandmarkFactory *_parse(OptionParser &parser) {$/;"	f	namespace:landmarks
_parse	search/landmarks/landmark_factory_rpg_sasp.cc	/^static LandmarkFactory *_parse(OptionParser &parser) {$/;"	f	namespace:landmarks
_parse	search/landmarks/landmark_factory_zhu_givan.cc	/^static LandmarkFactory *_parse(OptionParser &parser) {$/;"	f	namespace:landmarks
_parse	search/merge_and_shrink/label_reduction.cc	/^static shared_ptr<LabelReduction>_parse(OptionParser &parser) {$/;"	f	namespace:merge_and_shrink
_parse	search/merge_and_shrink/merge_and_shrink_heuristic.cc	/^static Heuristic *_parse(OptionParser &parser) {$/;"	f	namespace:merge_and_shrink
_parse	search/merge_and_shrink/merge_scoring_function_dfp.cc	/^static shared_ptr<MergeScoringFunction>_parse(options::OptionParser &parser) {$/;"	f	namespace:merge_and_shrink
_parse	search/merge_and_shrink/merge_scoring_function_goal_relevance.cc	/^static shared_ptr<MergeScoringFunction>_parse(options::OptionParser &parser) {$/;"	f	namespace:merge_and_shrink
_parse	search/merge_and_shrink/merge_scoring_function_single_random.cc	/^static shared_ptr<MergeScoringFunction>_parse(options::OptionParser &parser) {$/;"	f	namespace:merge_and_shrink
_parse	search/merge_and_shrink/merge_scoring_function_total_order.cc	/^static shared_ptr<MergeScoringFunction>_parse(options::OptionParser &parser) {$/;"	f	namespace:merge_and_shrink
_parse	search/merge_and_shrink/merge_selector_score_based_filtering.cc	/^static shared_ptr<MergeSelector>_parse(options::OptionParser &parser) {$/;"	f	namespace:merge_and_shrink
_parse	search/merge_and_shrink/merge_strategy_factory_precomputed.cc	/^static shared_ptr<MergeStrategyFactory>_parse(options::OptionParser &parser) {$/;"	f	namespace:merge_and_shrink
_parse	search/merge_and_shrink/merge_strategy_factory_stateless.cc	/^static shared_ptr<MergeStrategyFactory>_parse(options::OptionParser &parser) {$/;"	f	namespace:merge_and_shrink
_parse	search/merge_and_shrink/merge_tree_factory_linear.cc	/^static shared_ptr<MergeTreeFactory> _parse(options::OptionParser &parser) {$/;"	f	namespace:merge_and_shrink
_parse	search/merge_and_shrink/shrink_bisimulation.cc	/^static shared_ptr<ShrinkStrategy>_parse(OptionParser &parser) {$/;"	f	namespace:merge_and_shrink
_parse	search/merge_and_shrink/shrink_fh.cc	/^static shared_ptr<ShrinkStrategy>_parse(OptionParser &parser) {$/;"	f	namespace:merge_and_shrink
_parse	search/merge_and_shrink/shrink_random.cc	/^static shared_ptr<ShrinkStrategy>_parse(OptionParser &parser) {$/;"	f	namespace:merge_and_shrink
_parse	search/open_lists/alternation_open_list.cc	/^static shared_ptr<OpenListFactory> _parse(OptionParser &parser) {$/;"	f	file:
_parse	search/open_lists/epsilon_greedy_open_list.cc	/^static shared_ptr<OpenListFactory> _parse(OptionParser &parser) {$/;"	f	file:
_parse	search/open_lists/pareto_open_list.cc	/^static shared_ptr<OpenListFactory> _parse(OptionParser &parser) {$/;"	f	file:
_parse	search/open_lists/standard_scalar_open_list.cc	/^static shared_ptr<OpenListFactory> _parse(OptionParser &parser) {$/;"	f	file:
_parse	search/open_lists/tiebreaking_open_list.cc	/^static shared_ptr<OpenListFactory> _parse(OptionParser &parser) {$/;"	f	file:
_parse	search/open_lists/type_based_open_list.cc	/^static shared_ptr<OpenListFactory> _parse(OptionParser &parser) {$/;"	f	file:
_parse	search/operator_counting/lm_cut_constraints.cc	/^static shared_ptr<ConstraintGenerator> _parse(OptionParser &parser) {$/;"	f	namespace:operator_counting
_parse	search/operator_counting/operator_counting_heuristic.cc	/^static Heuristic *_parse(OptionParser &parser) {$/;"	f	namespace:operator_counting
_parse	search/operator_counting/pho_constraints.cc	/^static shared_ptr<ConstraintGenerator> _parse(OptionParser &parser) {$/;"	f	namespace:operator_counting
_parse	search/operator_counting/state_equation_constraints.cc	/^static shared_ptr<ConstraintGenerator> _parse(OptionParser &parser) {$/;"	f	namespace:operator_counting
_parse	search/pdbs/canonical_pdbs_heuristic.cc	/^static Heuristic *_parse(OptionParser &parser) {$/;"	f	namespace:pdbs
_parse	search/pdbs/pattern_collection_generator_combo.cc	/^static shared_ptr<PatternCollectionGenerator> _parse(OptionParser &parser) {$/;"	f	namespace:pdbs
_parse	search/pdbs/pattern_collection_generator_genetic.cc	/^static shared_ptr<PatternCollectionGenerator> _parse(OptionParser &parser) {$/;"	f	namespace:pdbs
_parse	search/pdbs/pattern_collection_generator_hillclimbing.cc	/^static shared_ptr<PatternCollectionGenerator> _parse(OptionParser &parser) {$/;"	f	namespace:pdbs
_parse	search/pdbs/pattern_collection_generator_manual.cc	/^static shared_ptr<PatternCollectionGenerator> _parse(OptionParser &parser) {$/;"	f	namespace:pdbs
_parse	search/pdbs/pattern_collection_generator_systematic.cc	/^static shared_ptr<PatternCollectionGenerator> _parse(OptionParser &parser) {$/;"	f	namespace:pdbs
_parse	search/pdbs/pattern_generator_greedy.cc	/^static shared_ptr<PatternGenerator> _parse(OptionParser &parser) {$/;"	f	namespace:pdbs
_parse	search/pdbs/pattern_generator_manual.cc	/^static shared_ptr<PatternGenerator> _parse(OptionParser &parser) {$/;"	f	namespace:pdbs
_parse	search/pdbs/pdb_heuristic.cc	/^static Heuristic *_parse(OptionParser &parser) {$/;"	f	namespace:pdbs
_parse	search/pdbs/zero_one_pdbs_heuristic.cc	/^static Heuristic *_parse(OptionParser &parser) {$/;"	f	namespace:pdbs
_parse	search/potentials/diverse_potential_heuristics.cc	/^static Heuristic *_parse(OptionParser &parser) {$/;"	f	namespace:potentials
_parse	search/potentials/sample_based_potential_heuristics.cc	/^static Heuristic *_parse(OptionParser &parser) {$/;"	f	namespace:potentials
_parse	search/potentials/single_potential_heuristics.cc	/^static Heuristic *_parse(OptionParser &parser, OptimizeFor opt_func) {$/;"	f	namespace:potentials
_parse	search/pruning/null_pruning_method.cc	/^static shared_ptr<PruningMethod> _parse(OptionParser &parser) {$/;"	f	namespace:null_pruning_method
_parse	search/pruning/stubborn_sets_ec.cc	/^static shared_ptr<PruningMethod> _parse(OptionParser &parser) {$/;"	f	namespace:stubborn_sets_ec
_parse	search/pruning/stubborn_sets_simple.cc	/^static shared_ptr<PruningMethod> _parse(OptionParser &parser) {$/;"	f	namespace:stubborn_sets_simple
_parse	search/search_engines/eager_search.cc	/^static SearchEngine *_parse(OptionParser &parser) {$/;"	f	namespace:eager_search
_parse	search/search_engines/enforced_hill_climbing_search.cc	/^static SearchEngine *_parse(OptionParser &parser) {$/;"	f	namespace:enforced_hill_climbing_search
_parse	search/search_engines/iterated_search.cc	/^static SearchEngine *_parse(OptionParser &parser) {$/;"	f	namespace:iterated_search
_parse	search/search_engines/kstar.cc	/^static SearchEngine *_parse(OptionParser &parser) {$/;"	f	namespace:kstar
_parse	search/search_engines/lazy_search.cc	/^static SearchEngine *_parse(OptionParser &parser) {$/;"	f	namespace:lazy_search
_parse	search/search_engines/top_k_eager_search.cc	/^static SearchEngine *_parse(OptionParser &parser) {$/;"	f	namespace:top_k_eager_search
_parse	search/structural_symmetries/group.cc	/^static shared_ptr<Group> _parse(OptionParser &parser) {$/;"	f	file:
_parse	search/tasks/cost_adapted_task.cc	/^static shared_ptr<AbstractTask> _parse(OptionParser &parser) {$/;"	f	namespace:tasks
_parse	search/tasks/root_task.cc	/^static shared_ptr<AbstractTask> _parse(OptionParser &parser) {$/;"	f	namespace:tasks
_parse_all_states_potential	search/potentials/single_potential_heuristics.cc	/^static Heuristic *_parse_all_states_potential(OptionParser &parser) {$/;"	f	namespace:potentials
_parse_astar	search/search_engines/eager_search.cc	/^static SearchEngine *_parse_astar(OptionParser &parser) {$/;"	f	namespace:eager_search
_parse_astar	search/search_engines/top_k_eager_search.cc	/^static SearchEngine *_parse_astar(OptionParser &parser) {$/;"	f	namespace:top_k_eager_search
_parse_dfp	search/merge_and_shrink/merge_strategy_aliases.cc	/^static shared_ptr<MergeStrategyFactory>_parse_dfp(options::OptionParser &parser) {$/;"	f	namespace:merge_and_shrink
_parse_goals	search/cegar/subtask_generators.cc	/^static shared_ptr<SubtaskGenerator> _parse_goals(OptionParser &parser) {$/;"	f	namespace:cegar
_parse_greedy	search/search_engines/eager_search.cc	/^static SearchEngine *_parse_greedy(OptionParser &parser) {$/;"	f	namespace:eager_search
_parse_greedy	search/search_engines/lazy_search.cc	/^static SearchEngine *_parse_greedy(OptionParser &parser) {$/;"	f	namespace:lazy_search
_parse_greedy	search/search_engines/top_k_eager_search.cc	/^static SearchEngine *_parse_greedy(OptionParser &parser) {$/;"	f	namespace:top_k_eager_search
_parse_initial_state_potential	search/potentials/single_potential_heuristics.cc	/^static Heuristic *_parse_initial_state_potential(OptionParser &parser) {$/;"	f	namespace:potentials
_parse_ipdb	search/pdbs/pattern_collection_generator_hillclimbing.cc	/^static Heuristic *_parse_ipdb(OptionParser &parser) {$/;"	f	namespace:pdbs
_parse_landmarks	search/cegar/subtask_generators.cc	/^static shared_ptr<SubtaskGenerator> _parse_landmarks(OptionParser &parser) {$/;"	f	namespace:cegar
_parse_linear	search/merge_and_shrink/merge_strategy_aliases.cc	/^static shared_ptr<MergeStrategyFactory> _parse_linear($/;"	f	namespace:merge_and_shrink
_parse_original	search/cegar/subtask_generators.cc	/^static shared_ptr<SubtaskGenerator> _parse_original(OptionParser &parser) {$/;"	f	namespace:cegar
_parse_weighted_astar	search/search_engines/lazy_search.cc	/^static SearchEngine *_parse_weighted_astar(OptionParser &parser) {$/;"	f	namespace:lazy_search
_possibly_fires	search/landmarks/util.cc	/^bool _possibly_fires(const EffectConditionsProxy &conditions, const vector<vector<int>> &lvl_var) {$/;"	f	namespace:landmarks
_possibly_reaches_lm	search/landmarks/util.cc	/^bool _possibly_reaches_lm(const OperatorProxy &op, const vector<vector<int>> &lvl_var, const LandmarkNode *lmp) {$/;"	f	namespace:landmarks
_postorder_visit	translate/pddl/conditions.py	/^    def _postorder_visit(self, method_name, *args):$/;"	m	class:Condition
_propagate	translate/pddl/conditions.py	/^    def _propagate(self, parts, *args):$/;"	m	class:Condition
_propagate_labels	search/landmarks/landmark_factory_zhu_givan.cc	/^static bool _propagate_labels(lm_set &labels, const lm_set &new_labels,$/;"	f	namespace:landmarks
_relaxed	translate/pddl/conditions.py	/^    def _relaxed(self, parts):$/;"	m	class:NegatedAtom
_rename_duplicate_variables	translate/pddl_to_prolog.py	/^    def _rename_duplicate_variables(self, atom, new_conditions):$/;"	m	class:Rule
_simplified	translate/pddl/conditions.py	/^    def _simplified(self, parts):$/;"	m	class:Conjunction
_simplified	translate/pddl/conditions.py	/^    def _simplified(self, parts):$/;"	m	class:Disjunction
_simplified	translate/pddl/conditions.py	/^    def _simplified(self, parts):$/;"	m	class:QuantifiedCondition
_tracer	search/utils/logging.cc	/^static MemoryTracer _tracer;$/;"	m	namespace:utils	file:
_union	search/landmarks/landmark_factory_zhu_givan.cc	/^static lm_set _union(const lm_set &a, const lm_set &b) {$/;"	f	namespace:landmarks
_untyped	translate/pddl/conditions.py	/^    def _untyped(self, parts):$/;"	m	class:ExistentialCondition
_untyped	translate/pddl/conditions.py	/^    def _untyped(self, parts):$/;"	m	class:UniversalCondition
_update_top	translate/fact_groups.py	/^    def _update_top(self):$/;"	m	class:GroupCoverQueue
abstract_search	search/cegar/abstraction.h	/^    AbstractSearch abstract_search;$/;"	m	class:cegar::Abstraction
achievers	search/pruning/stubborn_sets.h	/^    std::vector<std::vector<std::vector<int>>> achievers;$/;"	m	class:stubborn_sets::StubbornSets
achieves_non_conditional	search/landmarks/landmark_factory.cc	/^bool LandmarkFactory::achieves_non_conditional(const OperatorProxy &o,$/;"	f	class:landmarks::LandmarkFactory
action_cost	search/heuristics/cea_heuristic.cc	/^    int action_cost;$/;"	m	struct:cea_heuristic::LocalTransition	file:
active_ops	search/pruning/stubborn_sets_ec.h	/^    std::vector<bool> active_ops;$/;"	m	class:stubborn_sets_ec::StubbornSetsEC
add	search/cegar/domains.cc	/^void Domains::add(int var, int value) {$/;"	f	class:cegar::Domains
add_all	search/cegar/domains.cc	/^void Domains::add_all(int var) {$/;"	f	class:cegar::Domains
add_arc	translate/simplify.py	/^    def add_arc(self, u, v):$/;"	m	class:DomainTransitionGraph
add_arc	translate/simplify.py	/^    def add_arc(var_no, pre_spec, post):$/;"	f	function:build_dtgs
add_arg	search/options/doc_store.cc	/^void DocStore::add_arg(string k,$/;"	f	class:options::DocStore
add_assignment	translate/constraints.py	/^    def add_assignment(self, assignment):$/;"	m	class:ConstraintSystem
add_assignment_disjunction	translate/constraints.py	/^    def add_assignment_disjunction(self, assignments):$/;"	m	class:ConstraintSystem
add_axiom	translate/pddl/tasks.py	/^    def add_axiom(self, parameters, condition):$/;"	m	class:Task
add_condition	translate/pddl_to_prolog.py	/^    def add_condition(self, condition):$/;"	m	class:Rule
add_conflicting_and_disabling	search/pruning/stubborn_sets_ec.cc	/^void StubbornSetsEC::add_conflicting_and_disabling(int op_no,$/;"	f	class:stubborn_sets_ec::StubbornSetsEC
add_constraints	search/operator_counting/state_equation_constraints.cc	/^void StateEquationConstraints::add_constraints($/;"	f	class:operator_counting::StateEquationConstraints
add_cost_type_option_to_parser	search/operator_cost.cc	/^void add_cost_type_option_to_parser(OptionParser &parser) {$/;"	f
add_dtg_successor	search/landmarks/landmark_factory_rpg_sasp.cc	/^void LandmarkFactoryRpgSasp::add_dtg_successor(int var_id, int pre, int post) {$/;"	f	class:landmarks::LandmarkFactoryRpgSasp
add_edge	search/bliss/graph.cc	/^Digraph::add_edge(const unsigned int vertex1, const unsigned int vertex2)$/;"	f	class:bliss::Digraph
add_edge	search/bliss/graph.cc	/^Graph::Vertex::add_edge(const unsigned int other_vertex)$/;"	f	class:bliss::Graph::Vertex
add_edge	search/bliss/graph.cc	/^Graph::add_edge(const unsigned int vertex1, const unsigned int vertex2)$/;"	f	class:bliss::Graph
add_edge	search/utils/util.h	/^inline void add_edge(int from_id, int to_id, std::string label, std::stringstream &stream)$/;"	f
add_edge_from	search/bliss/graph.cc	/^Digraph::Vertex::add_edge_from(const unsigned int other_vertex)$/;"	f	class:bliss::Digraph::Vertex
add_edge_to	search/bliss/graph.cc	/^Digraph::Vertex::add_edge_to(const unsigned int other_vertex)$/;"	f	class:bliss::Digraph::Vertex
add_effect	translate/pddl_parser/parsing_functions.py	/^def add_effect(tmp_effect, result):$/;"	f
add_effect_unbalanced	translate/invariants.py	/^    def add_effect_unbalanced(self, action, add_effect, del_effects,$/;"	m	class:Invariant
add_empty_block	search/algorithms/equivalence_relation.cc	/^BlockListIter EquivalenceRelation::add_empty_block() {$/;"	f	class:equivalence_relation::EquivalenceRelation
add_entry	translate/greedy_join.py	/^    def add_entry(self, joinee):$/;"	m	class:CostMatrix
add_enum_option	search/options/option_parser.cc	/^void OptionParser::add_enum_option(string k,$/;"	f	class:options::OptionParser
add_fact	translate/pddl_to_prolog.py	/^    def add_fact(self, atom):$/;"	m	class:PrologProgram
add_fact_order_option	search/cegar/subtask_generators.cc	/^static void add_fact_order_option(OptionParser &parser) {$/;"	f	namespace:cegar
add_feature	search/options/doc_store.cc	/^void DocStore::add_feature(string k,$/;"	f	class:options::DocStore
add_first_plan	search/search_engines/kstar.cc	/^void KStar::add_first_plan() {$/;"	f	class:kstar::KStar
add_forbid_plan_reformulation_option	search/search_engines/eager_search.cc	/^void add_forbid_plan_reformulation_option(OptionParser &parser) {$/;"	f	namespace:eager_search
add_generator	search/structural_symmetries/group.cc	/^void Group::add_generator(const Permutation *gen) {$/;"	f	class:Group
add_goal_heap_top	search/search_engines/kstar.cc	/^void KStar::add_goal_heap_top() {$/;"	f	class:kstar::KStar
add_hillclimbing_options	search/pdbs/pattern_collection_generator_hillclimbing.cc	/^void add_hillclimbing_options(OptionParser &parser) {$/;"	f	namespace:pdbs
add_incoming_transition	search/cegar/abstract_state.cc	/^void AbstractState::add_incoming_transition(int op_id, AbstractState *src) {$/;"	f	class:cegar::AbstractState
add_indices_to_constraint	search/operator_counting/state_equation_constraints.cc	/^void add_indices_to_constraint(lp::LPConstraint &constraint,$/;"	f	namespace:operator_counting
add_inequality_preconds	translate/invariant_finder.py	/^    def add_inequality_preconds(self, action, reachable_action_params):$/;"	m	class:BalanceChecker
add_interfering	search/pruning/stubborn_sets_simple.cc	/^void StubbornSetsSimple::add_interfering(int op_no) {$/;"	f	class:stubborn_sets_simple::StubbornSetsSimple
add_label_group	search/merge_and_shrink/label_equivalence_relation.cc	/^int LabelEquivalenceRelation::add_label_group(const vector<int> &new_labels) {$/;"	f	class:merge_and_shrink::LabelEquivalenceRelation
add_label_to_group	search/merge_and_shrink/label_equivalence_relation.cc	/^void LabelEquivalenceRelation::add_label_to_group(int group_id,$/;"	f	class:merge_and_shrink::LabelEquivalenceRelation
add_list_option	search/options/option_parser.h	/^void OptionParser::add_list_option($/;"	f	class:options::OptionParser
add_lm_forward_orders	search/landmarks/landmark_factory_rpg_sasp.cc	/^void LandmarkFactoryRpgSasp::add_lm_forward_orders() {$/;"	f	class:landmarks::LandmarkFactoryRpgSasp
add_lm_node	search/landmarks/landmark_factory_h_m.cc	/^void LandmarkFactoryHM::add_lm_node(int set_index, bool goal) {$/;"	f	class:landmarks::LandmarkFactoryHM
add_loop	search/cegar/abstract_state.cc	/^void AbstractState::add_loop(int op_id) {$/;"	f	class:cegar::AbstractState
add_loop	search/cegar/transition_updater.cc	/^void TransitionUpdater::add_loop(AbstractState *state, int op_id) {$/;"	f	class:cegar::TransitionUpdater
add_loops_to_trivial_abstract_state	search/cegar/transition_updater.cc	/^void TransitionUpdater::add_loops_to_trivial_abstract_state(AbstractState *state) {$/;"	f	class:cegar::TransitionUpdater
add_lp_solver_option_to_parser	search/lp/lp_solver.cc	/^void add_lp_solver_option_to_parser(OptionParser &parser) {$/;"	f	namespace:lp
add_necessary_enabling_set	search/pruning/stubborn_sets_simple.cc	/^void StubbornSetsSimple::add_necessary_enabling_set(const FactPair &fact) {$/;"	f	class:stubborn_sets_simple::StubbornSetsSimple
add_negative_clause	translate/constraints.py	/^    def add_negative_clause(self, negative_clause):$/;"	m	class:ConstraintSystem
add_nes_for_fact	search/pruning/stubborn_sets_ec.cc	/^void StubbornSetsEC::add_nes_for_fact(const FactPair &fact, const State &state) {$/;"	f	class:stubborn_sets_ec::StubbornSetsEC
add_node	search/utils/util.h	/^inline void add_node(int id, std::string label, std::stringstream &stream)$/;"	f
add_note	search/options/doc_store.cc	/^void DocStore::add_note(string k,$/;"	f	class:options::DocStore
add_operator_and_propositions_to_list	search/landmarks/landmark_factory.cc	/^void LandmarkFactory::add_operator_and_propositions_to_list(const OperatorProxy &op,$/;"	f	class:landmarks::LandmarkFactory
add_operator_directed_graph	search/structural_symmetries/graph_creator.cc	/^void GraphCreator::add_operator_directed_graph(bliss::Digraph &bliss_graph,$/;"	f	class:GraphCreator
add_operator_generator	search/structural_symmetries/group.cc	/^void Group::add_operator_generator(const unsigned int * full_perm) {$/;"	f	class:Group
add_operator_to_triggers	search/landmarks/landmark_factory_zhu_givan.cc	/^void LandmarkFactoryZhuGivan::add_operator_to_triggers(const OperatorProxy &op) {$/;"	f	class:landmarks::LandmarkFactoryZhuGivan
add_option	search/options/option_parser.h	/^void OptionParser::add_option($/;"	f	class:options::OptionParser
add_options_to_parser	search/heuristic.cc	/^void Heuristic::add_options_to_parser(OptionParser &parser) {$/;"	f	class:Heuristic
add_options_to_parser	search/merge_and_shrink/merge_scoring_function_total_order.cc	/^void MergeScoringFunctionTotalOrder::add_options_to_parser($/;"	f	class:merge_and_shrink::MergeScoringFunctionTotalOrder
add_options_to_parser	search/merge_and_shrink/merge_tree_factory.cc	/^void MergeTreeFactory::add_options_to_parser(options::OptionParser &parser) {$/;"	f	class:merge_and_shrink::MergeTreeFactory
add_options_to_parser	search/merge_and_shrink/merge_tree_factory_linear.cc	/^void MergeTreeFactoryLinear::add_options_to_parser($/;"	f	class:merge_and_shrink::MergeTreeFactoryLinear
add_options_to_parser	search/merge_and_shrink/shrink_bucket_based.cc	/^void ShrinkBucketBased::add_options_to_parser(options::OptionParser &parser) {$/;"	f	class:merge_and_shrink::ShrinkBucketBased
add_options_to_parser	search/search_engine.cc	/^void SearchEngine::add_options_to_parser(OptionParser &parser) {$/;"	f	class:SearchEngine
add_outgoing_transition	search/cegar/abstract_state.cc	/^void AbstractState::add_outgoing_transition(int op_id, AbstractState *target) {$/;"	f	class:cegar::AbstractState
add_pair	search/causal_graph.cc	/^void IntRelationBuilder::add_pair(int u, int v) {$/;"	f	class:IntRelationBuilder
add_pdb	search/pdbs/incremental_canonical_pdbs.cc	/^void IncrementalCanonicalPDBs::add_pdb(const shared_ptr<PatternDatabase> &pdb) {$/;"	f	class:pdbs::IncrementalCanonicalPDBs
add_pdb_for_pattern	search/pdbs/incremental_canonical_pdbs.cc	/^void IncrementalCanonicalPDBs::add_pdb_for_pattern(const Pattern &pattern) {$/;"	f	class:pdbs::IncrementalCanonicalPDBs
add_permutation	search/structural_symmetries/group.cc	/^void Group::add_permutation(void* param, unsigned int, const unsigned int * full_perm){$/;"	f	class:Group
add_property	search/options/doc_store.cc	/^void DocStore::add_property(string k,$/;"	f	class:options::DocStore
add_pruning_option	search/search_engines/eager_search.cc	/^void add_pruning_option(OptionParser &parser) {$/;"	f	namespace:eager_search
add_pruning_option	search/search_engines/top_k_eager_search.cc	/^void add_pruning_option(OptionParser &parser) {$/;"	f	namespace:top_k_eager_search
add_relaxed_operator	search/heuristics/lm_cut_landmarks.cc	/^void LandmarkCutLandmarks::add_relaxed_operator($/;"	f	class:lm_cut_heuristic::LandmarkCutLandmarks
add_rng_options	search/utils/rng_options.cc	/^void add_rng_options(options::OptionParser &parser) {$/;"	f	namespace:utils
add_rule	translate/greedy_join.py	/^    def add_rule(self, type, conditions, effect_vars):$/;"	m	class:ResultList
add_rule	translate/pddl_to_prolog.py	/^    def add_rule(self, rule):$/;"	m	class:PrologProgram
add_segment	search/algorithms/segmented_vector.h	/^    void add_segment() {$/;"	f	class:segmented_vector::SegmentedArrayVector
add_segment	search/algorithms/segmented_vector.h	/^    void add_segment() {$/;"	f	class:segmented_vector::SegmentedVector
add_shrink_limit_options_to_parser	search/merge_and_shrink/merge_and_shrink_heuristic.cc	/^void MergeAndShrinkHeuristic::add_shrink_limit_options_to_parser(OptionParser &parser) {$/;"	f	class:merge_and_shrink::MergeAndShrinkHeuristic
add_temporary_constraints	search/lp/lp_solver.cc	/^void LPSolver::add_temporary_constraints(const vector<LPConstraint> &constraints) {$/;"	f	class:lp::LPSolver
add_to_heap	search/heuristics/cea_heuristic.cc	/^inline void ContextEnhancedAdditiveHeuristic::add_to_heap($/;"	f	class:cea_heuristic::ContextEnhancedAdditiveHeuristic
add_top_k_option	search/search_engines/top_k_eager_search.cc	/^void add_top_k_option(OptionParser &parser) {$/;"	f	namespace:top_k_eager_search
add_transition	search/cegar/transition_updater.cc	/^void TransitionUpdater::add_transition($/;"	f	class:cegar::TransitionUpdater
add_transition	search/merge_and_shrink/fts_factory.cc	/^void FTSFactory::add_transition(int var_no, int label_no,$/;"	f	class:merge_and_shrink::FTSFactory
add_value_explanations	search/options/doc_store.cc	/^void DocStore::add_value_explanations(string k,$/;"	f	class:options::DocStore
add_vertex	search/bliss/graph.cc	/^Digraph::add_vertex(const unsigned int color)$/;"	f	class:bliss::Digraph
add_vertex	search/bliss/graph.cc	/^Graph::add_vertex(const unsigned int color)$/;"	f	class:bliss::Graph
add_virtual_pushes	search/algorithms/priority_queues.h	/^    virtual void add_virtual_pushes(int \/*num_extra_pushes*\/) {$/;"	f	class:priority_queues::HeapQueue
add_virtual_pushes	search/algorithms/priority_queues.h	/^    virtual void add_virtual_pushes(int num_extra_pushes) {$/;"	f	class:priority_queues::BucketQueue
add_virtual_pushes	search/algorithms/priority_queues.h	/^    void add_virtual_pushes(int num_extra_pushes) {$/;"	f	class:priority_queues::AdaptiveQueue
added_implied_precondition_counter	translate/translate.py	/^added_implied_precondition_counter = 0$/;"	v
additive_heuristic	search/cegar/split_selector.h	/^    std::unique_ptr<additive_heuristic::AdditiveHeuristic> additive_heuristic;$/;"	m	class:cegar::SplitSelector
additive_heuristic	search/cegar/split_selector.h	/^namespace additive_heuristic {$/;"	n
additive_heuristic	search/cegar/utils.h	/^namespace additive_heuristic {$/;"	n
additive_heuristic	search/heuristics/additive_heuristic.cc	/^namespace additive_heuristic {$/;"	n	file:
additive_heuristic	search/heuristics/additive_heuristic.h	/^namespace additive_heuristic {$/;"	n
adjust_heap_up	search/open_lists/epsilon_greedy_open_list.cc	/^static void adjust_heap_up(vector<HeapNode> &heap, size_t pos) {$/;"	f	file:
admissible	search/landmarks/landmark_count_heuristic.h	/^    const bool admissible;$/;"	m	class:landmarks::LandmarkCountHeuristic
affected	search/structural_symmetries/permutation.h	/^    std::vector<bool> affected;$/;"	m	class:Permutation
affected_vars_cycles	search/structural_symmetries/permutation.h	/^    std::vector<std::vector<int> > affected_vars_cycles;$/;"	m	class:Permutation
all_conditions	translate/normalize.py	/^def all_conditions(task):$/;"	f
all_dead_ends_are_reliable	search/evaluators/combining_evaluator.h	/^    bool all_dead_ends_are_reliable;$/;"	m	class:combining_evaluator::CombiningEvaluator
alloc_	search/ext/tree.hh	/^		tree_node_allocator alloc_;$/;"	m	class:tree
allocate_graphs_and_nodes	search/domain_transition_graph.cc	/^void DTGFactory::allocate_graphs_and_nodes(vector<DomainTransitionGraph *> &dtgs) {$/;"	f	class:DTGFactory
allow_unsafe_pruning	search/open_lists/tiebreaking_open_list.cc	/^    bool allow_unsafe_pruning;$/;"	m	class:TieBreakingOpenList	file:
always_consumed_by	search/operator_counting/state_equation_constraints.h	/^    std::set<int> always_consumed_by;$/;"	m	struct:operator_counting::Proposition
always_false	translate/simplify.py	/^always_false = object()$/;"	v
always_produced_by	search/operator_counting/state_equation_constraints.h	/^    std::set<int> always_produced_by;$/;"	m	struct:operator_counting::Proposition
always_true	translate/simplify.py	/^always_true = object()$/;"	v
any_cast	search/options/any.h	/^ValueType *any_cast(Any *operand) {$/;"	f	namespace:options
any_cast	search/options/any.h	/^ValueType any_cast(Any &operand) {$/;"	f	namespace:options
any_cast	search/options/any.h	/^inline ValueType any_cast(const Any &operand) {$/;"	f	namespace:options
any_cast	search/options/any.h	/^inline const ValueType *any_cast(const Any *operand) {$/;"	f	namespace:options
append_child	search/ext/tree.hh	/^iter tree<T, tree_node_allocator>::append_child(iter position)$/;"	f	class:tree
append_child	search/ext/tree.hh	/^iter tree<T, tree_node_allocator>::append_child(iter position, const T& x)$/;"	f	class:tree
append_child	search/ext/tree.hh	/^iter tree<T, tree_node_allocator>::append_child(iter position, iter other)$/;"	f	class:tree
append_children	search/ext/tree.hh	/^iter tree<T, tree_node_allocator>::append_children(iter position, sibling_iterator from, sibling_iterator to)$/;"	f	class:tree
applicable_operators	search/pdbs/match_tree.cc	/^    vector<const AbstractOperator *> applicable_operators;$/;"	m	struct:pdbs::MatchTree::Node	file:
applicable_operators	search/successor_generator.cc	/^    list<OperatorProxy> applicable_operators;$/;"	m	class:GeneratorLeaf	file:
apply_abstraction	search/merge_and_shrink/distances.cc	/^void Distances::apply_abstraction($/;"	f	class:merge_and_shrink::Distances
apply_abstraction	search/merge_and_shrink/factored_transition_system.cc	/^bool FactoredTransitionSystem::apply_abstraction($/;"	f	class:merge_and_shrink::FactoredTransitionSystem
apply_abstraction	search/merge_and_shrink/transition_system.cc	/^bool TransitionSystem::apply_abstraction($/;"	f	class:merge_and_shrink::TransitionSystem
apply_abstraction_to_lookup_table	search/merge_and_shrink/merge_and_shrink_representation.cc	/^void MergeAndShrinkRepresentationLeaf::apply_abstraction_to_lookup_table($/;"	f	class:merge_and_shrink::MergeAndShrinkRepresentationLeaf
apply_abstraction_to_lookup_table	search/merge_and_shrink/merge_and_shrink_representation.cc	/^void MergeAndShrinkRepresentationMerge::apply_abstraction_to_lookup_table($/;"	f	class:merge_and_shrink::MergeAndShrinkRepresentationMerge
apply_label_mapping	search/merge_and_shrink/label_equivalence_relation.cc	/^void LabelEquivalenceRelation::apply_label_mapping($/;"	f	class:merge_and_shrink::LabelEquivalenceRelation
apply_label_reduction	search/merge_and_shrink/factored_transition_system.cc	/^void FactoredTransitionSystem::apply_label_reduction($/;"	f	class:merge_and_shrink::FactoredTransitionSystem
apply_label_reduction	search/merge_and_shrink/transition_system.cc	/^void TransitionSystem::apply_label_reduction($/;"	f	class:merge_and_shrink::TransitionSystem
apply_mapping	translate/constraints.py	/^    def apply_mapping(self, m):$/;"	m	class:NegativeClause
apply_operator_and_propagate_labels	search/landmarks/landmark_factory_zhu_givan.cc	/^lm_set LandmarkFactoryZhuGivan::apply_operator_and_propagate_labels($/;"	f	class:landmarks::LandmarkFactoryZhuGivan
apply_s5	search/pruning/stubborn_sets_ec.cc	/^void StubbornSetsEC::apply_s5(int op_no, const State &state) {$/;"	f	class:stubborn_sets_ec::StubbornSetsEC
apply_to_axiom	translate/simplify.py	/^    def apply_to_axiom(self, axiom):$/;"	m	class:VarValueRenaming
apply_to_axioms	translate/simplify.py	/^    def apply_to_axioms(self, axioms):$/;"	m	class:VarValueRenaming
apply_to_goals	translate/simplify.py	/^    def apply_to_goals(self, goals):$/;"	m	class:VarValueRenaming
apply_to_init	translate/simplify.py	/^    def apply_to_init(self, init):$/;"	m	class:VarValueRenaming
apply_to_mutexes	translate/simplify.py	/^    def apply_to_mutexes(self, mutexes):$/;"	m	class:VarValueRenaming
apply_to_operators	translate/simplify.py	/^    def apply_to_operators(self, operators):$/;"	m	class:VarValueRenaming
apply_to_task	translate/simplify.py	/^    def apply_to_task(self, task):$/;"	m	class:VarValueRenaming
apply_to_task	translate/variable_order.py	/^    def apply_to_task(self, sas_task):$/;"	m	class:VariableOrder
apply_to_value_names	translate/simplify.py	/^    def apply_to_value_names(self, value_names):$/;"	m	class:VarValueRenaming
apply_to_variables	translate/simplify.py	/^    def apply_to_variables(self, variables):$/;"	m	class:VarValueRenaming
approximate_lookahead_orders	search/landmarks/landmark_factory_rpg_sasp.cc	/^void LandmarkFactoryRpgSasp::approximate_lookahead_orders($/;"	f	class:landmarks::LandmarkFactoryRpgSasp
approximate_reasonable_orders	search/landmarks/landmark_factory.cc	/^void LandmarkFactory::approximate_reasonable_orders($/;"	f	class:landmarks::LandmarkFactory
are_additive	search/pdbs/incremental_canonical_pdbs.h	/^    VariableAdditivity are_additive;$/;"	m	class:pdbs::IncrementalCanonicalPDBs
are_distances_computed	search/merge_and_shrink/distances.cc	/^bool Distances::are_distances_computed() const {$/;"	f	class:merge_and_shrink::Distances
are_facts_mutex	search/tasks/delegating_task.cc	/^bool DelegatingTask::are_facts_mutex(const FactPair &fact1, const FactPair &fact2) const {$/;"	f	class:tasks::DelegatingTask
are_facts_mutex	search/tasks/domain_abstracted_task.cc	/^bool DomainAbstractedTask::are_facts_mutex(const FactPair &, const FactPair &) const {$/;"	f	class:extra_tasks::DomainAbstractedTask
are_facts_mutex	search/tasks/plan_forbid_reformulated_task.cc	/^bool PlanForbidReformulatedTask::are_facts_mutex(const FactPair &fact1, const FactPair &fact2) const {$/;"	f	class:extra_tasks::PlanForbidReformulatedTask
are_facts_mutex	search/tasks/root_task.cc	/^bool RootTask::are_facts_mutex(const FactPair &fact1, const FactPair &fact2) const {$/;"	f	class:tasks::RootTask
are_mutex	search/globals.cc	/^bool are_mutex(const FactPair &a, const FactPair &b) {$/;"	f
are_patterns_additive	search/pdbs/max_additive_pdb_sets.cc	/^bool are_patterns_additive(const Pattern &pattern1,$/;"	f	namespace:pdbs
are_transitions_sorted_unique	search/merge_and_shrink/transition_system.cc	/^bool TransitionSystem::are_transitions_sorted_unique() const {$/;"	f	class:merge_and_shrink::TransitionSystem
arg_help	search/options/doc_store.h	/^    std::vector<ArgumentInfo> arg_help;$/;"	m	struct:options::DocStruct
arity	translate/invariants.py	/^    def arity(self):$/;"	m	class:Invariant
arity	translate/invariants.py	/^    def arity(self):$/;"	m	class:InvariantPart
array	search/bliss/heap.h	/^  unsigned int *array;$/;"	m	class:bliss::Heap
arrays_per_segment	search/algorithms/segmented_vector.h	/^    const size_t arrays_per_segment;$/;"	m	class:segmented_vector::SegmentedArrayVector
artificial_goal	search/heuristics/lm_cut_landmarks.h	/^    RelaxedProposition artificial_goal;$/;"	m	class:lm_cut_heuristic::LandmarkCutLandmarks
artificial_precondition	search/heuristics/lm_cut_landmarks.h	/^    RelaxedProposition artificial_precondition;$/;"	m	class:lm_cut_heuristic::LandmarkCutLandmarks
assign	search/bliss/bignum.h	/^  void assign(const int n) {mpz_set_si(v, n); }$/;"	f	class:bliss::BigNum
assign_id	search/landmarks/landmark_graph.h	/^    void assign_id(int new_id) {$/;"	f	class:landmarks::EdgeType::LandmarkNode
astar_search	search/cegar/abstract_search.cc	/^AbstractState *AbstractSearch::astar_search($/;"	f	class:cegar::AbstractSearch
at_limit	search/merge_and_shrink/shrink_bisimulation.h	/^    const AtLimit at_limit;$/;"	m	class:merge_and_shrink::ShrinkBisimulation
atomic_before_product	search/merge_and_shrink/merge_scoring_function_total_order.h	/^    bool atomic_before_product;$/;"	m	class:merge_and_shrink::MergeScoringFunctionTotalOrder
atomic_ts_order	search/merge_and_shrink/merge_scoring_function_total_order.h	/^    AtomicTSOrder atomic_ts_order;$/;"	m	class:merge_and_shrink::MergeScoringFunctionTotalOrder
aux_split_in_two	search/bliss/partition.cc	/^Partition::aux_split_in_two(Partition::Cell* const cell,$/;"	f	class:bliss::Partition
axiom_evaluator	search/state_registry.h	/^    AxiomEvaluator &axiom_evaluator;$/;"	m	class:StateRegistry
axiom_literals	search/axioms.h	/^    std::vector<std::vector<AxiomLiteral>> axiom_literals;$/;"	m	class:AxiomEvaluator
backwards_dijkstra	search/cegar/abstract_search.cc	/^void AbstractSearch::backwards_dijkstra(const AbstractStates goals) {$/;"	f	class:cegar::AbstractSearch
base_cost	search/heuristics/lm_cut_landmarks.h	/^    int base_cost; \/\/ 0 for axioms, 1 for regular operators$/;"	m	struct:lm_cut_heuristic::RelaxedOperator
base_cost	search/heuristics/relaxation_heuristic.h	/^    int base_cost;$/;"	m	struct:relaxation_heuristic::UnaryOperator
base_cost	search/landmarks/exploration.h	/^    int base_cost; \/\/ 0 for axioms, 1 for regular operators$/;"	m	struct:landmarks::ExUnaryOperator
base_priority	search/heuristics/cea_heuristic.cc	/^    int base_priority;$/;"	m	struct:cea_heuristic::LocalProblem	file:
begin	search/algorithms/equivalence_relation.h	/^    BlockListConstIter begin() const {return blocks.begin(); }$/;"	f	class:equivalence_relation::EquivalenceRelation
begin	search/algorithms/equivalence_relation.h	/^    ElementListConstIter begin() const {return elements.begin(); }$/;"	f	class:equivalence_relation::Block
begin	search/algorithms/equivalence_relation.h	/^    ElementListIter begin() {return elements.begin(); }$/;"	f	class:equivalence_relation::Block
begin	search/algorithms/ordered_set.h	/^    typename std::vector<T>::const_iterator begin() const {$/;"	f	class:ordered_set::OrderedSet
begin	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::pre_order_iterator tree<T, tree_node_allocator>::begin() const$/;"	f	class:tree
begin	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::sibling_iterator tree<T, tree_node_allocator>::begin(const iterator_base& pos) const$/;"	f	class:tree
begin	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::sibling_iterator tree<T, tree_node_allocator>::iterator_base::begin() const$/;"	f	class:tree::iterator_base
begin	search/merge_and_shrink/factored_transition_system.h	/^    FTSConstIterator begin() const {$/;"	f	class:merge_and_shrink::FactoredTransitionSystem
begin	search/merge_and_shrink/label_equivalence_relation.h	/^    LabelConstIter begin() const {$/;"	f	class:merge_and_shrink::LabelGroup
begin	search/merge_and_shrink/transition_system.h	/^    TSConstIterator begin() const {$/;"	f	class:merge_and_shrink::TransitionSystem
begin	search/options/registries.h	/^    Map::const_iterator begin() const {$/;"	f	class:options::PluginTypeRegistry
begin	search/per_state_information.h	/^    const_iterator begin(const StateRegistry *registry) const {$/;"	f	class:PerStateInformation
begin	search/task_proxy.h	/^    FactsProxyIterator begin() const {$/;"	f	class:FactsProxy
begin	search/task_proxy.h	/^inline ProxyIterator<ProxyCollection> begin(ProxyCollection &collection) {$/;"	f
begin_breadth_first	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::breadth_first_queued_iterator tree<T, tree_node_allocator>::begin_breadth_first() const$/;"	f	class:tree
begin_fixed	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::fixed_depth_iterator tree<T, tree_node_allocator>::begin_fixed(const iterator_base& pos, unsigned int dp) const$/;"	f	class:tree
begin_leaf	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::leaf_iterator tree<T, tree_node_allocator>::begin_leaf() const$/;"	f	class:tree
begin_leaf	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::leaf_iterator tree<T, tree_node_allocator>::begin_leaf(const iterator_base& top) const$/;"	f	class:tree
begin_post	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::post_order_iterator tree<T, tree_node_allocator>::begin_post() const$/;"	f	class:tree
best_bound	search/search_engines/iterated_search.h	/^    int best_bound;$/;"	m	class:iterated_search::IteratedSearch
best_checked	search/bliss/graph.h	/^    bool best_checked;$/;"	m	class:bliss::AbstractGraph::CR_CEP
best_fitness	search/pdbs/pattern_collection_generator_genetic.h	/^    double best_fitness;$/;"	m	class:pdbs::PatternCollectionGeneratorGenetic
best_heuristic_values	search/search_progress.h	/^    std::unordered_map<const Heuristic *, int> best_heuristic_values;$/;"	m	class:SearchProgress
best_path_automorphism	search/bliss/graph.h	/^  unsigned int *best_path_automorphism;$/;"	m	class:bliss::AbstractGraph
best_path_labeling	search/bliss/graph.h	/^  unsigned int *best_path_labeling;$/;"	m	class:bliss::AbstractGraph
best_path_labeling_inv	search/bliss/graph.h	/^  unsigned int *best_path_labeling_inv;$/;"	m	class:bliss::AbstractGraph
best_path_orbits	search/bliss/graph.h	/^  Orbit         best_path_orbits;$/;"	m	class:bliss::AbstractGraph
best_patterns	search/pdbs/pattern_collection_generator_genetic.h	/^    std::shared_ptr<PatternCollection> best_patterns;$/;"	m	class:pdbs::PatternCollectionGeneratorGenetic
bin_index	search/algorithms/int_packer.cc	/^    int bin_index;$/;"	m	class:int_packer::IntPacker::VariableInfo	file:
bin_packing	search/pdbs/pattern_collection_generator_genetic.cc	/^void PatternCollectionGeneratorGenetic::bin_packing() {$/;"	f	class:pdbs::PatternCollectionGeneratorGenetic
bit_index	search/algorithms/dynamic_bitset.h	/^    static std::size_t bit_index(std::size_t pos) {$/;"	f	class:dynamic_bitset::DynamicBitset
bit_mask	search/algorithms/dynamic_bitset.h	/^    static Block bit_mask(std::size_t pos) {$/;"	f	class:dynamic_bitset::DynamicBitset
bits_per_block	search/algorithms/dynamic_bitset.h	/^    static const int bits_per_block = std::numeric_limits<Block>::digits;$/;"	m	class:dynamic_bitset::DynamicBitset
blind_search_heuristic	search/heuristics/blind_search_heuristic.cc	/^namespace blind_search_heuristic {$/;"	n	file:
blind_search_heuristic	search/heuristics/blind_search_heuristic.h	/^namespace blind_search_heuristic {$/;"	n
bliss	search/bliss/bignum.h	/^namespace bliss {$/;"	n
bliss	search/bliss/defs.cc	/^namespace bliss {$/;"	n	file:
bliss	search/bliss/defs.h	/^namespace bliss {$/;"	n
bliss	search/bliss/graph.cc	/^namespace bliss {$/;"	n	file:
bliss	search/bliss/graph.h	/^namespace bliss {$/;"	n
bliss	search/bliss/heap.cc	/^namespace bliss {$/;"	n	file:
bliss	search/bliss/heap.h	/^namespace bliss {$/;"	n
bliss	search/bliss/kqueue.h	/^namespace bliss {$/;"	n
bliss	search/bliss/kstack.h	/^namespace bliss {$/;"	n
bliss	search/bliss/orbit.cc	/^namespace bliss {$/;"	n	file:
bliss	search/bliss/orbit.h	/^namespace bliss {$/;"	n
bliss	search/bliss/partition.cc	/^namespace bliss {$/;"	n	file:
bliss	search/bliss/partition.h	/^namespace bliss {$/;"	n
bliss	search/bliss/timer.cc	/^namespace bliss {$/;"	n	file:
bliss	search/bliss/timer.h	/^namespace bliss {$/;"	n
bliss	search/bliss/uintseqhash.cc	/^namespace bliss {$/;"	n	file:
bliss	search/bliss/uintseqhash.h	/^namespace bliss {$/;"	n
bliss	search/bliss/utils.cc	/^namespace bliss {$/;"	n	file:
bliss	search/bliss/utils.h	/^namespace bliss {$/;"	n
bliss	search/structural_symmetries/graph_creator.h	/^namespace bliss {$/;"	n
block_index	search/algorithms/dynamic_bitset.h	/^    static std::size_t block_index(std::size_t pos) {$/;"	f	class:dynamic_bitset::DynamicBitset
block_name	search/utils/logging.h	/^    std::string block_name;$/;"	m	class:utils::TraceBlock
block_stack	search/utils/logging.cc	/^    vector<string> block_stack;$/;"	m	class:utils::MemoryTracer	file:
blocks	search/algorithms/dynamic_bitset.h	/^    std::vector<Block> blocks;$/;"	m	class:dynamic_bitset::DynamicBitset
blocks	search/algorithms/equivalence_relation.h	/^    std::list<Block> blocks;$/;"	m	class:equivalence_relation::EquivalenceRelation
boost_amount	search/open_lists/alternation_open_list.cc	/^    const int boost_amount;$/;"	m	class:AlternationOpenList	file:
boost_preferred	search/open_lists/alternation_open_list.cc	/^void AlternationOpenList<Entry>::boost_preferred() {$/;"	f	class:AlternationOpenList
boost_preferred	search/open_lists/open_list.h	/^void OpenList<Entry>::boost_preferred() {$/;"	f	class:OpenList
bound	search/search_engine.h	/^    int bound;$/;"	m	class:SearchEngine
bounds	search/options/doc_store.h	/^    Bounds bounds;$/;"	m	struct:options::ArgumentInfo
breadth_first_iterator	search/ext/tree.hh	/^		typedef breadth_first_queued_iterator breadth_first_iterator;$/;"	t	class:tree
breadth_first_queued_iterator	search/ext/tree.hh	/^		class breadth_first_queued_iterator : public iterator_base {$/;"	c	class:tree
breadth_first_queued_iterator	search/ext/tree.hh	/^tree<T, tree_node_allocator>::breadth_first_queued_iterator::breadth_first_queued_iterator()$/;"	f	class:tree::breadth_first_queued_iterator
breadth_first_queued_iterator	search/ext/tree.hh	/^tree<T, tree_node_allocator>::breadth_first_queued_iterator::breadth_first_queued_iterator(const iterator_base& other)$/;"	f	class:tree::breadth_first_queued_iterator
breadth_first_queued_iterator	search/ext/tree.hh	/^tree<T, tree_node_allocator>::breadth_first_queued_iterator::breadth_first_queued_iterator(tree_node *tn)$/;"	f	class:tree::breadth_first_queued_iterator
breadth_first_search	search/merge_and_shrink/distances.cc	/^static void breadth_first_search($/;"	f	namespace:merge_and_shrink
bt_stack	search/bliss/partition.h	/^  std::vector<BacktrackInfo> bt_stack;$/;"	m	class:bliss::Partition
buckets	search/algorithms/priority_queues.h	/^    std::vector<Bucket> buckets;$/;"	m	class:priority_queues::BucketQueue
buckets	search/open_lists/pareto_open_list.cc	/^    BucketMap buckets;$/;"	m	class:ParetoOpenList	file:
buckets	search/open_lists/standard_scalar_open_list.cc	/^    map<int, Bucket> buckets;$/;"	m	class:StandardScalarOpenList	file:
buffer	search/global_state.h	/^    const PackedStateBin *buffer;$/;"	m	class:GlobalState
build	search/cegar/abstraction.cc	/^void Abstraction::build(utils::RandomNumberGenerator &rng) {$/;"	f	class:cegar::Abstraction
build	search/merge_and_shrink/merge_and_shrink_heuristic.cc	/^void MergeAndShrinkHeuristic::build(const utils::Timer &timer) {$/;"	f	class:merge_and_shrink::MergeAndShrinkHeuristic
build_DNF	translate/normalize.py	/^def build_DNF(task):$/;"	f
build_abstract_operators	search/pdbs/pattern_database.cc	/^void PatternDatabase::build_abstract_operators($/;"	f	class:pdbs::PatternDatabase
build_abstractions	search/cegar/cost_saturation.cc	/^void CostSaturation::build_abstractions($/;"	f	class:cegar::CostSaturation
build_disjunction_classes	search/landmarks/landmark_factory_rpg_sasp.cc	/^void LandmarkFactoryRpgSasp::build_disjunction_classes(const TaskProxy &task_proxy) {$/;"	f	class:landmarks::LandmarkFactoryRpgSasp
build_domain_abstracted_task	search/cegar/subtask_generators.cc	/^shared_ptr<AbstractTask> LandmarkDecomposition::build_domain_abstracted_task($/;"	f	class:cegar::LandmarkDecomposition
build_domain_abstracted_task	search/tasks/domain_abstracted_task_factory.cc	/^shared_ptr<AbstractTask> build_domain_abstracted_task($/;"	f	namespace:extra_tasks
build_dtg_successors	search/landmarks/landmark_factory_rpg_sasp.cc	/^void LandmarkFactoryRpgSasp::build_dtg_successors(const TaskProxy &task_proxy) {$/;"	f	class:landmarks::LandmarkFactoryRpgSasp
build_dtgs	search/domain_transition_graph.cc	/^vector<DomainTransitionGraph *> DTGFactory::build_dtgs() {$/;"	f	class:DTGFactory
build_dtgs	search/pruning/stubborn_sets_ec.cc	/^vector<StubbornDTG> build_dtgs(TaskProxy task_proxy) {$/;"	f	namespace:stubborn_sets_ec
build_dtgs	translate/simplify.py	/^def build_dtgs(task):$/;"	f
build_exploration_rules	translate/normalize.py	/^def build_exploration_rules(task):$/;"	f
build_implied_facts	translate/translate.py	/^def build_implied_facts(strips_to_sas, groups, mutex_groups):$/;"	f
build_label_equivalence_relation	search/merge_and_shrink/fts_factory.cc	/^void FTSFactory::build_label_equivalence_relation($/;"	f	class:merge_and_shrink::FTSFactory
build_mutex_key	translate/translate.py	/^def build_mutex_key(strips_to_sas, groups):$/;"	f
build_patterns	search/pdbs/pattern_collection_generator_systematic.cc	/^void PatternCollectionGeneratorSystematic::build_patterns($/;"	f	class:pdbs::PatternCollectionGeneratorSystematic
build_patterns_naive	search/pdbs/pattern_collection_generator_systematic.cc	/^void PatternCollectionGeneratorSystematic::build_patterns_naive($/;"	f	class:pdbs::PatternCollectionGeneratorSystematic
build_pm_ops	search/landmarks/landmark_factory_h_m.cc	/^void LandmarkFactoryHM::build_pm_ops(const TaskProxy &task_proxy) {$/;"	f	class:landmarks::LandmarkFactoryHM
build_problem_for_goal	search/heuristics/cea_heuristic.cc	/^LocalProblem *ContextEnhancedAdditiveHeuristic::build_problem_for_goal() const {$/;"	f	class:cea_heuristic::ContextEnhancedAdditiveHeuristic
build_problem_for_variable	search/heuristics/cea_heuristic.cc	/^LocalProblem *ContextEnhancedAdditiveHeuristic::build_problem_for_variable($/;"	f	class:cea_heuristic::ContextEnhancedAdditiveHeuristic
build_propositions	search/operator_counting/state_equation_constraints.cc	/^void StateEquationConstraints::build_propositions(const TaskProxy &task_proxy) {$/;"	f	class:operator_counting::StateEquationConstraints
build_reachability_map	search/pruning/stubborn_sets_ec.cc	/^void StubbornSetsEC::build_reachability_map(const TaskProxy &task_proxy) {$/;"	f	class:stubborn_sets_ec::StubbornSetsEC
build_relaxed_operator	search/heuristics/lm_cut_landmarks.cc	/^void LandmarkCutLandmarks::build_relaxed_operator(const OperatorProxy &op) {$/;"	f	class:lm_cut_heuristic::LandmarkCutLandmarks
build_relaxed_plan_graph_with_labels	search/landmarks/landmark_factory_zhu_givan.cc	/^LandmarkFactoryZhuGivan::PropositionLayer LandmarkFactoryZhuGivan::build_relaxed_plan_graph_with_labels($/;"	f	class:landmarks::LandmarkFactoryZhuGivan
build_renaming	translate/simplify.py	/^def build_renaming(dtgs):$/;"	f
build_rules	translate/normalize.py	/^    def build_rules(self, rules):$/;"	m	class:AxiomConditionProxy
build_rules	translate/normalize.py	/^    def build_rules(self, rules):$/;"	m	class:EffectConditionProxy
build_rules	translate/normalize.py	/^    def build_rules(self, rules):$/;"	m	class:GoalConditionProxy
build_rules	translate/normalize.py	/^    def build_rules(self, rules):$/;"	m	class:PreconditionProxy
build_sas_operator	translate/translate.py	/^def build_sas_operator(name, condition, effects_by_variable, cost, ranges,$/;"	f
build_sga_patterns	search/pdbs/pattern_collection_generator_systematic.cc	/^void PatternCollectionGeneratorSystematic::build_sga_patterns($/;"	f	class:pdbs::PatternCollectionGeneratorSystematic
build_state_data	search/merge_and_shrink/fts_factory.cc	/^void FTSFactory::build_state_data(VariableProxy var) {$/;"	f	class:merge_and_shrink::FTSFactory
build_transitions	search/merge_and_shrink/fts_factory.cc	/^void FTSFactory::build_transitions() {$/;"	f	class:merge_and_shrink::FTSFactory
build_transitions_for_irrelevant_ops	search/merge_and_shrink/fts_factory.cc	/^void FTSFactory::build_transitions_for_irrelevant_ops(VariableProxy variable) {$/;"	f	class:merge_and_shrink::FTSFactory
build_transitions_for_operator	search/merge_and_shrink/fts_factory.cc	/^void FTSFactory::build_transitions_for_operator(OperatorProxy op) {$/;"	f	class:merge_and_shrink::FTSFactory
build_translation_key	translate/fact_groups.py	/^def build_translation_key(groups):$/;"	f
build_unary_operators	search/heuristics/relaxation_heuristic.cc	/^void RelaxationHeuristic::build_unary_operators(const OperatorProxy &op, int op_no) {$/;"	f	class:relaxation_heuristic::RelaxationHeuristic
build_unary_operators	search/landmarks/exploration.cc	/^void Exploration::build_unary_operators(const OperatorProxy &op) {$/;"	f	class:landmarks::Exploration
cache	search/evaluation_context.h	/^    HeuristicCache cache;$/;"	m	class:EvaluationContext
cache	search/heuristics/cg_cache.h	/^    std::vector<std::vector<int>> cache;$/;"	m	class:cg_heuristic::CGCache
cache	search/heuristics/cg_heuristic.h	/^    CGCache *cache;$/;"	m	class:cg_heuristic::CGHeuristic
cache_h_values	search/heuristic.h	/^    bool cache_h_values;$/;"	m	class:Heuristic
cache_hits	search/heuristics/cg_heuristic.h	/^    int cache_hits;$/;"	m	class:cg_heuristic::CGHeuristic
cache_misses	search/heuristics/cg_heuristic.h	/^    int cache_misses;$/;"	m	class:cg_heuristic::CGHeuristic
cached_entries	search/per_state_information.h	/^    mutable segmented_vector::SegmentedVector<Entry> *cached_entries;$/;"	m	class:PerStateInformation
cached_initial_state	search/state_registry.h	/^    GlobalState *cached_initial_state;$/;"	m	class:StateRegistry
cached_registry	search/per_state_information.h	/^    mutable const StateRegistry *cached_registry;$/;"	m	class:PerStateInformation
calc_achievers	search/landmarks/landmark_factory.cc	/^void LandmarkFactory::calc_achievers(const TaskProxy &task_proxy, Exploration &exploration) {$/;"	f	class:landmarks::LandmarkFactory
calc_achievers	search/landmarks/landmark_factory_h_m.cc	/^void LandmarkFactoryHM::calc_achievers(const TaskProxy &task_proxy, Exploration &) {$/;"	f	class:landmarks::LandmarkFactoryHM
calculate_important_vars	translate/variable_order.py	/^    def calculate_important_vars(self, goal):$/;"	m	class:CausalGraph
calculate_lms_cost	search/landmarks/landmark_factory.cc	/^int LandmarkFactory::calculate_lms_cost() const {$/;"	f	class:landmarks::LandmarkFactory
calculate_plan_cost	search/globals.cc	/^int calculate_plan_cost(const vector<const GlobalOperator *> &plan) {$/;"	f
calculate_preferred	search/evaluation_context.h	/^    bool calculate_preferred;$/;"	m	class:EvaluationContext
calculate_topological_pseudo_sort	translate/variable_order.py	/^    def calculate_topological_pseudo_sort(self, sccs):$/;"	m	class:CausalGraph
can_conflict	search/pruning/stubborn_sets.cc	/^bool StubbornSets::can_conflict(int op1_no, int op2_no) const {$/;"	f	class:stubborn_sets::StubbornSets
can_disable	search/pruning/stubborn_sets.cc	/^bool StubbornSets::can_disable(int op1_no, int op2_no) const {$/;"	f	class:stubborn_sets::StubbornSets
can_join	translate/greedy_join.py	/^    def can_join(self):$/;"	m	class:CostMatrix
canonical_form	search/bliss/graph.cc	/^AbstractGraph::canonical_form(Stats& stats,$/;"	f	class:bliss::AbstractGraph
canonical_pdbs	search/pdbs/canonical_pdbs_heuristic.h	/^    CanonicalPDBs canonical_pdbs;$/;"	m	class:pdbs::CanonicalPDBsHeuristic
canonical_registered_states	search/state_registry.h	/^    StateIDSet canonical_registered_states;$/;"	m	class:StateRegistry
canonical_state_data_pool	search/state_registry.h	/^    segmented_vector::SegmentedArrayVector<PackedStateBin> canonical_state_data_pool;$/;"	m	class:StateRegistry
capacity	search/bliss/kstack.h	/^  int capacity() {return kapacity; }$/;"	f	class:bliss::KStack
cartesian_product	translate/pddl/effects.py	/^def cartesian_product(*sequences):$/;"	f
cartesian_product	translate/tools.py	/^def cartesian_product(sequences):$/;"	f
causal_graph_cache	search/causal_graph.cc	/^                     unique_ptr<CausalGraph>> causal_graph_cache;$/;"	v	file:
cea_heuristic	search/domain_transition_graph.h	/^namespace cea_heuristic {$/;"	n
cea_heuristic	search/heuristics/cea_heuristic.cc	/^namespace cea_heuristic {$/;"	n	file:
cea_heuristic	search/heuristics/cea_heuristic.h	/^namespace cea_heuristic {$/;"	n
cegar	search/cegar/abstract_search.cc	/^namespace cegar {$/;"	n	file:
cegar	search/cegar/abstract_search.h	/^namespace cegar {$/;"	n
cegar	search/cegar/abstract_state.cc	/^namespace cegar {$/;"	n	file:
cegar	search/cegar/abstract_state.h	/^namespace cegar {$/;"	n
cegar	search/cegar/abstraction.cc	/^namespace cegar {$/;"	n	file:
cegar	search/cegar/abstraction.h	/^namespace cegar {$/;"	n
cegar	search/cegar/additive_cartesian_heuristic.cc	/^namespace cegar {$/;"	n	file:
cegar	search/cegar/additive_cartesian_heuristic.h	/^namespace cegar {$/;"	n
cegar	search/cegar/cartesian_heuristic_function.cc	/^namespace cegar {$/;"	n	file:
cegar	search/cegar/cartesian_heuristic_function.h	/^namespace cegar {$/;"	n
cegar	search/cegar/cost_saturation.cc	/^namespace cegar {$/;"	n	file:
cegar	search/cegar/cost_saturation.h	/^namespace cegar {$/;"	n
cegar	search/cegar/domains.cc	/^namespace cegar {$/;"	n	file:
cegar	search/cegar/domains.h	/^namespace cegar {$/;"	n
cegar	search/cegar/refinement_hierarchy.cc	/^namespace cegar {$/;"	n	file:
cegar	search/cegar/refinement_hierarchy.h	/^namespace cegar {$/;"	n
cegar	search/cegar/split_selector.cc	/^namespace cegar {$/;"	n	file:
cegar	search/cegar/split_selector.h	/^namespace cegar {$/;"	n
cegar	search/cegar/subtask_generators.cc	/^namespace cegar {$/;"	n	file:
cegar	search/cegar/subtask_generators.h	/^namespace cegar {$/;"	n
cegar	search/cegar/transition.h	/^namespace cegar {$/;"	n
cegar	search/cegar/transition_updater.cc	/^namespace cegar {$/;"	n	file:
cegar	search/cegar/transition_updater.h	/^namespace cegar {$/;"	n
cegar	search/cegar/utils.cc	/^namespace cegar {$/;"	n	file:
cegar	search/cegar/utils.h	/^namespace cegar {$/;"	n
cegar	search/cegar/utils_landmarks.cc	/^namespace cegar {$/;"	n	file:
cegar	search/cegar/utils_landmarks.h	/^namespace cegar {$/;"	n
cegar	search/options/option_parser.cc	/^namespace cegar {$/;"	n	file:
cells	search/bliss/partition.h	/^  Cell* cells;$/;"	m	class:bliss::Partition
cert_add	search/bliss/graph.cc	/^AbstractGraph::cert_add(const unsigned int v1,$/;"	f	class:bliss::AbstractGraph
cert_add_redundant	search/bliss/graph.cc	/^AbstractGraph::cert_add_redundant(const unsigned int v1,$/;"	f	class:bliss::AbstractGraph
certificate_best_path	search/bliss/graph.h	/^  std::vector<unsigned int> certificate_best_path;$/;"	m	class:bliss::AbstractGraph
certificate_current_path	search/bliss/graph.h	/^  std::vector<unsigned int> certificate_current_path;$/;"	m	class:bliss::AbstractGraph
certificate_first_path	search/bliss/graph.h	/^  std::vector<unsigned int> certificate_first_path;$/;"	m	class:bliss::AbstractGraph
certificate_index	search/bliss/graph.cc	/^  unsigned int certificate_index;$/;"	m	class:bliss::TreeNode	file:
certificate_index	search/bliss/graph.cc	/^  unsigned int certificate_index;$/;"	m	struct:bliss::__anon3	file:
certificate_index	search/bliss/graph.h	/^  unsigned int certificate_index;$/;"	m	class:bliss::AbstractGraph
cg_heuristic	search/domain_transition_graph.h	/^namespace cg_heuristic {$/;"	n
cg_heuristic	search/heuristics/cg_cache.cc	/^namespace cg_heuristic {$/;"	n	file:
cg_heuristic	search/heuristics/cg_cache.h	/^namespace cg_heuristic {$/;"	n
cg_heuristic	search/heuristics/cg_heuristic.cc	/^namespace cg_heuristic {$/;"	n	file:
cg_heuristic	search/heuristics/cg_heuristic.h	/^namespace cg_heuristic {$/;"	n
change_color	search/bliss/graph.cc	/^Digraph::change_color(const unsigned int vertex, const unsigned int new_color)$/;"	f	class:bliss::Digraph
change_color	search/bliss/graph.cc	/^Graph::change_color(const unsigned int vertex, const unsigned int color)$/;"	f	class:bliss::Graph
change_parts	translate/pddl/conditions.py	/^    def change_parts(self, parts):$/;"	m	class:ConstantCondition
change_parts	translate/pddl/conditions.py	/^    def change_parts(self, parts):$/;"	m	class:JunctorCondition
change_parts	translate/pddl/conditions.py	/^    def change_parts(self, parts):$/;"	m	class:Literal
change_parts	translate/pddl/conditions.py	/^    def change_parts(self, parts):$/;"	m	class:QuantifiedCondition
checkSeverity	search/lp/lp_internals.cc	/^    virtual void checkSeverity() {$/;"	f	class:lp::ErrorCatchingCoinMessageHandler
check_atom_consistency	translate/pddl_parser/parsing_functions.py	/^def check_atom_consistency(atom, same_truth_value, other_truth_value, atom_is_true=True):$/;"	f
check_balance	translate/invariants.py	/^    def check_balance(self, balance_checker, enqueue_func):$/;"	m	class:Invariant
check_bounds	search/options/option_parser.cc	/^void OptionParser::check_bounds<double>($/;"	f	class:options::OptionParser
check_bounds	search/options/option_parser.cc	/^void OptionParser::check_bounds<int>($/;"	f	class:options::OptionParser
check_bounds	search/options/option_parser.h	/^void OptionParser::check_bounds($/;"	f	class:options::OptionParser
check_fact	search/global_operator.cc	/^static void check_fact(int var, int val) {$/;"	f	file:
check_for_duplicates	translate/pddl_parser/parsing_functions.py	/^def check_for_duplicates(elements, errmsg, finalmsg):$/;"	f
check_goal_and_set_plan	search/search_engine.cc	/^bool SearchEngine::check_goal_and_set_plan(const GlobalState &state,$/;"	f	class:SearchEngine
check_hillclimbing_options	search/pdbs/pattern_collection_generator_hillclimbing.cc	/^void check_hillclimbing_options($/;"	f	namespace:pdbs
check_interrupt	search/search_engines/top_k_eager_search.h	/^	bool check_interrupt(int optimal_solution_cost, int g_n, int f_u) {	$/;"	f	struct:top_k_eager_search::SearchControl
check_lost_landmark_children_needed_again	search/landmarks/landmark_status_manager.cc	/^bool LandmarkStatusManager::check_lost_landmark_children_needed_again(const LandmarkNode &node) const {$/;"	f	class:landmarks::LandmarkStatusManager
check_magic	search/globals.cc	/^void check_magic(istream &in, string magic) {$/;"	f
check_node_orders_disobeyed	search/landmarks/landmark_count_heuristic.cc	/^bool LandmarkCountHeuristic::check_node_orders_disobeyed(const LandmarkNode &node,$/;"	f	class:landmarks::LandmarkCountHeuristic
check_progress	search/search_progress.cc	/^bool SearchProgress::check_progress(const EvaluationContext &eval_context) {$/;"	f	class:SearchProgress
check_tuple_in_tuple	search/heuristics/hm_heuristic.cc	/^int HMHeuristic::check_tuple_in_tuple($/;"	f	class:hm_heuristic::HMHeuristic
child	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::sibling_iterator tree<T, tree_node_allocator>::child(const iterator_base& it, unsigned int num) $/;"	f	class:tree
children	search/landmarks/landmark_graph.h	/^    std::unordered_map<LandmarkNode *, EdgeType> children;$/;"	m	class:landmarks::EdgeType::LandmarkNode
children_state	search/domain_transition_graph.h	/^    std::vector<int> children_state;$/;"	m	struct:ValueNode
choose	search/utils/rng.h	/^    typename std::vector<T>::const_iterator choose(const std::vector<T> &vec) {$/;"	f	class:utils::RandomNumberGenerator
choose	search/utils/rng.h	/^    typename std::vector<T>::iterator choose(std::vector<T> &vec) {$/;"	f	class:utils::RandomNumberGenerator
choose_groups	translate/fact_groups.py	/^def choose_groups(groups, reachable_facts):$/;"	f
clean	search/bliss/kstack.h	/^  void clean() {cursor = entries; }$/;"	f	class:bliss::KStack
clear	search/algorithms/ordered_set.h	/^    void clear() {$/;"	f	class:ordered_set::OrderedSet
clear	search/algorithms/priority_queues.h	/^    virtual void clear() {$/;"	f	class:priority_queues::BucketQueue
clear	search/algorithms/priority_queues.h	/^    virtual void clear() {$/;"	f	class:priority_queues::HeapQueue
clear	search/algorithms/priority_queues.h	/^    void clear() {$/;"	f	class:priority_queues::AdaptiveQueue
clear	search/bliss/heap.h	/^  void clear() {n = 0;}$/;"	f	class:bliss::Heap
clear	search/bliss/kqueue.h	/^void KQueue<Type>::clear()$/;"	f	class:bliss::KQueue
clear	search/ext/tree.hh	/^void tree<T, tree_node_allocator>::clear()$/;"	f	class:tree
clear	search/lp/lp_solver.cc	/^void LPConstraint::clear() {$/;"	f	class:lp::LPConstraint
clear	search/merge_and_shrink/label_equivalence_relation.h	/^    void clear() {$/;"	f	class:merge_and_shrink::LabelGroup
clear	search/open_lists/alternation_open_list.cc	/^void AlternationOpenList<Entry>::clear() {$/;"	f	class:AlternationOpenList
clear	search/open_lists/epsilon_greedy_open_list.cc	/^void EpsilonGreedyOpenList<Entry>::clear() {$/;"	f	class:EpsilonGreedyOpenList
clear	search/open_lists/pareto_open_list.cc	/^void ParetoOpenList<Entry>::clear() {$/;"	f	class:ParetoOpenList
clear	search/open_lists/standard_scalar_open_list.cc	/^void StandardScalarOpenList<Entry>::clear() {$/;"	f	class:StandardScalarOpenList
clear	search/open_lists/tiebreaking_open_list.cc	/^void TieBreakingOpenList<Entry>::clear() {$/;"	f	class:TieBreakingOpenList
clear	search/open_lists/type_based_open_list.cc	/^void TypeBasedOpenList<Entry>::clear() {$/;"	f	class:TypeBasedOpenList
clear_distances	search/merge_and_shrink/distances.cc	/^void Distances::clear_distances() {$/;"	f	class:merge_and_shrink::Distances
clear_ivs	search/bliss/partition.cc	/^Partition::clear_ivs(Cell* const cell)$/;"	f	class:bliss::Partition
clear_mask	search/algorithms/int_packer.cc	/^    Bin clear_mask;$/;"	m	class:int_packer::IntPacker::VariableInfo	file:
clear_temporary_constraints	search/lp/lp_solver.cc	/^void LPSolver::clear_temporary_constraints() {$/;"	f	class:lp::LPSolver
clear_temporary_data	search/lp/lp_solver.cc	/^void LPSolver::clear_temporary_data() {$/;"	f	class:lp::LPSolver
clone	search/options/any.h	/^        virtual std::unique_ptr<Placeholder> clone() const {$/;"	f	class:options::Any::Holder
clone	translate/pddl/axioms.py	/^    def clone(self):$/;"	m	class:PropositionalAxiom
clone_owner	translate/normalize.py	/^    def clone_owner(self):$/;"	m	class:ConditionProxy
close	search/search_space.cc	/^void SearchNode::close() {$/;"	f	class:SearchNode
cmp	search/bliss/graph.cc	/^Digraph::cmp(Digraph& other)$/;"	f	class:bliss::Digraph
cmp	search/bliss/graph.cc	/^Graph::cmp(Graph& other)$/;"	f	class:bliss::Graph
cmp	search/bliss/uintseqhash.h	/^  int cmp(const UintSeqHash &other) const {$/;"	f	class:bliss::UintSeqHash
cmp_to_best_path	search/bliss/graph.cc	/^  int cmp_to_best_path;$/;"	m	class:bliss::TreeNode	file:
coefficients	search/lp/lp_solver.h	/^    std::vector<double> coefficients;$/;"	m	class:lp::LPConstraint
col_lb	search/lp/lp_solver.h	/^    std::vector<double> col_lb;$/;"	m	class:lp::LPSolver
col_ub	search/lp/lp_solver.h	/^    std::vector<double> col_ub;$/;"	m	class:lp::LPSolver
collect_all_mutex_groups	translate/fact_groups.py	/^def collect_all_mutex_groups(groups, atoms):$/;"	f
collect_all_side_effects	search/domain_transition_graph.cc	/^void DTGFactory::collect_all_side_effects(vector<DomainTransitionGraph *> &dtgs) {$/;"	f	class:DTGFactory
collect_ancestors	search/landmarks/landmark_factory.cc	/^void LandmarkFactory::collect_ancestors($/;"	f	class:landmarks::LandmarkFactory
collect_f_h_buckets	search/merge_and_shrink/shrink_fh.cc	/^static void collect_f_h_buckets($/;"	f	namespace:merge_and_shrink
collect_h_buckets	search/merge_and_shrink/shrink_fh.cc	/^static void collect_h_buckets($/;"	f	namespace:merge_and_shrink
collect_helpful_actions	search/landmarks/exploration.cc	/^void Exploration::collect_helpful_actions($/;"	f	class:landmarks::Exploration
collect_lm_leaves	search/landmarks/landmark_count_heuristic.cc	/^vector<FactPair> LandmarkCountHeuristic::collect_lm_leaves($/;"	f	class:landmarks::LandmarkCountHeuristic
collect_preferred_operators	search/search_engine.cc	/^ordered_set::OrderedSet<const GlobalOperator *> collect_preferred_operators($/;"	f
collect_relaxed_plan	search/landmarks/exploration.cc	/^void Exploration::collect_relaxed_plan(ExProposition *goal,$/;"	f	class:landmarks::Exploration
collect_side_effects	search/domain_transition_graph.cc	/^void DTGFactory::collect_side_effects(DomainTransitionGraph *dtg,$/;"	f	class:DTGFactory
collect_transition_side_effects	search/domain_transition_graph.h	/^    bool collect_transition_side_effects;$/;"	m	class:DTGFactory
collected_time	search/utils/timer.h	/^    double collected_time;$/;"	m	class:utils::Timer
collection	search/task_proxy.h	/^    const ProxyCollection *collection;$/;"	m	class:ProxyIterator
collection_dominates	search/pdbs/dominance_pruning.cc	/^bool collection_dominates(const PDBCollection &superset,$/;"	f	namespace:pdbs
collection_max_size	search/pdbs/pattern_collection_generator_hillclimbing.h	/^    const int collection_max_size;$/;"	m	class:pdbs::PatternCollectionGeneratorHillclimbing
color	search/bliss/graph.h	/^    unsigned int color;$/;"	m	class:bliss::Digraph::Vertex
color	search/bliss/graph.h	/^    unsigned int color;$/;"	m	class:bliss::Graph::Vertex
color_t	search/structural_symmetries/graph_creator.cc	/^enum color_t {PREDICATE_VERTEX, VALUE_VERTEX, PRECOND_VERTEX, EFFECT_VERTEX,$/;"	g	file:
combine	translate/constraints.py	/^    def combine(self, other):$/;"	m	class:ConstraintSystem
combine_facts	search/cegar/subtask_generators.h	/^    bool combine_facts;$/;"	m	class:cegar::LandmarkDecomposition
combine_values	search/evaluators/max_evaluator.cc	/^int MaxEvaluator::combine_values(const vector<int> &values) {$/;"	f	class:max_evaluator::MaxEvaluator
combine_values	search/evaluators/sum_evaluator.cc	/^int SumEvaluator::combine_values(const vector<int> &values) {$/;"	f	class:sum_evaluator::SumEvaluator
combine_values	search/tasks/domain_abstracted_task_factory.cc	/^void DomainAbstractedTaskFactory::combine_values(int var, const ValueGroups &groups) {$/;"	f	class:extra_tasks::DomainAbstractedTaskFactory
combining_evaluator	search/evaluators/combining_evaluator.cc	/^namespace combining_evaluator {$/;"	n	file:
combining_evaluator	search/evaluators/combining_evaluator.h	/^namespace combining_evaluator {$/;"	n
comp_	search/ext/tree.hh	/^				StrictWeakOrdering comp_;$/;"	m	class:tree::compare_nodes
compare_func	search/algorithms/priority_queues.h	/^    struct compare_func {$/;"	s	class:priority_queues::HeapQueue
compare_nodes	search/ext/tree.hh	/^				compare_nodes(StrictWeakOrdering comp) : comp_(comp) {};$/;"	f	class:tree::compare_nodes
compare_nodes	search/ext/tree.hh	/^		class compare_nodes {$/;"	c	class:tree
compose_permutation	search/structural_symmetries/group.cc	/^Permutation *Group::compose_permutation(const Trace& perm_index) const {$/;"	f	class:Group
compute	search/algorithms/max_cliques.cc	/^    void compute() {$/;"	f	class:max_cliques::MaxCliqueComputer
compute_abstraction	search/merge_and_shrink/shrink_bucket_based.cc	/^void ShrinkBucketBased::compute_abstraction($/;"	f	class:merge_and_shrink::ShrinkBucketBased
compute_achievers	search/pruning/stubborn_sets.cc	/^void StubbornSets::compute_achievers(const TaskProxy &task_proxy) {$/;"	f	class:stubborn_sets::StubbornSets
compute_active_operators	search/pruning/stubborn_sets_ec.cc	/^void StubbornSetsEC::compute_active_operators(const State &state) {$/;"	f	class:stubborn_sets_ec::StubbornSetsEC
compute_add_and_ff	search/heuristics/additive_heuristic.cc	/^int AdditiveHeuristic::compute_add_and_ff(const State &state) {$/;"	f	class:additive_heuristic::AdditiveHeuristic
compute_additive_vars	search/pdbs/max_additive_pdb_sets.cc	/^VariableAdditivity compute_additive_vars(const TaskProxy &task_proxy) {$/;"	f	namespace:pdbs
compute_approx_mean_finite_h	search/pdbs/zero_one_pdbs.cc	/^double ZeroOnePDBs::compute_approx_mean_finite_h() const {$/;"	f	class:pdbs::ZeroOnePDBs
compute_axiom_layers	translate/axiom_rules.py	/^def compute_axiom_layers(axioms, axiom_init):$/;"	f
compute_combinable_equivalence_relation	search/merge_and_shrink/label_reduction.cc	/^equivalence_relation::EquivalenceRelation *LabelReduction::compute_combinable_equivalence_relation($/;"	f	class:merge_and_shrink::LabelReduction
compute_conflicts_and_disabling	search/pruning/stubborn_sets_ec.cc	/^void StubbornSetsEC::compute_conflicts_and_disabling() {$/;"	f	class:stubborn_sets_ec::StubbornSetsEC
compute_connection_points	search/pdbs/pattern_collection_generator_systematic.cc	/^void PatternCollectionGeneratorSystematic::compute_connection_points($/;"	f	class:pdbs::PatternCollectionGeneratorSystematic
compute_costs	search/heuristics/cea_heuristic.cc	/^int ContextEnhancedAdditiveHeuristic::compute_costs(const State &state) {$/;"	f	class:cea_heuristic::ContextEnhancedAdditiveHeuristic
compute_disjunctive_preconditions	search/landmarks/landmark_factory_rpg_sasp.cc	/^void LandmarkFactoryRpgSasp::compute_disjunctive_preconditions($/;"	f	class:landmarks::LandmarkFactoryRpgSasp
compute_distances	search/merge_and_shrink/distances.cc	/^vector<bool> Distances::compute_distances(Verbosity verbosity) {$/;"	f	class:merge_and_shrink::Distances
compute_distances_and_prune	search/merge_and_shrink/factored_transition_system.cc	/^void FactoredTransitionSystem::compute_distances_and_prune($/;"	f	class:merge_and_shrink::FactoredTransitionSystem
compute_eff_pre_neighbors	search/pdbs/pattern_collection_generator_systematic.cc	/^void PatternCollectionGeneratorSystematic::compute_eff_pre_neighbors($/;"	f	class:pdbs::PatternCollectionGeneratorSystematic
compute_eqref_hash	search/bliss/graph.h	/^  bool compute_eqref_hash;$/;"	m	class:bliss::AbstractGraph
compute_ff_heuristic	search/landmarks/exploration.cc	/^int Exploration::compute_ff_heuristic(const State &state) {$/;"	f	class:landmarks::Exploration
compute_goal_distances_general_cost	search/merge_and_shrink/distances.cc	/^void Distances::compute_goal_distances_general_cost() {$/;"	f	class:merge_and_shrink::Distances
compute_goal_distances_unit_cost	search/merge_and_shrink/distances.cc	/^void Distances::compute_goal_distances_unit_cost() {$/;"	f	class:merge_and_shrink::Distances
compute_groups	translate/fact_groups.py	/^def compute_groups(task, atoms, reachable_action_params):$/;"	f
compute_h_m_landmarks	search/landmarks/landmark_factory_h_m.cc	/^void LandmarkFactoryHM::compute_h_m_landmarks(const TaskProxy &task_proxy) {$/;"	f	class:landmarks::LandmarkFactoryHM
compute_heuristic	search/cegar/additive_cartesian_heuristic.cc	/^int AdditiveCartesianHeuristic::compute_heuristic(const GlobalState &global_state) {$/;"	f	class:cegar::AdditiveCartesianHeuristic
compute_heuristic	search/cegar/additive_cartesian_heuristic.cc	/^int AdditiveCartesianHeuristic::compute_heuristic(const State &state) {$/;"	f	class:cegar::AdditiveCartesianHeuristic
compute_heuristic	search/evaluators/const_evaluator.cc	/^int ConstEvaluator::compute_heuristic(const GlobalState &) {$/;"	f	class:const_evaluator::ConstEvaluator
compute_heuristic	search/heuristics/additive_heuristic.cc	/^int AdditiveHeuristic::compute_heuristic(const GlobalState &global_state) {$/;"	f	class:additive_heuristic::AdditiveHeuristic
compute_heuristic	search/heuristics/additive_heuristic.cc	/^int AdditiveHeuristic::compute_heuristic(const State &state) {$/;"	f	class:additive_heuristic::AdditiveHeuristic
compute_heuristic	search/heuristics/blind_search_heuristic.cc	/^int BlindSearchHeuristic::compute_heuristic(const GlobalState &global_state) {$/;"	f	class:blind_search_heuristic::BlindSearchHeuristic
compute_heuristic	search/heuristics/cea_heuristic.cc	/^int ContextEnhancedAdditiveHeuristic::compute_heuristic(const GlobalState &g_state) {$/;"	f	class:cea_heuristic::ContextEnhancedAdditiveHeuristic
compute_heuristic	search/heuristics/cg_heuristic.cc	/^int CGHeuristic::compute_heuristic(const GlobalState &g_state) {$/;"	f	class:cg_heuristic::CGHeuristic
compute_heuristic	search/heuristics/ff_heuristic.cc	/^int FFHeuristic::compute_heuristic(const GlobalState &global_state) {$/;"	f	class:ff_heuristic::FFHeuristic
compute_heuristic	search/heuristics/goal_count_heuristic.cc	/^int GoalCountHeuristic::compute_heuristic(const GlobalState &global_state) {$/;"	f	class:goal_count_heuristic::GoalCountHeuristic
compute_heuristic	search/heuristics/hm_heuristic.cc	/^int HMHeuristic::compute_heuristic(const GlobalState &global_state) {$/;"	f	class:hm_heuristic::HMHeuristic
compute_heuristic	search/heuristics/lm_cut_heuristic.cc	/^int LandmarkCutHeuristic::compute_heuristic(const GlobalState &global_state) {$/;"	f	class:lm_cut_heuristic::LandmarkCutHeuristic
compute_heuristic	search/heuristics/lm_cut_heuristic.cc	/^int LandmarkCutHeuristic::compute_heuristic(const State &state) {$/;"	f	class:lm_cut_heuristic::LandmarkCutHeuristic
compute_heuristic	search/heuristics/max_heuristic.cc	/^int HSPMaxHeuristic::compute_heuristic(const GlobalState &global_state) {$/;"	f	class:max_heuristic::HSPMaxHeuristic
compute_heuristic	search/landmarks/exploration.cc	/^int Exploration::compute_heuristic(const GlobalState &global_state) {$/;"	f	class:landmarks::Exploration
compute_heuristic	search/landmarks/landmark_count_heuristic.cc	/^int LandmarkCountHeuristic::compute_heuristic(const GlobalState &global_state) {$/;"	f	class:landmarks::LandmarkCountHeuristic
compute_heuristic	search/merge_and_shrink/merge_and_shrink_heuristic.cc	/^int MergeAndShrinkHeuristic::compute_heuristic(const GlobalState &global_state) {$/;"	f	class:merge_and_shrink::MergeAndShrinkHeuristic
compute_heuristic	search/operator_counting/operator_counting_heuristic.cc	/^int OperatorCountingHeuristic::compute_heuristic(const GlobalState &global_state) {$/;"	f	class:operator_counting::OperatorCountingHeuristic
compute_heuristic	search/operator_counting/operator_counting_heuristic.cc	/^int OperatorCountingHeuristic::compute_heuristic(const State &state) {$/;"	f	class:operator_counting::OperatorCountingHeuristic
compute_heuristic	search/pdbs/canonical_pdbs_heuristic.cc	/^int CanonicalPDBsHeuristic::compute_heuristic(const GlobalState &global_state) {$/;"	f	class:pdbs::CanonicalPDBsHeuristic
compute_heuristic	search/pdbs/canonical_pdbs_heuristic.cc	/^int CanonicalPDBsHeuristic::compute_heuristic(const State &state) const {$/;"	f	class:pdbs::CanonicalPDBsHeuristic
compute_heuristic	search/pdbs/pdb_heuristic.cc	/^int PDBHeuristic::compute_heuristic(const GlobalState &global_state) {$/;"	f	class:pdbs::PDBHeuristic
compute_heuristic	search/pdbs/pdb_heuristic.cc	/^int PDBHeuristic::compute_heuristic(const State &state) const {$/;"	f	class:pdbs::PDBHeuristic
compute_heuristic	search/pdbs/zero_one_pdbs_heuristic.cc	/^int ZeroOnePDBsHeuristic::compute_heuristic(const GlobalState &global_state) {$/;"	f	class:pdbs::ZeroOnePDBsHeuristic
compute_heuristic	search/pdbs/zero_one_pdbs_heuristic.cc	/^int ZeroOnePDBsHeuristic::compute_heuristic(const State &state) const {$/;"	f	class:pdbs::ZeroOnePDBsHeuristic
compute_heuristic	search/potentials/potential_heuristic.cc	/^int PotentialHeuristic::compute_heuristic(const GlobalState &global_state) {$/;"	f	class:potentials::PotentialHeuristic
compute_heuristic	search/potentials/potential_max_heuristic.cc	/^int PotentialMaxHeuristic::compute_heuristic(const GlobalState &global_state) {$/;"	f	class:potentials::PotentialMaxHeuristic
compute_heuristic_for_cegar	search/heuristics/additive_heuristic.cc	/^void AdditiveHeuristic::compute_heuristic_for_cegar(const State &state) {$/;"	f	class:additive_heuristic::AdditiveHeuristic
compute_heuristics	search/landmarks/lama_ff_synergy.cc	/^void LamaFFSynergy::compute_heuristics(EvaluationContext &eval_context) {$/;"	f	class:landmarks::LamaFFSynergy
compute_hsp_add_heuristic	search/landmarks/exploration.cc	/^int Exploration::compute_hsp_add_heuristic() {$/;"	f	class:landmarks::Exploration
compute_init_distances_general_cost	search/merge_and_shrink/distances.cc	/^void Distances::compute_init_distances_general_cost() {$/;"	f	class:merge_and_shrink::Distances
compute_init_distances_unit_cost	search/merge_and_shrink/distances.cc	/^void Distances::compute_init_distances_unit_cost() {$/;"	f	class:merge_and_shrink::Distances
compute_interference_relation	search/pruning/stubborn_sets_simple.cc	/^void StubbornSetsSimple::compute_interference_relation() {$/;"	f	class:stubborn_sets_simple::StubbornSetsSimple
compute_is_unit_cost	search/tasks/cost_adapted_task.cc	/^bool CostAdaptedTask::compute_is_unit_cost() const {$/;"	f	class:tasks::CostAdaptedTask
compute_join_cost	translate/greedy_join.py	/^    def compute_join_cost(self, left_joinee, right_joinee):$/;"	m	class:CostMatrix
compute_label_mapping	search/merge_and_shrink/label_reduction.cc	/^void LabelReduction::compute_label_mapping($/;"	f	class:merge_and_shrink::LabelReduction
compute_label_ranks	search/merge_and_shrink/merge_scoring_function_dfp.cc	/^vector<int> MergeScoringFunctionDFP::compute_label_ranks($/;"	f	class:merge_and_shrink::MergeScoringFunctionDFP
compute_landmarks	search/heuristics/lm_cut_landmarks.cc	/^bool LandmarkCutLandmarks::compute_landmarks($/;"	f	class:lm_cut_heuristic::LandmarkCutLandmarks
compute_lm_graph	search/landmarks/landmark_factory.cc	/^shared_ptr<LandmarkGraph> LandmarkFactory::compute_lm_graph($/;"	f	class:landmarks::LandmarkFactory
compute_locally_equivalent_labels	search/merge_and_shrink/transition_system.cc	/^void TransitionSystem::compute_locally_equivalent_labels() {$/;"	f	class:merge_and_shrink::TransitionSystem
compute_max_additive_subsets	search/pdbs/max_additive_pdb_sets.cc	/^shared_ptr<MaxAdditivePDBSubsets> compute_max_additive_subsets($/;"	f	namespace:pdbs
compute_max_additive_subsets_with_pattern	search/pdbs/max_additive_pdb_sets.cc	/^MaxAdditivePDBSubsets compute_max_additive_subsets_with_pattern($/;"	f	namespace:pdbs
compute_max_cliques	search/algorithms/max_cliques.cc	/^void compute_max_cliques($/;"	f	namespace:max_cliques
compute_mean_finite_h	search/pdbs/pattern_database.cc	/^double PatternDatabase::compute_mean_finite_h() const {$/;"	f	class:pdbs::PatternDatabase
compute_merge_candidates	search/merge_and_shrink/merge_selector.cc	/^vector<pair<int, int>> MergeSelector::compute_merge_candidates($/;"	f	class:merge_and_shrink::MergeSelector
compute_merge_strategy	search/merge_and_shrink/merge_strategy_factory_precomputed.cc	/^unique_ptr<MergeStrategy> MergeStrategyFactoryPrecomputed::compute_merge_strategy($/;"	f	class:merge_and_shrink::MergeStrategyFactoryPrecomputed
compute_merge_strategy	search/merge_and_shrink/merge_strategy_factory_stateless.cc	/^unique_ptr<MergeStrategy> MergeStrategyFactoryStateless::compute_merge_strategy($/;"	f	class:merge_and_shrink::MergeStrategyFactoryStateless
compute_merge_tree	search/merge_and_shrink/merge_tree_factory.cc	/^unique_ptr<MergeTree> MergeTreeFactory::compute_merge_tree($/;"	f	class:merge_and_shrink::MergeTreeFactory
compute_merge_tree	search/merge_and_shrink/merge_tree_factory_linear.cc	/^unique_ptr<MergeTree> MergeTreeFactoryLinear::compute_merge_tree($/;"	f	class:merge_and_shrink::MergeTreeFactoryLinear
compute_model	translate/build_model.py	/^def compute_model(prog):$/;"	f
compute_necessary_axiom_literals	translate/axiom_rules.py	/^def compute_necessary_axiom_literals(axioms_by_atom, operators, goal):$/;"	f
compute_negative_axioms	translate/axiom_rules.py	/^def compute_negative_axioms(axioms_by_atom, necessary_literals):$/;"	f
compute_noop_landmarks	search/landmarks/landmark_factory_h_m.cc	/^void LandmarkFactoryHM::compute_noop_landmarks($/;"	f	class:landmarks::LandmarkFactoryHM
compute_num_blocks	search/algorithms/dynamic_bitset.h	/^    static int compute_num_blocks(std::size_t num_bits) {$/;"	f	class:dynamic_bitset::DynamicBitset
compute_num_internal_nodes	search/merge_and_shrink/merge_tree.cc	/^int MergeTreeNode::compute_num_internal_nodes() const {$/;"	f	class:merge_and_shrink::MergeTreeNode
compute_num_internal_nodes	search/merge_and_shrink/merge_tree.h	/^    int compute_num_internal_nodes() const {$/;"	f	class:merge_and_shrink::MergeTree
compute_operator_preconditions	search/pruning/stubborn_sets_ec.cc	/^void StubbornSetsEC::compute_operator_preconditions(const TaskProxy &task_proxy) {$/;"	f	class:stubborn_sets_ec::StubbornSetsEC
compute_possibly_before_facts	search/cegar/utils.cc	/^static unordered_set<FactProxy> compute_possibly_before_facts($/;"	f	namespace:cegar
compute_preconditions	search/merge_and_shrink/fts_factory.cc	/^unordered_map<int, int> FTSFactory::compute_preconditions(OperatorProxy op) {$/;"	f	class:merge_and_shrink::FTSFactory
compute_predecessor_information	search/landmarks/landmark_factory.cc	/^void LandmarkFactory::compute_predecessor_information($/;"	f	class:landmarks::LandmarkFactory
compute_random_symmetric_state	search/structural_symmetries/group.cc	/^void Group::compute_random_symmetric_state(const GlobalState &state,$/;"	f	class:Group
compute_reachability_with_excludes	search/landmarks/exploration.cc	/^void Exploration::compute_reachability_with_excludes(vector<vector<int>> &lvl_var,$/;"	f	class:landmarks::Exploration
compute_relation	search/causal_graph.cc	/^void IntRelationBuilder::compute_relation(IntRelation &result) const {$/;"	f	class:IntRelationBuilder
compute_required_cache_size	search/heuristics/cg_cache.cc	/^int CGCache::compute_required_cache_size($/;"	f	class:cg_heuristic::CGCache
compute_result	search/evaluators/combining_evaluator.cc	/^EvaluationResult CombiningEvaluator::compute_result($/;"	f	class:combining_evaluator::CombiningEvaluator
compute_result	search/evaluators/g_evaluator.cc	/^EvaluationResult GEvaluator::compute_result(EvaluationContext &eval_context) {$/;"	f	class:g_evaluator::GEvaluator
compute_result	search/evaluators/pref_evaluator.cc	/^EvaluationResult PrefEvaluator::compute_result($/;"	f	class:pref_evaluator::PrefEvaluator
compute_result	search/evaluators/weighted_evaluator.cc	/^EvaluationResult WeightedEvaluator::compute_result($/;"	f	class:weighted_evaluator::WeightedEvaluator
compute_result	search/heuristic.cc	/^EvaluationResult Heuristic::compute_result(EvaluationContext &eval_context) {$/;"	f	class:Heuristic
compute_scores	search/merge_and_shrink/merge_scoring_function_dfp.cc	/^vector<double> MergeScoringFunctionDFP::compute_scores($/;"	f	class:merge_and_shrink::MergeScoringFunctionDFP
compute_scores	search/merge_and_shrink/merge_scoring_function_goal_relevance.cc	/^vector<double> MergeScoringFunctionGoalRelevance::compute_scores($/;"	f	class:merge_and_shrink::MergeScoringFunctionGoalRelevance
compute_scores	search/merge_and_shrink/merge_scoring_function_single_random.cc	/^vector<double> MergeScoringFunctionSingleRandom::compute_scores($/;"	f	class:merge_and_shrink::MergeScoringFunctionSingleRandom
compute_scores	search/merge_and_shrink/merge_scoring_function_total_order.cc	/^vector<double> MergeScoringFunctionTotalOrder::compute_scores($/;"	f	class:merge_and_shrink::MergeScoringFunctionTotalOrder
compute_shared_preconditions	search/landmarks/landmark_factory_rpg_sasp.cc	/^void LandmarkFactoryRpgSasp::compute_shared_preconditions($/;"	f	class:landmarks::LandmarkFactoryRpgSasp
compute_shrink_sizes	search/merge_and_shrink/utils.cc	/^pair<int, int> compute_shrink_sizes($/;"	f	namespace:merge_and_shrink
compute_signatures	search/merge_and_shrink/shrink_bisimulation.cc	/^void ShrinkBisimulation::compute_signatures($/;"	f	class:merge_and_shrink::ShrinkBisimulation
compute_sorted_operators	search/pruning/stubborn_sets.cc	/^void StubbornSets::compute_sorted_operators(const TaskProxy &task_proxy) {$/;"	f	class:stubborn_sets::StubbornSets
compute_subset_all_symmetric_states	search/structural_symmetries/group.cc	/^void Group::compute_subset_all_symmetric_states(const GlobalState &state,$/;"	f	class:Group
compute_superset_relation	search/pdbs/dominance_pruning.cc	/^PDBRelation compute_superset_relation(const PDBCollection &pattern_databases) {$/;"	f	namespace:pdbs
compute_symmetric_states	search/structural_symmetries/group.cc	/^void Group::compute_symmetric_states(const GlobalState &state,$/;"	f	class:Group
compute_symmetries	search/structural_symmetries/graph_creator.cc	/^bool GraphCreator::compute_symmetries(Group *group) {$/;"	f	class:GraphCreator
compute_symmetries	search/structural_symmetries/group.cc	/^void Group::compute_symmetries() {$/;"	f	class:Group
compute_total_transitions	search/merge_and_shrink/transition_system.cc	/^int TransitionSystem::compute_total_transitions() const {$/;"	f	class:merge_and_shrink::TransitionSystem
compute_triggers	search/landmarks/landmark_factory_zhu_givan.cc	/^void LandmarkFactoryZhuGivan::compute_triggers(const TaskProxy &task_proxy) {$/;"	f	class:landmarks::LandmarkFactoryZhuGivan
compute_union_pattern	search/pdbs/pattern_collection_generator_systematic.cc	/^static void compute_union_pattern($/;"	f	namespace:pdbs
concrete_state	search/cegar/abstraction.cc	/^    const State concrete_state;$/;"	m	struct:cegar::Flaw	file:
cond_noops	search/landmarks/landmark_factory_h_m.h	/^    std::vector<std::vector<int>> cond_noops;$/;"	m	struct:landmarks::PMOp
condition_count	search/axioms.h	/^        int condition_count;$/;"	m	struct:AxiomEvaluator::AxiomRule
condition_of	search/axioms.h	/^        std::vector<AxiomRule *> condition_of;$/;"	m	struct:AxiomEvaluator::AxiomLiteral
condition_to_rule_body	translate/normalize.py	/^def condition_to_rule_body(parameters, condition):$/;"	f
conditional_effects_supported	search/landmarks/landmark_count_heuristic.h	/^    const bool conditional_effects_supported;$/;"	m	class:landmarks::LandmarkCountHeuristic
conditions	search/global_operator.h	/^    std::vector<GlobalCondition> conditions;$/;"	m	struct:GlobalEffect
conditions	search/successor_generator.h	/^    std::vector<Condition> conditions;$/;"	m	class:SuccessorGenerator
conflicting_and_disabling	search/pruning/stubborn_sets_ec.h	/^    std::vector<std::vector<int>> conflicting_and_disabling;$/;"	m	class:stubborn_sets_ec::StubbornSetsEC
conj_lms	search/landmarks/landmark_graph.h	/^    int conj_lms;$/;"	m	class:landmarks::EdgeType::LandmarkGraph
conjunctive	search/landmarks/landmark_graph.h	/^    bool conjunctive;$/;"	m	class:landmarks::EdgeType::LandmarkNode
conjunctive_landmarks	search/landmarks/landmark_factory.h	/^    const bool conjunctive_landmarks;$/;"	m	class:landmarks::LandmarkFactory
connect	translate/graph.py	/^    def connect(self, u, v):$/;"	m	class:Graph
connected_components	translate/graph.py	/^    def connected_components(self):$/;"	m	class:Graph
const_evaluator	search/evaluators/const_evaluator.cc	/^namespace const_evaluator {$/;"	n	file:
const_evaluator	search/evaluators/const_evaluator.h	/^namespace const_evaluator {$/;"	n
const_iterator	search/per_state_information.h	/^        const_iterator(const PerStateInformation<Entry> &owner_,$/;"	f	class:PerStateInformation::const_iterator
const_iterator	search/per_state_information.h	/^        const_iterator(const const_iterator &other)$/;"	f	class:PerStateInformation::const_iterator
const_iterator	search/per_state_information.h	/^    class const_iterator : public std::iterator<std::forward_iterator_tag,$/;"	c	class:PerStateInformation
constraint_generators	search/operator_counting/operator_counting_heuristic.h	/^    std::vector<std::shared_ptr<ConstraintGenerator>> constraint_generators;$/;"	m	class:operator_counting::OperatorCountingHeuristic
constraint_index	search/operator_counting/state_equation_constraints.h	/^    int constraint_index;$/;"	m	struct:operator_counting::Proposition
constraint_offset	search/operator_counting/pho_constraints.h	/^    int constraint_offset;$/;"	m	class:operator_counting::PhOConstraints
construct_lp	search/potentials/potential_optimizer.cc	/^void PotentialOptimizer::construct_lp() {$/;"	f	class:potentials::PotentialOptimizer
construct_recursive	search/successor_generator.cc	/^GeneratorBase *SuccessorGenerator::construct_recursive($/;"	f	class:SuccessorGenerator
constructor	search/ext/tree.hh	/^void constructor(T1* p) $/;"	f	namespace:kp
constructor	search/ext/tree.hh	/^void constructor(T1* p, T2& val) $/;"	f	namespace:kp
contain_conflicting_fact	search/pruning/stubborn_sets.cc	/^bool contain_conflicting_fact(const vector<FactPair> &facts1,$/;"	f	namespace:stubborn_sets
contains	search/algorithms/ordered_set.h	/^    bool contains(const T &item) const {$/;"	f	class:ordered_set::OrderedSet
contains	search/cegar/abstract_state.cc	/^bool AbstractState::contains(int var, int value) const {$/;"	f	class:cegar::AbstractState
contains	search/landmarks/landmark_factory_h_m.cc	/^static bool contains(list<T> &alist, const T &val) {$/;"	f	namespace:landmarks
contains	search/options/doc_store.cc	/^bool DocStore::contains(string k) {$/;"	f	class:options::DocStore
contains	search/options/options.h	/^    bool contains(std::string key) const {$/;"	f	class:options::Options
contains	search/options/predefinitions.h	/^    bool contains(const std::string &k) {$/;"	f	class:options::Predefinitions
contains	search/options/registries.h	/^    bool contains(const std::string &k) {$/;"	f	class:options::Registry
content	search/options/any.h	/^    std::unique_ptr<Placeholder> content;$/;"	m	class:options::Any
context	search/heuristics/cea_heuristic.cc	/^    vector<short> context;$/;"	m	struct:cea_heuristic::LocalProblemNode	file:
context_variables	search/heuristics/cea_heuristic.cc	/^    vector<int> *context_variables;$/;"	m	struct:cea_heuristic::LocalProblem	file:
continue_on_fail	search/search_engines/iterated_search.h	/^    bool continue_on_fail;$/;"	m	class:iterated_search::IteratedSearch
continue_on_solve	search/search_engines/iterated_search.h	/^    bool continue_on_solve;$/;"	m	class:iterated_search::IteratedSearch
continuing_out_of_memory_handler	search/utils/memory.cc	/^void continuing_out_of_memory_handler() {$/;"	f	namespace:utils
contradict_effect_of	search/heuristics/hm_heuristic.cc	/^bool HMHeuristic::contradict_effect_of($/;"	f	class:hm_heuristic::HMHeuristic
convert_ancestor_state	search/task_proxy.h	/^    State convert_ancestor_state(const State &ancestor_state) const {$/;"	f	class:TaskProxy
convert_global_state	search/heuristic.cc	/^State Heuristic::convert_global_state(const GlobalState &global_state) const {$/;"	f	class:Heuristic
convert_if_necessary	search/algorithms/priority_queues.h	/^    virtual AbstractQueue<Value> *convert_if_necessary(int \/*key*\/) {$/;"	f	class:priority_queues::AbstractQueue
convert_if_necessary	search/algorithms/priority_queues.h	/^    virtual AbstractQueue<Value> *convert_if_necessary(int key) {$/;"	f	class:priority_queues::BucketQueue
convert_pairs	translate/simplify.py	/^    def convert_pairs(self, pairs):$/;"	m	class:VarValueRenaming
convert_rules	translate/build_model.py	/^def convert_rules(prog):$/;"	f
convert_state_values	search/tasks/delegating_task.cc	/^void DelegatingTask::convert_state_values($/;"	f	class:tasks::DelegatingTask
convert_state_values	search/tasks/root_task.cc	/^void RootTask::convert_state_values($/;"	f	class:tasks::RootTask
convert_state_values_from_parent	search/tasks/delegating_task.h	/^    virtual void convert_state_values_from_parent(std::vector<int> &) const {$/;"	f	class:tasks::DelegatingTask
convert_state_values_from_parent	search/tasks/domain_abstracted_task.cc	/^void DomainAbstractedTask::convert_state_values_from_parent($/;"	f	class:extra_tasks::DomainAbstractedTask
convert_state_values_from_parent	search/tasks/plan_forbid_reformulated_task.cc	/^void PlanForbidReformulatedTask::convert_state_values_from_parent($/;"	f	class:extra_tasks::PlanForbidReformulatedTask
convert_to_landmark_set	search/landmarks/landmark_count_heuristic.cc	/^LandmarkSet LandmarkCountHeuristic::convert_to_landmark_set($/;"	f	class:landmarks::LandmarkCountHeuristic
convert_trivial_rules	translate/pddl_to_prolog.py	/^    def convert_trivial_rules(self):$/;"	m	class:PrologProgram
copy	translate/constraints.py	/^    def copy(self):$/;"	m	class:ConstraintSystem
copy	translate/pddl/effects.py	/^    def copy(self):$/;"	m	class:Effect
copy_	search/ext/tree.hh	/^void tree<T, tree_node_allocator>::copy_(const tree<T, tree_node_allocator>& other) $/;"	f	class:tree
copy_and_register_state	search/state_registry.cc	/^GlobalState StateRegistry::copy_and_register_state(const GlobalState &state) {$/;"	f	class:StateRegistry
copy_args_to_module	translate/options.py	/^def copy_args_to_module(args):$/;"	f
cost	search/global_operator.h	/^    int cost;$/;"	m	class:GlobalOperator
cost	search/heuristics/cea_heuristic.cc	/^    int cost;$/;"	m	struct:cea_heuristic::LocalProblemNode	file:
cost	search/heuristics/lm_cut_landmarks.h	/^    int cost;$/;"	m	struct:lm_cut_heuristic::RelaxedOperator
cost	search/heuristics/relaxation_heuristic.h	/^    int cost; \/\/ Used for h^max cost or h^add cost$/;"	m	struct:relaxation_heuristic::Proposition
cost	search/heuristics/relaxation_heuristic.h	/^    int cost; \/\/ Used for h^max cost or h^add cost;$/;"	m	struct:relaxation_heuristic::UnaryOperator
cost	search/merge_and_shrink/label_equivalence_relation.h	/^    int cost;$/;"	m	class:merge_and_shrink::LabelGroup
cost	search/merge_and_shrink/labels.h	/^    int cost;$/;"	m	class:merge_and_shrink::Label
cost	search/pdbs/pattern_database.h	/^    int cost;$/;"	m	class:pdbs::AbstractOperator
cost_of_landmarks	search/landmarks/landmark_graph.h	/^    inline int cost_of_landmarks() const {return landmarks_cost; }$/;"	f	class:landmarks::EdgeType::LandmarkGraph
cost_sharing_h_value	search/landmarks/landmark_cost_assignment.cc	/^double LandmarkEfficientOptimalSharedCostAssignment::cost_sharing_h_value() {$/;"	f	class:landmarks::LandmarkEfficientOptimalSharedCostAssignment
cost_sharing_h_value	search/landmarks/landmark_cost_assignment.cc	/^double LandmarkUniformSharedCostAssignment::cost_sharing_h_value() {$/;"	f	class:landmarks::LandmarkUniformSharedCostAssignment
cost_type	search/search_engine.h	/^    OperatorCost cost_type;$/;"	m	class:SearchEngine
cost_type	search/search_space.h	/^    OperatorCost cost_type;$/;"	m	class:SearchNode
cost_type	search/search_space.h	/^    OperatorCost cost_type;$/;"	m	class:SearchSpace
cost_type	search/tasks/cost_adapted_task.h	/^    const OperatorCost cost_type;$/;"	m	class:tasks::CostAdaptedTask
count	search/algorithms/dynamic_bitset.h	/^    int count() const {$/;"	f	class:dynamic_bitset::DynamicBitset
count	search/cegar/abstract_state.cc	/^int AbstractState::count(int var) const {$/;"	f	class:cegar::AbstractState
count	search/cegar/domains.cc	/^int Domains::count(int var) const {$/;"	f	class:cegar::Domains
count_bits_in_last_block	search/algorithms/dynamic_bitset.h	/^    int count_bits_in_last_block() const {$/;"	f	class:dynamic_bitset::DynamicBitset
count_costs	search/landmarks/landmark_graph.cc	/^void LandmarkGraph::count_costs() {$/;"	f	class:landmarks::LandmarkGraph
count_evaluation	search/evaluation_result.h	/^    bool count_evaluation;$/;"	m	class:EvaluationResult
cover_samples	search/potentials/diverse_potential_heuristics.cc	/^void DiversePotentialHeuristics::cover_samples($/;"	f	class:potentials::DiversePotentialHeuristics
cr_backtrack_point	search/bliss/partition.h	/^    unsigned int cr_backtrack_point;$/;"	m	class:bliss::Partition::BacktrackInfo
cr_bt_info	search/bliss/partition.h	/^  std::vector<CR_BTInfo> cr_bt_info;$/;"	m	class:bliss::Partition
cr_cells	search/bliss/partition.h	/^  CRCell* cr_cells;$/;"	m	class:bliss::Partition
cr_cep_index	search/bliss/graph.cc	/^  unsigned int cr_cep_index;$/;"	m	class:bliss::TreeNode	file:
cr_cep_stack	search/bliss/graph.h	/^  std::vector<CR_CEP> cr_cep_stack;$/;"	m	class:bliss::AbstractGraph
cr_cep_stack_size	search/bliss/graph.cc	/^  unsigned int cr_cep_stack_size;$/;"	m	class:bliss::TreeNode	file:
cr_component	search/bliss/graph.h	/^  std::vector<unsigned int> cr_component;$/;"	m	class:bliss::AbstractGraph
cr_component_elements	search/bliss/graph.h	/^  unsigned int cr_component_elements;$/;"	m	class:bliss::AbstractGraph
cr_create_at_level	search/bliss/partition.cc	/^Partition::cr_create_at_level(const unsigned int cell_index,$/;"	f	class:bliss::Partition
cr_create_at_level_trailed	search/bliss/partition.cc	/^Partition::cr_create_at_level_trailed(const unsigned int cell_index,$/;"	f	class:bliss::Partition
cr_created_trail	search/bliss/partition.h	/^  std::vector<unsigned int> cr_created_trail;$/;"	m	class:bliss::Partition
cr_enabled	search/bliss/partition.h	/^  bool cr_enabled;$/;"	m	class:bliss::Partition
cr_free	search/bliss/partition.cc	/^Partition::cr_free()$/;"	f	class:bliss::Partition
cr_get_backtrack_point	search/bliss/partition.cc	/^Partition::cr_get_backtrack_point()$/;"	f	class:bliss::Partition
cr_get_level	search/bliss/partition.h	/^Partition::cr_get_level(const unsigned int cell_index) const$/;"	f	class:bliss::Partition
cr_goto_backtrack_point	search/bliss/partition.cc	/^Partition::cr_goto_backtrack_point(const unsigned int btpoint)$/;"	f	class:bliss::Partition
cr_init	search/bliss/partition.cc	/^Partition::cr_init()$/;"	f	class:bliss::Partition
cr_level	search/bliss/graph.cc	/^  unsigned int cr_level;$/;"	m	class:bliss::TreeNode	file:
cr_level	search/bliss/graph.h	/^  unsigned int cr_level;$/;"	m	class:bliss::AbstractGraph
cr_levels	search/bliss/partition.h	/^  CRCell** cr_levels;$/;"	m	class:bliss::Partition
cr_max_level	search/bliss/partition.h	/^  unsigned int cr_max_level;$/;"	m	class:bliss::Partition
cr_split_level	search/bliss/partition.cc	/^Partition::cr_split_level(const unsigned int level,$/;"	f	class:bliss::Partition
cr_splitted_level_trail	search/bliss/partition.h	/^  std::vector<unsigned int> cr_splitted_level_trail;$/;"	m	class:bliss::Partition
create	search/merge_and_shrink/fts_factory.cc	/^FactoredTransitionSystem FTSFactory::create($/;"	f	class:merge_and_shrink::FTSFactory
create_additive_heuristic	search/cegar/utils.cc	/^unique_ptr<additive_heuristic::AdditiveHeuristic> create_additive_heuristic($/;"	f	namespace:cegar
create_alternation_open_list_factory	search/search_engines/search_common.cc	/^static shared_ptr<OpenListFactory> create_alternation_open_list_factory($/;"	f	namespace:search_common
create_alternation_open_list_factory_aux	search/search_engines/search_common.cc	/^static shared_ptr<OpenListFactory> create_alternation_open_list_factory_aux($/;"	f	namespace:search_common
create_astar_open_list_factory_and_f_eval	search/search_engines/search_common.cc	/^create_astar_open_list_factory_and_f_eval(const Options &opts) {$/;"	f	namespace:search_common
create_bliss_directed_graph	search/structural_symmetries/graph_creator.cc	/^void GraphCreator::create_bliss_directed_graph(bliss::Digraph &bliss_graph) const {$/;"	f	class:GraphCreator
create_distances	search/merge_and_shrink/fts_factory.cc	/^vector<unique_ptr<Distances>> FTSFactory::create_distances($/;"	f	class:merge_and_shrink::FTSFactory
create_edge_open_list	search/open_lists/alternation_open_list.cc	/^AlternationOpenListFactory::create_edge_open_list() {$/;"	f	class:AlternationOpenListFactory
create_edge_open_list	search/open_lists/epsilon_greedy_open_list.cc	/^EpsilonGreedyOpenListFactory::create_edge_open_list() {$/;"	f	class:EpsilonGreedyOpenListFactory
create_edge_open_list	search/open_lists/pareto_open_list.cc	/^ParetoOpenListFactory::create_edge_open_list() {$/;"	f	class:ParetoOpenListFactory
create_edge_open_list	search/open_lists/standard_scalar_open_list.cc	/^StandardScalarOpenListFactory::create_edge_open_list() {$/;"	f	class:StandardScalarOpenListFactory
create_edge_open_list	search/open_lists/tiebreaking_open_list.cc	/^TieBreakingOpenListFactory::create_edge_open_list() {$/;"	f	class:TieBreakingOpenListFactory
create_edge_open_list	search/open_lists/type_based_open_list.cc	/^TypeBasedOpenListFactory::create_edge_open_list() {$/;"	f	class:TypeBasedOpenListFactory
create_ehc_open_list_factory	search/search_engines/enforced_hill_climbing_search.cc	/^static shared_ptr<OpenListFactory> create_ehc_open_list_factory($/;"	f	namespace:enforced_hill_climbing_search
create_factored_transition_system	search/merge_and_shrink/fts_factory.cc	/^FactoredTransitionSystem create_factored_transition_system($/;"	f	namespace:merge_and_shrink
create_from_sorted_entries_destructively	search/algorithms/priority_queues.h	/^    static HeapQueue<Value> *create_from_sorted_entries_destructively($/;"	f	class:priority_queues::HeapQueue
create_greedy_open_list_factory	search/search_engines/search_common.cc	/^shared_ptr<OpenListFactory> create_greedy_open_list_factory($/;"	f	namespace:search_common
create_labels	search/merge_and_shrink/fts_factory.cc	/^vector<unique_ptr<Label>> FTSFactory::create_labels() {$/;"	f	class:merge_and_shrink::FTSFactory
create_lp_solver	search/lp/lp_internals.cc	/^unique_ptr<OsiSolverInterface> create_lp_solver(LPSolverType solver_type) {$/;"	f	namespace:lp
create_mas_representations	search/merge_and_shrink/fts_factory.cc	/^vector<unique_ptr<MergeAndShrinkRepresentation>> FTSFactory::create_mas_representations() {$/;"	f	class:merge_and_shrink::FTSFactory
create_max_additive_subsets_if_missing	search/pdbs/pattern_collection_information.cc	/^void PatternCollectionInformation::create_max_additive_subsets_if_missing() {$/;"	f	class:pdbs::PatternCollectionInformation
create_open_list	search/open_lists/open_list_factory.cc	/^unique_ptr<EdgeOpenList> OpenListFactory::create_open_list() {$/;"	f	class:OpenListFactory
create_open_list	search/open_lists/open_list_factory.cc	/^unique_ptr<StateOpenList> OpenListFactory::create_open_list() {$/;"	f	class:OpenListFactory
create_pdb	search/pdbs/pattern_database.cc	/^void PatternDatabase::create_pdb($/;"	f	class:pdbs::PatternDatabase
create_pdbs_if_missing	search/pdbs/pattern_collection_information.cc	/^void PatternCollectionInformation::create_pdbs_if_missing() {$/;"	f	class:pdbs::PatternCollectionInformation
create_permutation_from_state_to_state	search/structural_symmetries/group.cc	/^Permutation *Group::create_permutation_from_state_to_state($/;"	f	class:Group
create_phase	search/search_engines/iterated_search.cc	/^unique_ptr<SearchEngine> IteratedSearch::create_phase(int phase) {$/;"	f	class:iterated_search::IteratedSearch
create_potential_function	search/potentials/single_potential_heuristics.cc	/^static unique_ptr<PotentialFunction> create_potential_function($/;"	f	namespace:potentials
create_sample_based_potential_functions	search/potentials/sample_based_potential_heuristics.cc	/^static vector<unique_ptr<PotentialFunction>> create_sample_based_potential_functions($/;"	f	namespace:potentials
create_standard_scalar_open_list_factory	search/search_engines/search_common.cc	/^shared_ptr<OpenListFactory> create_standard_scalar_open_list_factory($/;"	f	namespace:search_common
create_state_open_list	search/open_lists/alternation_open_list.cc	/^AlternationOpenListFactory::create_state_open_list() {$/;"	f	class:AlternationOpenListFactory
create_state_open_list	search/open_lists/epsilon_greedy_open_list.cc	/^EpsilonGreedyOpenListFactory::create_state_open_list() {$/;"	f	class:EpsilonGreedyOpenListFactory
create_state_open_list	search/open_lists/pareto_open_list.cc	/^ParetoOpenListFactory::create_state_open_list() {$/;"	f	class:ParetoOpenListFactory
create_state_open_list	search/open_lists/standard_scalar_open_list.cc	/^StandardScalarOpenListFactory::create_state_open_list() {$/;"	f	class:StandardScalarOpenListFactory
create_state_open_list	search/open_lists/tiebreaking_open_list.cc	/^TieBreakingOpenListFactory::create_state_open_list() {$/;"	f	class:TieBreakingOpenListFactory
create_state_open_list	search/open_lists/type_based_open_list.cc	/^TypeBasedOpenListFactory::create_state_open_list() {$/;"	f	class:TypeBasedOpenListFactory
create_transition_systems	search/merge_and_shrink/fts_factory.cc	/^vector<unique_ptr<TransitionSystem>> FTSFactory::create_transition_systems() {$/;"	f	class:merge_and_shrink::FTSFactory
create_transitions	search/domain_transition_graph.cc	/^void DTGFactory::create_transitions(vector<DomainTransitionGraph *> &dtgs) {$/;"	f	class:DTGFactory
create_trivial_abstraction	search/cegar/abstraction.cc	/^void Abstraction::create_trivial_abstraction() {$/;"	f	class:cegar::Abstraction
create_wastar_eval	search/search_engines/search_common.cc	/^static ScalarEvaluator *create_wastar_eval($/;"	f	namespace:search_common
create_wastar_open_list_factory	search/search_engines/search_common.cc	/^shared_ptr<OpenListFactory> create_wastar_open_list_factory($/;"	f	namespace:search_common
created_trail_index	search/bliss/partition.h	/^    unsigned int created_trail_index;$/;"	m	class:bliss::Partition::CR_BTInfo
creating_operator	search/search_node_info.h	/^    int creating_operator;$/;"	m	struct:SearchNodeInfo
creation_level	search/bliss/graph.h	/^    unsigned int creation_level;$/;"	m	class:bliss::AbstractGraph::CR_CEP
current_abstract_state	search/cegar/abstraction.cc	/^    AbstractState *current_abstract_state;$/;"	m	struct:cegar::Flaw	file:
current_bucket_no	search/algorithms/priority_queues.h	/^    mutable int current_bucket_no;$/;"	m	class:priority_queues::BucketQueue
current_clock	search/utils/timer.cc	/^double Timer::current_clock() const {$/;"	f	class:utils::Timer
current_eval_context	search/search_engines/enforced_hill_climbing_search.h	/^    EvaluationContext current_eval_context;$/;"	m	class:enforced_hill_climbing_search::EnforcedHillClimbingSearch
current_eval_context	search/search_engines/lazy_search.h	/^    EvaluationContext current_eval_context;$/;"	m	class:lazy_search::LazySearch
current_g	search/search_engines/lazy_search.h	/^    int current_g;$/;"	m	class:lazy_search::LazySearch
current_group_id	search/merge_and_shrink/transition_system.h	/^    int current_group_id;$/;"	m	class:merge_and_shrink::TSConstIterator
current_index	search/merge_and_shrink/factored_transition_system.h	/^    int current_index;$/;"	m	class:merge_and_shrink::FTSConstIterator
current_max_clique	search/algorithms/max_cliques.cc	/^    vector<int> current_max_clique;$/;"	m	class:max_cliques::MaxCliqueComputer	file:
current_operator	search/search_engines/lazy_search.h	/^    const GlobalOperator *current_operator;$/;"	m	class:lazy_search::LazySearch
current_pdbs	search/pdbs/pattern_collection_generator_hillclimbing.h	/^    std::unique_ptr<IncrementalCanonicalPDBs> current_pdbs;$/;"	m	class:pdbs::PatternCollectionGeneratorHillclimbing
current_phase_start_g	search/search_engines/enforced_hill_climbing_search.h	/^    int current_phase_start_g;$/;"	m	class:enforced_hill_climbing_search::EnforcedHillClimbingSearch
current_predecessor_id	search/search_engines/lazy_search.h	/^    StateID current_predecessor_id;$/;"	m	class:lazy_search::LazySearch
current_real_g	search/search_engines/lazy_search.h	/^    int current_real_g;$/;"	m	class:lazy_search::LazySearch
current_state	search/search_engines/lazy_search.h	/^    GlobalState current_state;$/;"	m	class:lazy_search::LazySearch
cursor	search/bliss/kstack.h	/^  Type *cursor;$/;"	m	class:bliss::KStack
d_counts	search/search_engines/enforced_hill_climbing_search.h	/^    std::map<int, std::pair<int, int>> d_counts;$/;"	m	class:enforced_hill_climbing_search::EnforcedHillClimbingSearch
data	search/ext/tree.hh	/^		T data;$/;"	m	class:tree_node_
dcs_count	search/bliss/partition.h	/^  unsigned int dcs_count[256];$/;"	m	class:bliss::Partition
dcs_cumulate_count	search/bliss/partition.cc	/^Partition::dcs_cumulate_count(const unsigned int max)$/;"	f	class:bliss::Partition
dcs_start	search/bliss/partition.h	/^  unsigned int dcs_start[256];$/;"	m	class:bliss::Partition
dead_end_states	search/search_statistics.h	/^    int dead_end_states;$/;"	m	class:SearchStatistics
dead_ends_are_reliable	search/evaluators/combining_evaluator.cc	/^bool CombiningEvaluator::dead_ends_are_reliable() const {$/;"	f	class:combining_evaluator::CombiningEvaluator
dead_ends_are_reliable	search/evaluators/weighted_evaluator.cc	/^bool WeightedEvaluator::dead_ends_are_reliable() const {$/;"	f	class:weighted_evaluator::WeightedEvaluator
dead_ends_are_reliable	search/heuristics/cea_heuristic.cc	/^bool ContextEnhancedAdditiveHeuristic::dead_ends_are_reliable() const {$/;"	f	class:cea_heuristic::ContextEnhancedAdditiveHeuristic
dead_ends_are_reliable	search/heuristics/cg_heuristic.cc	/^bool CGHeuristic::dead_ends_are_reliable() const {$/;"	f	class:cg_heuristic::CGHeuristic
dead_ends_are_reliable	search/heuristics/hm_heuristic.cc	/^bool HMHeuristic::dead_ends_are_reliable() const {$/;"	f	class:hm_heuristic::HMHeuristic
dead_ends_are_reliable	search/heuristics/relaxation_heuristic.cc	/^bool RelaxationHeuristic::dead_ends_are_reliable() const {$/;"	f	class:relaxation_heuristic::RelaxationHeuristic
dead_ends_are_reliable	search/landmarks/landmark_count_heuristic.cc	/^bool LandmarkCountHeuristic::dead_ends_are_reliable() const {$/;"	f	class:landmarks::LandmarkCountHeuristic
dead_ends_are_reliable	search/scalar_evaluator.cc	/^bool ScalarEvaluator::dead_ends_are_reliable() const {$/;"	f	class:ScalarEvaluator
dead_ends_reliable	search/landmarks/landmark_count_heuristic.h	/^    const bool dead_ends_reliable;$/;"	m	class:landmarks::LandmarkCountHeuristic
debug	search/cegar/abstraction.h	/^    const bool debug;$/;"	m	class:cegar::Abstraction
debug	search/utils/util.h	/^inline void debug(int index, const char* func = __PRETTY_FUNCTION__,  int line = __LINE__)$/;"	f
decrease_g_value_to	search/cegar/abstract_state.h	/^    void decrease_g_value_to(int new_g) {$/;"	f	class:cegar::AbstractSearchInfo
default_generator	search/successor_generator.cc	/^    GeneratorBase *default_generator;$/;"	m	class:GeneratorSwitch	file:
default_options	search/heuristic.cc	/^Options Heuristic::default_options() {$/;"	f	class:Heuristic
default_value	search/options/doc_store.h	/^    std::string default_value;$/;"	m	struct:options::ArgumentInfo
default_value	search/per_state_information.h	/^    const Entry default_value;$/;"	m	class:PerStateInformation
default_values	search/axioms.h	/^    std::vector<int> default_values;$/;"	m	class:AxiomEvaluator
degree_invariant	search/bliss/graph.cc	/^Graph::degree_invariant(const Graph* const g, const unsigned int v)$/;"	f	class:bliss::Graph
delete_entry	translate/greedy_join.py	/^    def delete_entry(self, index):$/;"	m	class:CostMatrix
delete_generators	search/structural_symmetries/group.cc	/^void Group::delete_generators() {$/;"	f	class:Group
delete_owner	translate/normalize.py	/^    def delete_owner(self, task):$/;"	m	class:AxiomConditionProxy
delete_owner	translate/normalize.py	/^    def delete_owner(self, task):$/;"	m	class:EffectConditionProxy
delete_owner	translate/normalize.py	/^    def delete_owner(self, task):$/;"	m	class:GoalConditionProxy
delete_owner	translate/normalize.py	/^    def delete_owner(self, task):$/;"	m	class:PreconditionProxy
delta	search/search_engines/top_k_eager_search.h	/^	int delta = -1; $/;"	m	struct:top_k_eager_search::StateActionPair
depends_on	search/heuristics/cg_cache.h	/^    std::vector<std::vector<int>> depends_on;$/;"	m	class:cg_heuristic::CGCache
depth	search/ext/tree.hh	/^int tree<T, tree_node_allocator>::depth(const iterator_base& it) $/;"	f	class:tree
depth	search/ext/tree.hh	/^int tree<T, tree_node_allocator>::depth(const iterator_base& it, const iterator_base& root) $/;"	f	class:tree
depth	search/landmarks/exploration.h	/^    int depth;$/;"	m	struct:landmarks::ExProposition
depth	search/landmarks/exploration.h	/^    int depth;$/;"	m	struct:landmarks::ExUnaryOperator
descend_all	search/ext/tree.hh	/^void tree<T, tree_node_allocator>::post_order_iterator::descend_all()$/;"	f	class:tree::post_order_iterator
description	search/heuristic.h	/^    std::string description;$/;"	m	class:Heuristic
description	search/options/doc_store.h	/^    std::string description;$/;"	m	struct:options::LanguageSupportInfo
description	search/options/doc_store.h	/^    std::string description;$/;"	m	struct:options::NoteInfo
description	search/options/doc_store.h	/^    std::string description;$/;"	m	struct:options::PropertyInfo
desired_abstract_state	search/cegar/abstraction.cc	/^    const AbstractState desired_abstract_state;$/;"	m	struct:cegar::Flaw	file:
destructor	search/ext/tree.hh	/^void destructor(T1* p)$/;"	f	namespace:kp
detach	search/bliss/partition.h	/^    void detach() {$/;"	f	class:bliss::Partition::CRCell
deviations	search/cegar/abstraction.h	/^    int deviations;$/;"	m	class:cegar::Abstraction
dfs	translate/graph.py	/^        def dfs(node):$/;"	f	function:Graph.connected_components
dfs	translate/variable_order.py	/^    def dfs(self, node, necessary):$/;"	m	class:CausalGraph
did_write_overflow_warning	search/heuristics/additive_heuristic.h	/^    bool did_write_overflow_warning;$/;"	m	class:additive_heuristic::AdditiveHeuristic
did_write_overflow_warning	search/landmarks/exploration.h	/^    bool did_write_overflow_warning;$/;"	m	class:landmarks::Exploration
difference_type	search/ext/tree.hh	/^				typedef ptrdiff_t                       difference_type;$/;"	t	class:tree::iterator_base
dijkstra_search	search/merge_and_shrink/distances.cc	/^static void dijkstra_search($/;"	f	namespace:merge_and_shrink
dimension	search/open_lists/tiebreaking_open_list.cc	/^int TieBreakingOpenList<Entry>::dimension() const {$/;"	f	class:TieBreakingOpenList
dirty	search/heuristic.h	/^        unsigned int dirty : 1;$/;"	m	struct:Heuristic::HEntry
disabled	search/pruning/stubborn_sets_ec.h	/^    std::vector<std::vector<int>> disabled;$/;"	m	class:stubborn_sets_ec::StubbornSetsEC
discard_all_orderings	search/landmarks/landmark_factory.cc	/^void LandmarkFactory::discard_all_orderings() {$/;"	f	class:landmarks::LandmarkFactory
discard_conjunctive_landmarks	search/landmarks/landmark_factory.cc	/^void LandmarkFactory::discard_conjunctive_landmarks() {$/;"	f	class:landmarks::LandmarkFactory
discard_disjunctive_landmarks	search/landmarks/landmark_factory.cc	/^void LandmarkFactory::discard_disjunctive_landmarks() {$/;"	f	class:landmarks::LandmarkFactory
discard_noncausal_landmarks	search/landmarks/landmark_factory.cc	/^void LandmarkFactory::discard_noncausal_landmarks(const TaskProxy &task_proxy, Exploration &exploration) {$/;"	f	class:landmarks::LandmarkFactory
discard_states	search/merge_and_shrink/factored_transition_system.cc	/^void FactoredTransitionSystem::discard_states($/;"	f	class:merge_and_shrink::FactoredTransitionSystem
discrete_cell_count	search/bliss/partition.h	/^  unsigned int discrete_cell_count;$/;"	m	class:bliss::Partition
discrete_cell_limit	search/bliss/graph.h	/^    unsigned int discrete_cell_limit;$/;"	m	class:bliss::AbstractGraph::CR_CEP
disj_landmark_exists	search/landmarks/landmark_graph.cc	/^bool LandmarkGraph::disj_landmark_exists(const set<FactPair> &lm) const {$/;"	f	class:landmarks::LandmarkGraph
disj_lms_to_nodes	search/landmarks/landmark_graph.h	/^    std::unordered_map<FactPair, LandmarkNode *> disj_lms_to_nodes;$/;"	m	class:landmarks::EdgeType::LandmarkGraph
disjoint_patterns	search/pdbs/pattern_collection_generator_genetic.h	/^    const bool disjoint_patterns;$/;"	m	class:pdbs::PatternCollectionGeneratorGenetic
disjunction_classes	search/landmarks/landmark_factory_rpg_sasp.h	/^    std::vector<std::vector<int>> disjunction_classes;$/;"	m	class:landmarks::LandmarkFactoryRpgSasp
disjunctive	search/landmarks/landmark_graph.h	/^    bool disjunctive;$/;"	m	class:landmarks::EdgeType::LandmarkNode
disjunctive_landmarks	search/landmarks/landmark_factory.h	/^    const bool disjunctive_landmarks;$/;"	m	class:landmarks::LandmarkFactory
distances	search/domain_transition_graph.h	/^    std::vector<int> distances;$/;"	m	struct:ValueNode
distances	search/merge_and_shrink/factored_transition_system.h	/^    std::vector<std::unique_ptr<Distances>> distances;$/;"	m	class:merge_and_shrink::FactoredTransitionSystem
distances	search/pdbs/pattern_database.h	/^    std::vector<int> distances;$/;"	m	class:pdbs::PatternDatabase
diverse_functions	search/potentials/diverse_potential_heuristics.h	/^    std::vector<std::unique_ptr<PotentialFunction>> diverse_functions;$/;"	m	class:potentials::DiversePotentialHeuristics
djkstra_search	search/search_engines/kstar.cc	/^void KStar::djkstra_search() {$/;"	f	class:kstar::KStar
do_insertion	search/open_lists/alternation_open_list.cc	/^void AlternationOpenList<Entry>::do_insertion($/;"	f	class:AlternationOpenList
do_insertion	search/open_lists/epsilon_greedy_open_list.cc	/^void EpsilonGreedyOpenList<Entry>::do_insertion($/;"	f	class:EpsilonGreedyOpenList
do_insertion	search/open_lists/pareto_open_list.cc	/^void ParetoOpenList<Entry>::do_insertion($/;"	f	class:ParetoOpenList
do_insertion	search/open_lists/standard_scalar_open_list.cc	/^void StandardScalarOpenList<Entry>::do_insertion($/;"	f	class:StandardScalarOpenList
do_insertion	search/open_lists/tiebreaking_open_list.cc	/^void TieBreakingOpenList<Entry>::do_insertion($/;"	f	class:TieBreakingOpenList
do_insertion	search/open_lists/type_based_open_list.cc	/^void TypeBasedOpenList<Entry>::do_insertion($/;"	f	class:TypeBasedOpenList
do_intersection	search/landmarks/landmark_status_manager.h	/^    const bool do_intersection;$/;"	m	class:landmarks::LandmarkStatusManager
do_refine_to_equitable	search/bliss/graph.cc	/^AbstractGraph::do_refine_to_equitable()$/;"	f	class:bliss::AbstractGraph
document_hide	search/options/option_parser.cc	/^void OptionParser::document_hide() const {$/;"	f	class:options::OptionParser
document_language_support	search/options/option_parser.cc	/^void OptionParser::document_language_support(string feature,$/;"	f	class:options::OptionParser
document_note	search/options/option_parser.cc	/^void OptionParser::document_note(string name,$/;"	f	class:options::OptionParser
document_property	search/options/option_parser.cc	/^void OptionParser::document_property(string property, string note) const {$/;"	f	class:options::OptionParser
document_synopsis	search/options/option_parser.cc	/^void OptionParser::document_synopsis(string name, string note) const {$/;"	f	class:options::OptionParser
document_values	search/options/option_parser.cc	/^void OptionParser::document_values(string argument,$/;"	f	class:options::OptionParser
documentation	search/options/registries.h	/^    std::string documentation;$/;"	m	class:options::PluginTypeInfo
does_fire	search/global_operator.h	/^    bool does_fire(const GlobalState &state) const {$/;"	f	struct:GlobalEffect
does_fire	search/task_proxy.h	/^inline bool does_fire(EffectProxy effect, const State &state) {$/;"	f
dom_sum_by_var	search/structural_symmetries/permutation.cc	/^vector<int> Permutation::dom_sum_by_var;$/;"	m	class:Permutation	file:
dom_sum_by_var	search/structural_symmetries/permutation.h	/^    static std::vector<int> dom_sum_by_var;$/;"	m	class:Permutation
domain_connectivity	search/landmarks/landmark_factory_rpg_sasp.cc	/^bool LandmarkFactoryRpgSasp::domain_connectivity(const State &initial_state,$/;"	f	class:landmarks::LandmarkFactoryRpgSasp
domain_size	search/merge_and_shrink/merge_and_shrink_representation.h	/^    int domain_size;$/;"	m	class:merge_and_shrink::MergeAndShrinkRepresentation
domain_size	search/tasks/domain_abstracted_task.h	/^    const std::vector<int> domain_size;$/;"	m	class:extra_tasks::DomainAbstractedTask
domain_size	search/tasks/domain_abstracted_task_factory.cc	/^    vector<int> domain_size;$/;"	m	class:extra_tasks::DomainAbstractedTaskFactory	file:
domain_subsets	search/cegar/domains.h	/^    std::vector<Bitset> domain_subsets;$/;"	m	class:cegar::Domains
domains	search/cegar/abstract_state.h	/^    Domains domains;$/;"	m	class:cegar::AbstractState
domains_intersect	search/cegar/abstract_state.cc	/^bool AbstractState::domains_intersect(const AbstractState *other, int var) const {$/;"	f	class:cegar::AbstractState
dominates	search/open_lists/pareto_open_list.cc	/^bool ParetoOpenList<Entry>::dominates($/;"	f	class:ParetoOpenList
done	search/merge_and_shrink/merge_tree.h	/^    bool done() const {$/;"	f	class:merge_and_shrink::MergeTree
done	search/variable_order_finder.cc	/^bool VariableOrderFinder::done() const {$/;"	f	class:VariableOrderFinder
downheap	search/bliss/heap.cc	/^void Heap::downheap(unsigned int index)$/;"	f	class:bliss::Heap
dry_run	search/options/option_parser.cc	/^bool OptionParser::dry_run() const {$/;"	f	class:options::OptionParser
dry_run_	search/options/option_parser.h	/^    bool dry_run_;$/;"	m	class:options::OptionParser
dtg_successors	search/landmarks/landmark_factory_rpg_sasp.h	/^    std::vector<std::vector<std::unordered_set<int>>> dtg_successors;$/;"	m	class:landmarks::LandmarkFactoryRpgSasp
dump	search/bliss/defs.h	/^    virtual void dump() const {$/;"	f	struct:bliss::BlissMemoryOut
dump	search/bliss/defs.h	/^    virtual void dump() const {$/;"	f	struct:bliss::BlissTimeOut
dump	search/causal_graph.cc	/^void CausalGraph::dump(const TaskProxy &task_proxy) const {$/;"	f	class:CausalGraph
dump	search/global_operator.cc	/^void GlobalCondition::dump() const {$/;"	f	class:GlobalCondition
dump	search/global_operator.cc	/^void GlobalEffect::dump() const {$/;"	f	class:GlobalEffect
dump	search/global_operator.cc	/^void GlobalOperator::dump() const {$/;"	f	class:GlobalOperator
dump	search/landmarks/landmark_graph.cc	/^void LandmarkGraph::dump(const VariablesProxy &variables) const {$/;"	f	class:landmarks::LandmarkGraph
dump	search/merge_and_shrink/distances.cc	/^void Distances::dump() const {$/;"	f	class:merge_and_shrink::Distances
dump	search/merge_and_shrink/factored_transition_system.cc	/^void FactoredTransitionSystem::dump(int index) const {$/;"	f	class:merge_and_shrink::FactoredTransitionSystem
dump	search/merge_and_shrink/merge_and_shrink_representation.cc	/^void MergeAndShrinkRepresentationLeaf::dump() const {$/;"	f	class:merge_and_shrink::MergeAndShrinkRepresentationLeaf
dump	search/merge_and_shrink/merge_and_shrink_representation.cc	/^void MergeAndShrinkRepresentationMerge::dump() const {$/;"	f	class:merge_and_shrink::MergeAndShrinkRepresentationMerge
dump	search/merge_and_shrink/shrink_bisimulation.cc	/^    void dump() const {$/;"	f	struct:merge_and_shrink::Signature
dump	search/pdbs/match_tree.cc	/^void MatchTree::dump() const {$/;"	f	class:pdbs::MatchTree
dump	search/pdbs/pattern_database.cc	/^void AbstractOperator::dump(const Pattern &pattern,$/;"	f	class:pdbs::AbstractOperator
dump	search/pdbs/zero_one_pdbs.cc	/^void ZeroOnePDBs::dump() const {$/;"	f	class:pdbs::ZeroOnePDBs
dump	search/search_space.cc	/^void SearchNode::dump() const {$/;"	f	class:SearchNode
dump	search/search_space.cc	/^void SearchSpace::dump() const {$/;"	f	class:SearchSpace
dump	search/structural_symmetries/group.h	/^    bool dump;$/;"	m	class:Group
dump	search/structural_symmetries/permutation.cc	/^void Permutation::dump() const {$/;"	f	class:Permutation
dump	translate/build_model.py	/^    def dump(self):$/;"	m	class:Unifier
dump	translate/build_model.py	/^    def dump(self, indent):$/;"	m	class:LeafGenerator
dump	translate/build_model.py	/^    def dump(self, indent):$/;"	m	class:MatchGenerator
dump	translate/constraints.py	/^    def dump(self):$/;"	m	class:ConstraintSystem
dump	translate/pddl/actions.py	/^    def dump(self):$/;"	m	class:Action
dump	translate/pddl/actions.py	/^    def dump(self):$/;"	m	class:PropositionalAction
dump	translate/pddl/axioms.py	/^    def dump(self):$/;"	m	class:Axiom
dump	translate/pddl/axioms.py	/^    def dump(self):$/;"	m	class:PropositionalAxiom
dump	translate/pddl/conditions.py	/^    def dump(self, indent="  "):$/;"	m	class:Condition
dump	translate/pddl/effects.py	/^    def dump(self):$/;"	m	class:Effect
dump	translate/pddl/effects.py	/^    def dump(self, indent="  "):$/;"	m	class:ConditionalEffect
dump	translate/pddl/effects.py	/^    def dump(self, indent="  "):$/;"	m	class:ConjunctiveEffect
dump	translate/pddl/effects.py	/^    def dump(self, indent="  "):$/;"	m	class:CostEffect
dump	translate/pddl/effects.py	/^    def dump(self, indent="  "):$/;"	m	class:SimpleEffect
dump	translate/pddl/effects.py	/^    def dump(self, indent="  "):$/;"	m	class:UniversalEffect
dump	translate/pddl/f_expression.py	/^    def dump(self, indent="  "):$/;"	m	class:FunctionAssignment
dump	translate/pddl/f_expression.py	/^    def dump(self, indent="  "):$/;"	m	class:FunctionalExpression
dump	translate/pddl/f_expression.py	/^    def dump(self, indent="  "):$/;"	m	class:PrimitiveNumericExpression
dump	translate/pddl/tasks.py	/^    def dump(self):$/;"	m	class:Task
dump	translate/pddl_to_prolog.py	/^    def dump(self, file=None):$/;"	m	class:PrologProgram
dump	translate/sas_tasks.py	/^    def dump(self):$/;"	m	class:SASAxiom
dump	translate/sas_tasks.py	/^    def dump(self):$/;"	m	class:SASGoal
dump	translate/sas_tasks.py	/^    def dump(self):$/;"	m	class:SASInit
dump	translate/sas_tasks.py	/^    def dump(self):$/;"	m	class:SASMutexGroup
dump	translate/sas_tasks.py	/^    def dump(self):$/;"	m	class:SASOperator
dump	translate/sas_tasks.py	/^    def dump(self):$/;"	m	class:SASTask
dump	translate/sas_tasks.py	/^    def dump(self):$/;"	m	class:SASVariables
dump	translate/simplify.py	/^    def dump(self):$/;"	m	class:DomainTransitionGraph
dump	translate/simplify.py	/^    def dump(self):$/;"	m	class:VarValueRenaming
dump_SAS	search/global_operator.cc	/^void GlobalOperator::dump_SAS(ofstream& os, const vector<GlobalCondition>& extra_pre,$/;"	f	class:GlobalOperator
dump_SAS	search/global_operator.h	/^    void dump_SAS(std::ofstream& os) const {$/;"	f	struct:GlobalCondition
dump_astar_search_space	search/search_engines/kstar.cc	/^void KStar::dump_astar_search_space() {$/;"	f	class:kstar::KStar
dump_axiom_to_SAS	search/abstract_task.cc	/^void AbstractTask::dump_axiom_to_SAS(std::ostream &os, int op_no) const {$/;"	f	class:AbstractTask
dump_axioms_to_SAS	search/abstract_task.cc	/^void AbstractTask::dump_axioms_to_SAS(std::ostream &os) const {$/;"	f	class:AbstractTask
dump_condition_SAS	search/globals.cc	/^void dump_condition_SAS(std::ostream& os, GlobalCondition cond) {$/;"	f
dump_djkstra_search	search/search_engines/kstar.cc	/^void KStar::dump_djkstra_search() {$/;"	f	class:kstar::KStar
dump_dot	search/search_space.cc	/^void SearchSpace::dump_dot() const {$/;"	f	class:SearchSpace
dump_dot_graph	search/merge_and_shrink/transition_system.cc	/^void TransitionSystem::dump_dot_graph() const {$/;"	f	class:merge_and_shrink::TransitionSystem
dump_everything	search/globals.cc	/^void dump_everything() {$/;"	f
dump_fdr	search/global_state.cc	/^void GlobalState::dump_fdr() const {$/;"	f	class:GlobalState
dump_fdr	search/structural_symmetries/permutation.cc	/^void Permutation::dump_fdr() const {$/;"	f	class:Permutation
dump_fdr	search/task_proxy.cc	/^void State::dump_fdr() const {$/;"	f	class:State
dump_forbid_plan_reformulation	search/search_engines/eager_search.h	/^    bool dump_forbid_plan_reformulation;$/;"	m	class:eager_search::EagerSearch
dump_function_specific_options	search/merge_and_shrink/merge_scoring_function.h	/^    virtual void dump_function_specific_options() const {}$/;"	f	class:merge_and_shrink::MergeScoringFunction
dump_function_specific_options	search/merge_and_shrink/merge_scoring_function_single_random.cc	/^void MergeScoringFunctionSingleRandom::dump_function_specific_options() const {$/;"	f	class:merge_and_shrink::MergeScoringFunctionSingleRandom
dump_function_specific_options	search/merge_and_shrink/merge_scoring_function_total_order.cc	/^void MergeScoringFunctionTotalOrder::dump_function_specific_options() const {$/;"	f	class:merge_and_shrink::MergeScoringFunctionTotalOrder
dump_generators	search/structural_symmetries/group.cc	/^void Group::dump_generators() const {$/;"	f	class:Group
dump_goal	search/globals.cc	/^void dump_goal() {$/;"	f
dump_goal_to_SAS	search/abstract_task.cc	/^void AbstractTask::dump_goal_to_SAS(std::ostream &os) const {$/;"	f	class:AbstractTask
dump_initial_state_to_SAS	search/abstract_task.cc	/^void AbstractTask::dump_initial_state_to_SAS(std::ostream &os) const {$/;"	f	class:AbstractTask
dump_labels	search/merge_and_shrink/labels.cc	/^void Labels::dump_labels() const {$/;"	f	class:merge_and_shrink::Labels
dump_labels_and_transitions	search/merge_and_shrink/transition_system.cc	/^void TransitionSystem::dump_labels_and_transitions() const {$/;"	f	class:merge_and_shrink::TransitionSystem
dump_metric	search/globals.cc	/^void dump_metric(std::ostream& os) {$/;"	f
dump_mutexes	search/globals.cc	/^void dump_mutexes(std::ostream& os) {$/;"	f
dump_node	search/landmarks/landmark_graph.cc	/^void LandmarkGraph::dump_node(const VariablesProxy &variables, const LandmarkNode *node_p) const {$/;"	f	class:landmarks::LandmarkGraph
dump_operator_pre_post_to_SAS	search/abstract_task.cc	/^void AbstractTask::dump_operator_pre_post_to_SAS(std::ostream& os, int pre, const GlobalEffect& eff) const {$/;"	f	class:AbstractTask
dump_operator_to_SAS	search/abstract_task.cc	/^void AbstractTask::dump_operator_to_SAS(std::ostream &os, int op_no) const {$/;"	f	class:AbstractTask
dump_operators_to_SAS	search/abstract_task.cc	/^void AbstractTask::dump_operators_to_SAS(std::ostream &os) const {$/;"	f	class:AbstractTask
dump_options	search/merge_and_shrink/label_reduction.cc	/^void LabelReduction::dump_options() const {$/;"	f	class:merge_and_shrink::LabelReduction
dump_options	search/merge_and_shrink/merge_and_shrink_heuristic.cc	/^void MergeAndShrinkHeuristic::dump_options() const {$/;"	f	class:merge_and_shrink::MergeAndShrinkHeuristic
dump_options	search/merge_and_shrink/merge_scoring_function.cc	/^void MergeScoringFunction::dump_options() const {$/;"	f	class:merge_and_shrink::MergeScoringFunction
dump_options	search/merge_and_shrink/merge_selector.cc	/^void MergeSelector::dump_options() const {$/;"	f	class:merge_and_shrink::MergeSelector
dump_options	search/merge_and_shrink/merge_strategy_factory.cc	/^void MergeStrategyFactory::dump_options() const {$/;"	f	class:merge_and_shrink::MergeStrategyFactory
dump_options	search/merge_and_shrink/merge_tree_factory.cc	/^void MergeTreeFactory::dump_options() const {$/;"	f	class:merge_and_shrink::MergeTreeFactory
dump_options	search/merge_and_shrink/shrink_strategy.cc	/^void ShrinkStrategy::dump_options() const {$/;"	f	class:merge_and_shrink::ShrinkStrategy
dump_path_graph	search/search_engines/top_k_eager_search.cc	/^void TopKEagerSearch::dump_path_graph() {$/;"	f	class:top_k_eager_search::TopKEagerSearch
dump_pddl	search/global_state.cc	/^void GlobalState::dump_pddl() const {$/;"	f	class:GlobalState
dump_pddl	search/task_proxy.cc	/^void State::dump_pddl() const {$/;"	f	class:State
dump_plan_forbid_reformulation_sas	search/globals.cc	/^void dump_plan_forbid_reformulation_sas(const char* filename,$/;"	f
dump_pre_post_SAS	search/global_operator.cc	/^void GlobalOperator::dump_pre_post_SAS(std::ofstream& os, int pre, GlobalEffect eff) const {$/;"	f	class:GlobalOperator
dump_pre_post_SAS	search/globals.cc	/^void dump_pre_post_SAS(std::ostream& os, int pre, GlobalEffect eff) {$/;"	f
dump_recursive	search/pdbs/match_tree.cc	/^void MatchTree::dump_recursive(Node *node) const {$/;"	f	class:pdbs::MatchTree
dump_search_space	search/search_engines/eager_search.cc	/^void EagerSearch::dump_search_space() const {$/;"	f	class:eager_search::EagerSearch
dump_specific_options	search/merge_and_shrink/merge_selector.h	/^    virtual void dump_specific_options() const {}$/;"	f	class:merge_and_shrink::MergeSelector
dump_specific_options	search/merge_and_shrink/merge_selector_score_based_filtering.cc	/^void MergeSelectorScoreBasedFiltering::dump_specific_options() const {$/;"	f	class:merge_and_shrink::MergeSelectorScoreBasedFiltering
dump_statistics	translate/translate.py	/^def dump_statistics(sas_task):$/;"	f
dump_strategy_specific_options	search/merge_and_shrink/merge_strategy_factory_precomputed.cc	/^void MergeStrategyFactoryPrecomputed::dump_strategy_specific_options() const {$/;"	f	class:merge_and_shrink::MergeStrategyFactoryPrecomputed
dump_strategy_specific_options	search/merge_and_shrink/merge_strategy_factory_stateless.cc	/^void MergeStrategyFactoryStateless::dump_strategy_specific_options() const {$/;"	f	class:merge_and_shrink::MergeStrategyFactoryStateless
dump_strategy_specific_options	search/merge_and_shrink/shrink_bisimulation.cc	/^void ShrinkBisimulation::dump_strategy_specific_options() const {$/;"	f	class:merge_and_shrink::ShrinkBisimulation
dump_strategy_specific_options	search/merge_and_shrink/shrink_fh.cc	/^void ShrinkFH::dump_strategy_specific_options() const {$/;"	f	class:merge_and_shrink::ShrinkFH
dump_table	search/heuristics/hm_heuristic.cc	/^void HMHeuristic::dump_table() const {$/;"	f	class:hm_heuristic::HMHeuristic
dump_task	translate/translate.py	/^def dump_task(init, goals, actions, axioms, axiom_layer_dict):$/;"	f
dump_to_SAS	search/abstract_task.cc	/^void AbstractTask::dump_to_SAS(ostream &os) const {$/;"	f	class:AbstractTask
dump_tree_specific_options	search/merge_and_shrink/merge_tree_factory.h	/^    virtual void dump_tree_specific_options() const {}$/;"	f	class:merge_and_shrink::MergeTreeFactory
dump_tree_specific_options	search/merge_and_shrink/merge_tree_factory_linear.cc	/^void MergeTreeFactoryLinear::dump_tree_specific_options() const {$/;"	f	class:merge_and_shrink::MergeTreeFactoryLinear
dump_var_vals	search/structural_symmetries/permutation.cc	/^void Permutation::dump_var_vals() const {$/;"	f	class:Permutation
dump_variable	search/globals.cc	/^void dump_variable(std::ostream& os, std::string name, int axiom_layer, int domain, const std::vector<std::string>& values) {$/;"	f
dump_variable_order_type	search/variable_order_finder.cc	/^void dump_variable_order_type(VariableOrderType variable_order_type) {$/;"	f
dump_variables_equivalence_classes	search/structural_symmetries/group.cc	/^void Group::dump_variables_equivalence_classes() const {$/;"	f	class:Group
dump_variables_to_SAS	search/abstract_task.cc	/^void AbstractTask::dump_variables_to_SAS(std::ostream &os) const {$/;"	f	class:AbstractTask
dump_version	search/globals.cc	/^void dump_version(std::ostream& os) {$/;"	f
dynamic_bitset	search/algorithms/dynamic_bitset.h	/^namespace dynamic_bitset {$/;"	n
eager_search	search/search_engines/eager_search.cc	/^namespace eager_search {$/;"	n	file:
eager_search	search/search_engines/eager_search.h	/^namespace eager_search {$/;"	n
edge_add	search/landmarks/landmark_factory.cc	/^void LandmarkFactory::edge_add(LandmarkNode &from, LandmarkNode &to,$/;"	f	class:landmarks::LandmarkFactory
edges	search/bliss/graph.h	/^    std::vector<unsigned int> edges;$/;"	m	class:bliss::Graph::Vertex
edges_in	search/bliss/graph.h	/^    std::vector<unsigned int> edges_in;$/;"	m	class:bliss::Digraph::Vertex
edges_out	search/bliss/graph.h	/^    std::vector<unsigned int> edges_out;$/;"	m	class:bliss::Digraph::Vertex
eff	search/landmarks/landmark_factory_h_m.h	/^    std::vector<int> eff;$/;"	m	struct:landmarks::PMOp
eff_eff_builder	search/causal_graph.cc	/^    IntRelationBuilder eff_eff_builder;$/;"	m	struct:CausalGraphBuilder	file:
eff_index	search/task_proxy.h	/^    int eff_index;$/;"	m	class:EffectConditionsProxy
eff_index	search/task_proxy.h	/^    int eff_index;$/;"	m	class:EffectProxy
eff_pre_builder	search/causal_graph.cc	/^    IntRelationBuilder eff_pre_builder;$/;"	m	struct:CausalGraphBuilder	file:
eff_to_eff	search/causal_graph.h	/^    IntRelation eff_to_eff;$/;"	m	class:CausalGraph
eff_to_pre	search/causal_graph.h	/^    IntRelation eff_to_pre;$/;"	m	class:CausalGraph
effect	search/domain_transition_graph.h	/^    std::vector<LocalAssignment> effect;$/;"	m	struct:ValueTransitionLabel
effect	search/heuristics/relaxation_heuristic.h	/^    Proposition *effect;$/;"	m	struct:relaxation_heuristic::UnaryOperator
effect	search/landmarks/exploration.h	/^    ExProposition *effect;$/;"	m	struct:landmarks::ExUnaryOperator
effect_always_happens	search/landmarks/landmark_factory.cc	/^bool LandmarkFactory::effect_always_happens(const VariablesProxy &variables,$/;"	f	class:landmarks::LandmarkFactory
effect_can_be_overwritten	search/structural_symmetries/graph_creator.cc	/^bool GraphCreator::effect_can_be_overwritten(int ind, const std::vector<GlobalEffect> &effects) const {$/;"	f	class:GraphCreator
effect_literal	search/axioms.h	/^        AxiomLiteral *effect_literal;$/;"	m	struct:AxiomEvaluator::AxiomRule
effect_of	search/heuristics/lm_cut_landmarks.h	/^    std::vector<RelaxedOperator *> effect_of;$/;"	m	struct:lm_cut_heuristic::RelaxedProposition
effect_val	search/axioms.h	/^        int effect_val;$/;"	m	struct:AxiomEvaluator::AxiomRule
effect_var	search/axioms.h	/^        int effect_var;$/;"	m	struct:AxiomEvaluator::AxiomRule
effects	search/global_operator.h	/^    std::vector<GlobalEffect> effects;$/;"	m	class:GlobalOperator
effects	search/heuristics/lm_cut_landmarks.h	/^    std::vector<RelaxedProposition *> effects;$/;"	m	struct:lm_cut_heuristic::RelaxedOperator
ehc	search/search_engines/enforced_hill_climbing_search.cc	/^SearchStatus EnforcedHillClimbingSearch::ehc() {$/;"	f	class:enforced_hill_climbing_search::EnforcedHillClimbingSearch
element	search/bliss/orbit.h	/^    unsigned int element;$/;"	m	class:bliss::Orbit::OrbitEntry
element_allocator	search/algorithms/segmented_vector.h	/^    ElementAllocator element_allocator;$/;"	m	class:segmented_vector::SegmentedArrayVector
element_at	search/bliss/kstack.h	/^  Type element_at(unsigned int i)$/;"	f	class:bliss::KStack
element_positions	search/algorithms/equivalence_relation.h	/^    ElementPositionMap element_positions;$/;"	m	class:equivalence_relation::EquivalenceRelation
element_to_cell_map	search/bliss/partition.h	/^  Cell **element_to_cell_map;$/;"	m	class:bliss::Partition
elements	search/algorithms/equivalence_relation.h	/^    std::list<int> elements;$/;"	m	class:equivalence_relation::Block
elements	search/bliss/partition.h	/^  unsigned int *elements;$/;"	m	class:bliss::Partition
elements	search/lp/lp_solver.h	/^    std::vector<double> elements;$/;"	m	class:lp::LPSolver
elements_per_array	search/algorithms/segmented_vector.h	/^    const size_t elements_per_array;$/;"	m	class:segmented_vector::SegmentedArrayVector
elements_per_segment	search/algorithms/segmented_vector.h	/^    const size_t elements_per_segment;$/;"	m	class:segmented_vector::SegmentedArrayVector
eliminate_existential_quantifiers_from_axioms	translate/normalize.py	/^def eliminate_existential_quantifiers_from_axioms(task):$/;"	f
eliminate_existential_quantifiers_from_conditional_effects	translate/normalize.py	/^def eliminate_existential_quantifiers_from_conditional_effects(task):$/;"	f
eliminate_existential_quantifiers_from_preconditions	translate/normalize.py	/^def eliminate_existential_quantifiers_from_preconditions(task):$/;"	f
empty	search/algorithms/equivalence_relation.cc	/^bool Block::empty() const {$/;"	f	class:equivalence_relation::Block
empty	search/algorithms/ordered_set.h	/^    bool empty() const {$/;"	f	class:ordered_set::OrderedSet
empty	search/algorithms/priority_queues.h	/^    bool empty() const {$/;"	f	class:priority_queues::AdaptiveQueue
empty	search/algorithms/priority_queues.h	/^    virtual bool empty() const {$/;"	f	class:priority_queues::BucketQueue
empty	search/algorithms/priority_queues.h	/^    virtual bool empty() const {$/;"	f	class:priority_queues::HeapQueue
empty	search/ext/tree.hh	/^bool tree<T, tree_node_allocator>::empty() const$/;"	f	class:tree
empty	search/landmarks/landmark_cost_assignment.h	/^    const std::set<int> empty;$/;"	m	class:landmarks::LandmarkCostAssignment
empty	search/lp/lp_solver.cc	/^bool LPConstraint::empty() const {$/;"	f	class:lp::LPConstraint
empty	search/merge_and_shrink/label_equivalence_relation.h	/^    bool empty() const {$/;"	f	class:merge_and_shrink::LabelGroup
empty	search/open_lists/alternation_open_list.cc	/^bool AlternationOpenList<Entry>::empty() const {$/;"	f	class:AlternationOpenList
empty	search/open_lists/epsilon_greedy_open_list.cc	/^bool EpsilonGreedyOpenList<Entry>::empty() const {$/;"	f	class:EpsilonGreedyOpenList
empty	search/open_lists/pareto_open_list.cc	/^bool ParetoOpenList<Entry>::empty() const {$/;"	f	class:ParetoOpenList
empty	search/open_lists/standard_scalar_open_list.cc	/^bool StandardScalarOpenList<Entry>::empty() const {$/;"	f	class:StandardScalarOpenList
empty	search/open_lists/tiebreaking_open_list.cc	/^bool TieBreakingOpenList<Entry>::empty() const {$/;"	f	class:TieBreakingOpenList
empty	search/open_lists/type_based_open_list.cc	/^bool TypeBasedOpenList<Entry>::empty() const {$/;"	f	class:TypeBasedOpenList
empty	search/task_proxy.h	/^    bool empty() const {$/;"	f	class:AxiomsProxy
empty	search/task_proxy.h	/^    bool empty() const {$/;"	f	class:ConditionsProxy
empty	search/task_proxy.h	/^    bool empty() const {$/;"	f	class:OperatorsProxy
empty	translate/build_model.py	/^    def empty(self):$/;"	m	class:LeafGenerator
empty	translate/build_model.py	/^    def empty(self):$/;"	m	class:MatchGenerator
end	search/algorithms/equivalence_relation.h	/^    BlockListConstIter end() const {return blocks.end(); }$/;"	f	class:equivalence_relation::EquivalenceRelation
end	search/algorithms/equivalence_relation.h	/^    ElementListConstIter end() const {return elements.end(); }$/;"	f	class:equivalence_relation::Block
end	search/algorithms/equivalence_relation.h	/^    ElementListIter end() {return elements.end(); }$/;"	f	class:equivalence_relation::Block
end	search/algorithms/ordered_set.h	/^    typename std::vector<T>::const_iterator end() const {$/;"	f	class:ordered_set::OrderedSet
end	search/bliss/kqueue.h	/^  Type *entries, *end;$/;"	m	class:bliss::KQueue
end	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::pre_order_iterator tree<T, tree_node_allocator>::end() const$/;"	f	class:tree
end	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::sibling_iterator tree<T, tree_node_allocator>::end(const iterator_base& pos) const$/;"	f	class:tree
end	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::sibling_iterator tree<T, tree_node_allocator>::iterator_base::end() const$/;"	f	class:tree::iterator_base
end	search/merge_and_shrink/factored_transition_system.h	/^    FTSConstIterator end() const {$/;"	f	class:merge_and_shrink::FactoredTransitionSystem
end	search/merge_and_shrink/label_equivalence_relation.h	/^    LabelConstIter end() const {$/;"	f	class:merge_and_shrink::LabelGroup
end	search/merge_and_shrink/transition_system.h	/^    TSConstIterator end() const {$/;"	f	class:merge_and_shrink::TransitionSystem
end	search/options/registries.h	/^    Map::const_iterator end() const {$/;"	f	class:options::PluginTypeRegistry
end	search/per_state_information.h	/^    const_iterator end(const StateRegistry *registry) const {$/;"	f	class:PerStateInformation
end	search/task_proxy.h	/^    FactsProxyIterator end() const {$/;"	f	class:FactsProxy
end	search/task_proxy.h	/^inline ProxyIterator<ProxyCollection> end(ProxyCollection &collection) {$/;"	f
end_breadth_first	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::breadth_first_queued_iterator tree<T, tree_node_allocator>::end_breadth_first() const$/;"	f	class:tree
end_fixed	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::fixed_depth_iterator tree<T, tree_node_allocator>::end_fixed(const iterator_base& pos, unsigned int dp) const$/;"	f	class:tree
end_leaf	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::leaf_iterator tree<T, tree_node_allocator>::end_leaf() const$/;"	f	class:tree
end_leaf	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::leaf_iterator tree<T, tree_node_allocator>::end_leaf(const iterator_base& top) const$/;"	f	class:tree
end_of_roots_children	search/options/parse_tree.h	/^typename tree<T>::sibling_iterator end_of_roots_children(const tree<T> &tr) {$/;"	f	namespace:options
end_post	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::post_order_iterator tree<T, tree_node_allocator>::end_post() const$/;"	f	class:tree
enforced_hill_climbing_search	search/search_engines/enforced_hill_climbing_search.cc	/^namespace enforced_hill_climbing_search {$/;"	n	file:
enforced_hill_climbing_search	search/search_engines/enforced_hill_climbing_search.h	/^namespace enforced_hill_climbing_search {$/;"	n
engine_configs	search/search_engines/iterated_search.h	/^    const std::vector<options::ParseTree> engine_configs;$/;"	m	class:iterated_search::IteratedSearch
enqueue_func	translate/invariant_finder.py	/^    def enqueue_func(invariant):$/;"	f	function:find_invariants
enqueue_if_necessary	search/heuristics/additive_heuristic.h	/^    void enqueue_if_necessary(Proposition *prop, int cost, UnaryOperator *op) {$/;"	f	class:additive_heuristic::AdditiveHeuristic
enqueue_if_necessary	search/heuristics/lm_cut_landmarks.h	/^    void enqueue_if_necessary(RelaxedProposition *prop, int cost) {$/;"	f	class:lm_cut_heuristic::LandmarkCutLandmarks
enqueue_if_necessary	search/heuristics/max_heuristic.h	/^    void enqueue_if_necessary(Proposition *prop, int cost) {$/;"	f	class:max_heuristic::HSPMaxHeuristic
enqueue_if_necessary	search/landmarks/exploration.cc	/^void Exploration::enqueue_if_necessary(ExProposition *prop, int cost, int depth,$/;"	f	class:landmarks::Exploration
enqueue_pattern_if_new	search/pdbs/pattern_collection_generator_systematic.cc	/^void PatternCollectionGeneratorSystematic::enqueue_pattern_if_new($/;"	f	class:pdbs::PatternCollectionGeneratorSystematic
ensure_conjunction_sat	translate/invariants.py	/^def ensure_conjunction_sat(system, *parts):$/;"	f
ensure_cover	translate/invariants.py	/^def ensure_cover(system, literal, invariant, inv_vars):$/;"	f
ensure_inequality	translate/invariants.py	/^def ensure_inequality(system, literal1, literal2):$/;"	f
enter_block	search/utils/logging.cc	/^void MemoryTracer::enter_block(const string &block_name) {$/;"	f	class:utils::MemoryTracer
entries	search/bliss/kqueue.h	/^  Type *entries, *end;$/;"	m	class:bliss::KQueue
entries	search/bliss/kstack.h	/^  Type *entries;$/;"	m	class:bliss::KStack
entries_by_registry	search/per_state_information.h	/^    EntryVectorMap entries_by_registry;$/;"	m	class:PerStateInformation
entry	search/open_lists/epsilon_greedy_open_list.cc	/^        Entry entry;$/;"	m	struct:EpsilonGreedyOpenList::HeapNode	file:
entry_allocator	search/algorithms/segmented_vector.h	/^    EntryAllocator entry_allocator;$/;"	m	class:segmented_vector::SegmentedVector
epsilon	search/open_lists/epsilon_greedy_open_list.cc	/^    double epsilon;$/;"	m	class:EpsilonGreedyOpenList	file:
eqref_hash	search/bliss/graph.cc	/^  UintSeqHash eqref_hash;$/;"	m	class:bliss::TreeNode	file:
eqref_hash	search/bliss/graph.cc	/^  UintSeqHash eqref_hash;$/;"	m	struct:bliss::__anon3	file:
eqref_hash	search/bliss/graph.h	/^  UintSeqHash eqref_hash;$/;"	m	class:bliss::AbstractGraph
eqref_max_certificate_index	search/bliss/graph.h	/^  unsigned int eqref_max_certificate_index;$/;"	m	class:bliss::AbstractGraph
equal	search/ext/tree.hh	/^bool tree<T, tree_node_allocator>::equal(const iter& one_, const iter& two, const iter& three_) const$/;"	f	class:tree
equal	search/ext/tree.hh	/^bool tree<T, tree_node_allocator>::equal(const iter& one_, const iter& two, const iter& three_, BinaryPredicate fun) const$/;"	f	class:tree
equal_subtree	search/ext/tree.hh	/^bool tree<T, tree_node_allocator>::equal_subtree(const iter& one_, const iter& two_) const$/;"	f	class:tree
equal_subtree	search/ext/tree.hh	/^bool tree<T, tree_node_allocator>::equal_subtree(const iter& one_, const iter& two_, BinaryPredicate fun) const$/;"	f	class:tree
equivalence_relation	search/algorithms/equivalence_relation.cc	/^namespace equivalence_relation {$/;"	n	file:
equivalence_relation	search/algorithms/equivalence_relation.h	/^namespace equivalence_relation {$/;"	n
equivalence_relation	search/merge_and_shrink/label_reduction.h	/^namespace equivalence_relation {$/;"	n
erase	search/algorithms/equivalence_relation.cc	/^void Block::erase(ElementListIter it) {$/;"	f	class:equivalence_relation::Block
erase	search/ext/tree.hh	/^iter tree<T, tree_node_allocator>::erase(iter it)$/;"	f	class:tree
erase	search/merge_and_shrink/label_equivalence_relation.h	/^    void erase(LabelIter pos) {$/;"	f	class:merge_and_shrink::LabelGroup
erase_children	search/ext/tree.hh	/^void tree<T, tree_node_allocator>::erase_children(const iterator_base& it)$/;"	f	class:tree
erase_children_and_set_index	search/merge_and_shrink/merge_tree.cc	/^pair<int, int> MergeTreeNode::erase_children_and_set_index(int new_index) {$/;"	f	class:merge_and_shrink::MergeTreeNode
error	search/options/option_parser.cc	/^void OptionParser::error(string msg) {$/;"	f	class:options::OptionParser
estimate_heuristics	search/search_engines/lazy_search.h	/^    std::vector<Heuristic *> estimate_heuristics;$/;"	m	class:lazy_search::LazySearch
eval	search/heuristics/hm_heuristic.cc	/^int HMHeuristic::eval(const Tuple &t) const {$/;"	f	class:hm_heuristic::HMHeuristic
eval_results	search/heuristic_cache.h	/^    EvaluationResults eval_results;$/;"	m	class:HeuristicCache
evaluate	search/axioms.cc	/^void AxiomEvaluator::evaluate(PackedStateBin *buffer,$/;"	f	class:AxiomEvaluator
evaluate	search/pdbs/pattern_collection_generator_genetic.cc	/^void PatternCollectionGeneratorGenetic::evaluate(vector<double> &fitness_values) {$/;"	f	class:pdbs::PatternCollectionGeneratorGenetic
evaluated_states	search/search_statistics.h	/^    int evaluated_states; \/\/ no states for which h fn was computed$/;"	m	class:SearchStatistics
evaluations	search/search_statistics.h	/^    int evaluations;      \/\/ no of heuristic evaluations performed$/;"	m	class:SearchStatistics
evaluator	search/evaluators/weighted_evaluator.h	/^    ScalarEvaluator *evaluator;$/;"	m	class:weighted_evaluator::WeightedEvaluator
evaluator	search/open_lists/epsilon_greedy_open_list.cc	/^    ScalarEvaluator *evaluator;$/;"	m	class:EpsilonGreedyOpenList	file:
evaluator	search/open_lists/standard_scalar_open_list.cc	/^    ScalarEvaluator *evaluator;$/;"	m	class:StandardScalarOpenList	file:
evaluators	search/open_lists/pareto_open_list.cc	/^    vector<ScalarEvaluator *> evaluators;$/;"	m	class:ParetoOpenList	file:
evaluators	search/open_lists/tiebreaking_open_list.cc	/^    vector<ScalarEvaluator *> evaluators;$/;"	m	class:TieBreakingOpenList	file:
evaluators	search/open_lists/type_based_open_list.cc	/^    vector<ScalarEvaluator *> evaluators;$/;"	m	class:TypeBasedOpenList	file:
exact_same_disj_landmark_exists	search/landmarks/landmark_graph.cc	/^bool LandmarkGraph::exact_same_disj_landmark_exists(const set<FactPair> &lm) const {$/;"	f	class:landmarks::LandmarkGraph
exit_handler	search/utils/system_unix.cc	/^void exit_handler(int, void *) {$/;"	f	namespace:utils
exit_with	search/utils/system.cc	/^void exit_with(ExitCode exitcode) {$/;"	f	namespace:utils
expand	search/algorithms/max_cliques.cc	/^    void expand(vector<int> &subg, vector<int> &cand) {$/;"	f	class:max_cliques::MaxCliqueComputer	file:
expand	search/search_engines/enforced_hill_climbing_search.cc	/^void EnforcedHillClimbingSearch::expand(EvaluationContext &eval_context) {$/;"	f	class:enforced_hill_climbing_search::EnforcedHillClimbingSearch
expand_group	translate/fact_groups.py	/^def expand_group(group, task, reachable_facts):$/;"	f
expand_node	search/heuristics/cea_heuristic.cc	/^void ContextEnhancedAdditiveHeuristic::expand_node(LocalProblemNode *node) {$/;"	f	class:cea_heuristic::ContextEnhancedAdditiveHeuristic
expand_transition	search/heuristics/cea_heuristic.cc	/^void ContextEnhancedAdditiveHeuristic::expand_transition($/;"	f	class:cea_heuristic::ContextEnhancedAdditiveHeuristic
expanded	search/heuristics/cea_heuristic.cc	/^    bool expanded;$/;"	m	struct:cea_heuristic::LocalProblemNode	file:
expanded_states	search/search_statistics.h	/^    int expanded_states;  \/\/ no states for which successors were generated$/;"	m	class:SearchStatistics
exploration	search/landmarks/landmark_count_heuristic.h	/^    Exploration exploration;$/;"	m	class:landmarks::LandmarkCountHeuristic
explore	translate/instantiate.py	/^def explore(task):$/;"	f
exported_op_ids	search/landmarks/exploration.h	/^    std::vector<int> exported_op_ids;$/;"	m	class:landmarks::Exploration
extend_global_to_local_mapping_if_necessary	search/domain_transition_graph.cc	/^void DTGFactory::extend_global_to_local_mapping_if_necessary($/;"	f	class:DTGFactory
extend_tuple	search/heuristics/hm_heuristic.cc	/^void HMHeuristic::extend_tuple(const Tuple &t, const OperatorProxy &op) {$/;"	f	class:hm_heuristic::HMHeuristic
extra_memory_padding	search/utils/memory.cc	/^static char *extra_memory_padding = nullptr;$/;"	m	namespace:utils	file:
extra_memory_padding_is_reserved	search/utils/memory.cc	/^bool extra_memory_padding_is_reserved() {$/;"	f	namespace:utils
extra_tasks	search/tasks/domain_abstracted_task.cc	/^namespace extra_tasks {$/;"	n	file:
extra_tasks	search/tasks/domain_abstracted_task.h	/^namespace extra_tasks {$/;"	n
extra_tasks	search/tasks/domain_abstracted_task_factory.cc	/^namespace extra_tasks {$/;"	n	file:
extra_tasks	search/tasks/domain_abstracted_task_factory.h	/^namespace extra_tasks {$/;"	n
extra_tasks	search/tasks/modified_goals_task.cc	/^namespace extra_tasks {$/;"	n	file:
extra_tasks	search/tasks/modified_goals_task.h	/^namespace extra_tasks {$/;"	n
extra_tasks	search/tasks/modified_operator_costs_task.cc	/^namespace extra_tasks {$/;"	n	file:
extra_tasks	search/tasks/modified_operator_costs_task.h	/^namespace extra_tasks {$/;"	n
extra_tasks	search/tasks/plan_forbid_reformulated_task.cc	/^namespace extra_tasks {$/;"	n	file:
extra_tasks	search/tasks/plan_forbid_reformulated_task.h	/^namespace extra_tasks {$/;"	n
extract_cost	translate/pddl/effects.py	/^    def extract_cost(self):$/;"	m	class:ConditionalEffect
extract_cost	translate/pddl/effects.py	/^    def extract_cost(self):$/;"	m	class:ConjunctiveEffect
extract_cost	translate/pddl/effects.py	/^    def extract_cost(self):$/;"	m	class:CostEffect
extract_cost	translate/pddl/effects.py	/^    def extract_cost(self):$/;"	m	class:SimpleEffect
extract_cost	translate/pddl/effects.py	/^    def extract_cost(self):$/;"	m	class:UniversalEffect
extract_landmarks	search/landmarks/landmark_factory_zhu_givan.cc	/^void LandmarkFactoryZhuGivan::extract_landmarks($/;"	f	class:landmarks::LandmarkFactoryZhuGivan
extract_lp_solution	search/potentials/potential_optimizer.cc	/^void PotentialOptimizer::extract_lp_solution() {$/;"	f	class:potentials::PotentialOptimizer
extract_refinement_hierarchy	search/cegar/abstraction.h	/^    RefinementHierarchy extract_refinement_hierarchy() {$/;"	f	class:cegar::Abstraction
extract_solution	search/cegar/abstract_search.cc	/^void AbstractSearch::extract_solution($/;"	f	class:cegar::AbstractSearch
extract_solution	search/lp/lp_solver.cc	/^vector<double> LPSolver::extract_solution() const {$/;"	f	class:lp::LPSolver
extract_sorted_entries	search/algorithms/priority_queues.h	/^    void extract_sorted_entries(std::vector<Entry> &result) {$/;"	f	class:priority_queues::BucketQueue
f_evaluator	search/search_engines/eager_search.h	/^    ScalarEvaluator *f_evaluator;$/;"	m	class:eager_search::EagerSearch
f_evaluator	search/search_engines/top_k_eager_search.h	/^    ScalarEvaluator *f_evaluator;$/;"	m	class:top_k_eager_search::TopKEagerSearch
f_start	search/merge_and_shrink/shrink_fh.h	/^    const HighLow f_start;$/;"	m	class:merge_and_shrink::ShrinkFH
fact	search/landmarks/exploration.h	/^    FactPair fact;$/;"	m	struct:landmarks::ExProposition
fact	search/task_proxy.h	/^    FactPair fact;$/;"	m	class:FactProxy
fact_names	search/tasks/domain_abstracted_task.h	/^    const std::vector<std::vector<std::string>> fact_names;$/;"	m	class:extra_tasks::DomainAbstractedTask
fact_names	search/tasks/domain_abstracted_task_factory.cc	/^    vector<vector<string>> fact_names;$/;"	m	class:extra_tasks::DomainAbstractedTaskFactory	file:
fact_order	search/cegar/subtask_generators.h	/^    FactOrder fact_order;$/;"	m	class:cegar::GoalDecomposition
fact_order	search/cegar/subtask_generators.h	/^    FactOrder fact_order;$/;"	m	class:cegar::LandmarkDecomposition
fact_potentials	search/potentials/potential_function.h	/^    const std::vector<std::vector<double>> fact_potentials;$/;"	m	class:potentials::PotentialFunction
fact_potentials	search/potentials/potential_optimizer.h	/^    std::vector<std::vector<double>> fact_potentials;$/;"	m	class:potentials::PotentialOptimizer
facts	search/landmarks/landmark_graph.h	/^    std::vector<FactPair> facts;$/;"	m	class:landmarks::EdgeType::LandmarkNode
failure_recording_fp_deviation	search/bliss/graph.h	/^  unsigned int failure_recording_fp_deviation;$/;"	m	class:bliss::AbstractGraph
failure_recording_ival	search/bliss/graph.cc	/^  unsigned int failure_recording_ival;$/;"	m	class:bliss::TreeNode	file:
fatal_error	search/bliss/defs.cc	/^fatal_error(const char* fmt, ...)$/;"	f	namespace:bliss
feature	search/options/doc_store.h	/^    std::string feature;$/;"	m	struct:options::LanguageSupportInfo
feet	search/ext/tree.hh	/^		tree_node *head, *feet;    \/\/ head\/feet are always dummy; if an iterator points to them it is invalid$/;"	m	class:tree
fetch_next_node	search/search_engines/eager_search.cc	/^pair<SearchNode, bool> EagerSearch::fetch_next_node() {$/;"	f	class:eager_search::EagerSearch
fetch_next_node	search/search_engines/top_k_eager_search.cc	/^pair<SearchNode, bool> TopKEagerSearch::fetch_next_node() {$/;"	f	class:top_k_eager_search::TopKEagerSearch
fetch_next_state	search/search_engines/lazy_search.cc	/^SearchStatus LazySearch::fetch_next_state() {$/;"	f	class:lazy_search::LazySearch
ff_heuristic	search/heuristics/ff_heuristic.cc	/^namespace ff_heuristic {$/;"	n	file:
ff_heuristic	search/heuristics/ff_heuristic.h	/^namespace ff_heuristic {$/;"	n
ff_result	search/landmarks/lama_ff_synergy.h	/^    EvaluationResult ff_result;$/;"	m	class:landmarks::LamaFFSynergy
ff_search_disjunctive_lms	search/landmarks/landmark_count_heuristic.h	/^    const bool ff_search_disjunctive_lms;$/;"	m	class:landmarks::LandmarkCountHeuristic
ff_slave_heuristic	search/landmarks/lama_ff_synergy.h	/^    std::unique_ptr<FFSlaveHeuristic> ff_slave_heuristic;$/;"	m	class:landmarks::LamaFFSynergy
filter_and_order_facts	search/cegar/subtask_generators.cc	/^static Facts filter_and_order_facts($/;"	f	namespace:cegar
filter_dead_ends	search/potentials/sample_based_potential_heuristics.cc	/^static void filter_dead_ends(PotentialOptimizer &optimizer, vector<State> &samples) {$/;"	f	namespace:potentials
filter_samples_and_compute_functions	search/potentials/diverse_potential_heuristics.cc	/^DiversePotentialHeuristics::filter_samples_and_compute_functions($/;"	f	class:potentials::DiversePotentialHeuristics
filter_unreachable_propositions	translate/simplify.py	/^def filter_unreachable_propositions(sas_task):$/;"	f
finalize	search/structural_symmetries/operator_permutation.cc	/^void OperatorPermutation::finalize(){$/;"	f	class:OperatorPermutation
finalize	search/structural_symmetries/permutation.cc	/^void Permutation::finalize(){$/;"	f	class:Permutation
find_and_apply_variable_order	translate/variable_order.py	/^def find_and_apply_variable_order(sas_task, reorder_vars=True,$/;"	f
find_automorphisms	search/bliss/graph.cc	/^AbstractGraph::find_automorphisms(Stats& stats,$/;"	f	class:bliss::AbstractGraph
find_best_improving_pdb	search/pdbs/pattern_collection_generator_hillclimbing.cc	/^pair<int, int> PatternCollectionGeneratorHillclimbing::find_best_improving_pdb($/;"	f	class:pdbs::PatternCollectionGeneratorHillclimbing
find_flaw	search/cegar/abstraction.cc	/^unique_ptr<Flaw> Abstraction::find_flaw(const Solution &solution) {$/;"	f	class:cegar::Abstraction
find_forward_orders	search/landmarks/landmark_factory_rpg_sasp.cc	/^void LandmarkFactoryRpgSasp::find_forward_orders(const VariablesProxy &variables,$/;"	f	class:landmarks::LandmarkFactoryRpgSasp
find_function_and_remove_covered_samples	search/potentials/diverse_potential_heuristics.cc	/^DiversePotentialHeuristics::find_function_and_remove_covered_samples($/;"	f	class:potentials::DiversePotentialHeuristics
find_functions	search/potentials/diverse_potential_heuristics.cc	/^DiversePotentialHeuristics::find_functions() {$/;"	f	class:potentials::DiversePotentialHeuristics
find_invariants	translate/invariant_finder.py	/^def find_invariants(task, reachable_action_params):$/;"	f
find_level	translate/axiom_rules.py	/^    def find_level(atom, marker):$/;"	f	function:compute_axiom_layers
find_min_pair	translate/greedy_join.py	/^    def find_min_pair(self):$/;"	m	class:CostMatrix
find_next_cell_to_be_splitted	search/bliss/graph.cc	/^Digraph::find_next_cell_to_be_splitted()$/;"	f	class:bliss::Digraph
find_next_cell_to_be_splitted	search/bliss/graph.cc	/^Graph::find_next_cell_to_be_splitted()$/;"	f	class:bliss::Graph
find_solution	search/cegar/abstract_search.cc	/^bool AbstractSearch::find_solution(AbstractState *init, AbstractStates &goals) {$/;"	f	class:cegar::AbstractSearch
find_symmetric_op_no	search/structural_symmetries/operator_permutation.cc	/^int OperatorPermutation::find_symmetric_op_no(const Permutation& \/*permutation*\/, int op_no) const {$/;"	f	class:OperatorPermutation
find_unique_variables	translate/invariants.py	/^def find_unique_variables(action, invariant):$/;"	f
find_unsatisfied_condition	search/pruning/stubborn_sets.h	/^inline FactPair find_unsatisfied_condition($/;"	f	namespace:stubborn_sets
find_unsatisfied_goal	search/pruning/stubborn_sets.h	/^    FactPair find_unsatisfied_goal(const State &state) const {$/;"	f	class:stubborn_sets::StubbornSets
find_unsatisfied_precondition	search/pruning/stubborn_sets.h	/^    FactPair find_unsatisfied_precondition(int op_no, const State &state) const {$/;"	f	class:stubborn_sets::StubbornSets
fire	translate/build_model.py	/^    def fire(self, new_atom, cond_index, enqueue_func):$/;"	m	class:JoinRule
fire	translate/build_model.py	/^    def fire(self, new_atom, cond_index, enqueue_func):$/;"	m	class:ProductRule
fire	translate/build_model.py	/^    def fire(self, new_atom, cond_index, enqueue_func):$/;"	m	class:ProjectRule
first	search/bliss/partition.h	/^    unsigned int first;$/;"	m	class:bliss::Partition::Cell
first_achievers	search/landmarks/landmark_factory_h_m.h	/^    std::list<int> first_achievers;$/;"	m	struct:landmarks::HMEntry
first_achievers	search/landmarks/landmark_graph.h	/^    std::set<int> first_achievers;$/;"	m	class:landmarks::EdgeType::LandmarkNode
first_cell	search/bliss/partition.h	/^  Cell* first_cell;$/;"	m	class:bliss::Partition
first_checked	search/bliss/graph.h	/^    bool first_checked;$/;"	m	class:bliss::AbstractGraph::CR_CEP
first_child	search/ext/tree.hh	/^	   tree_node_<T> *first_child, *last_child;$/;"	m	class:tree_node_
first_child	search/options/parse_tree.h	/^typename tree<T>::sibling_iterator first_child($/;"	f	namespace:options
first_child_of_root	search/options/parse_tree.h	/^typename tree<T>::sibling_iterator first_child_of_root(const tree<T> &tr) {$/;"	f	namespace:options
first_exploration	search/heuristics/lm_cut_landmarks.cc	/^void LandmarkCutLandmarks::first_exploration(const State &state) {$/;"	f	class:lm_cut_heuristic::LandmarkCutLandmarks
first_exploration_incremental	search/heuristics/lm_cut_landmarks.cc	/^void LandmarkCutLandmarks::first_exploration_incremental($/;"	f	class:lm_cut_heuristic::LandmarkCutLandmarks
first_nonsingleton_cell	search/bliss/partition.h	/^  Cell* first_nonsingleton_cell;$/;"	m	class:bliss::Partition
first_path_automorphism	search/bliss/graph.h	/^  unsigned int *first_path_automorphism;$/;"	m	class:bliss::AbstractGraph
first_path_labeling	search/bliss/graph.h	/^  unsigned int *first_path_labeling;$/;"	m	class:bliss::AbstractGraph
first_path_labeling_inv	search/bliss/graph.h	/^  unsigned int *first_path_labeling_inv;$/;"	m	class:bliss::AbstractGraph
first_path_orbits	search/bliss/graph.h	/^  Orbit         first_path_orbits;$/;"	m	class:bliss::AbstractGraph
first_plan_found	search/search_engines/kstar.h	/^	bool first_plan_found;$/;"	m	class:kstar::KStar
fixed_depth_iterator	search/ext/tree.hh	/^		class fixed_depth_iterator : public iterator_base {$/;"	c	class:tree
fixed_depth_iterator	search/ext/tree.hh	/^tree<T, tree_node_allocator>::fixed_depth_iterator::fixed_depth_iterator()$/;"	f	class:tree::fixed_depth_iterator
fixed_depth_iterator	search/ext/tree.hh	/^tree<T, tree_node_allocator>::fixed_depth_iterator::fixed_depth_iterator(const fixed_depth_iterator& other)$/;"	f	class:tree::fixed_depth_iterator
fixed_depth_iterator	search/ext/tree.hh	/^tree<T, tree_node_allocator>::fixed_depth_iterator::fixed_depth_iterator(const iterator_base& other)$/;"	f	class:tree::fixed_depth_iterator
fixed_depth_iterator	search/ext/tree.hh	/^tree<T, tree_node_allocator>::fixed_depth_iterator::fixed_depth_iterator(const sibling_iterator& other)$/;"	f	class:tree::fixed_depth_iterator
fixed_depth_iterator	search/ext/tree.hh	/^tree<T, tree_node_allocator>::fixed_depth_iterator::fixed_depth_iterator(tree_node *tn)$/;"	f	class:tree::fixed_depth_iterator
flatten	search/ext/tree.hh	/^iter tree<T, tree_node_allocator>::flatten(iter position)$/;"	f	class:tree
fluents	search/landmarks/landmark_factory_h_m.h	/^    FluentSet fluents;$/;"	m	struct:landmarks::HMEntry
for_each_heuristic_value	search/heuristic_cache.h	/^    void for_each_heuristic_value(const Callback &callback) const {$/;"	f	class:HeuristicCache
forbidding_plan	search/tasks/plan_forbid_reformulated_task.h	/^	const std::vector<int> forbidding_plan;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
format_authors	search/utils/markup.cc	/^static string format_authors(const vector<string> &authors) {$/;"	f	namespace:utils
format_paper_reference	search/utils/markup.cc	/^string format_paper_reference($/;"	f	namespace:utils
forward_dijkstra	search/cegar/abstract_search.cc	/^void AbstractSearch::forward_dijkstra(AbstractState *init) {$/;"	f	class:cegar::AbstractSearch
forward_orders	search/landmarks/landmark_graph.h	/^    std::unordered_set<FactPair> forward_orders;$/;"	m	class:landmarks::EdgeType::LandmarkNode
found_disj_lm_and_order	search/landmarks/landmark_factory_rpg_sasp.cc	/^void LandmarkFactoryRpgSasp::found_disj_lm_and_order($/;"	f	class:landmarks::LandmarkFactoryRpgSasp
found_simple_lm_and_order	search/landmarks/landmark_factory_rpg_sasp.cc	/^void LandmarkFactoryRpgSasp::found_simple_lm_and_order(const FactPair &a,$/;"	f	class:landmarks::LandmarkFactoryRpgSasp
found_solution	search/search_engine.cc	/^bool SearchEngine::found_solution() const {$/;"	f	class:SearchEngine
fp_cert_equal	search/bliss/graph.cc	/^  bool fp_cert_equal;$/;"	m	class:bliss::TreeNode	file:
fp_extendable	search/bliss/graph.cc	/^  char fp_extendable;$/;"	m	class:bliss::TreeNode	file:
fp_on	search/bliss/graph.cc	/^  bool fp_on;$/;"	m	class:bliss::TreeNode	file:
free_cells	search/bliss/partition.h	/^  Cell* free_cells;$/;"	m	class:bliss::Partition
free_unneeded_memory	search/landmarks/landmark_factory_h_m.cc	/^void LandmarkFactoryHM::free_unneeded_memory() {$/;"	f	class:landmarks::LandmarkFactoryHM
free_variables	translate/pddl/conditions.py	/^    def free_variables(self):$/;"	m	class:Condition
free_variables	translate/pddl/conditions.py	/^    def free_variables(self):$/;"	m	class:Literal
free_variables	translate/pddl/conditions.py	/^    def free_variables(self):$/;"	m	class:QuantifiedCondition
frequency	search/utils/timer.h	/^    LARGE_INTEGER frequency;$/;"	m	class:utils::Timer
from	search/search_engines/top_k_eager_search.h	/^	StateID from = StateID::no_state;	$/;"	m	struct:top_k_eager_search::StateActionPair
from_annotated_elements	search/algorithms/equivalence_relation.h	/^EquivalenceRelation *EquivalenceRelation::from_annotated_elements(int n,$/;"	f	class:equivalence_relation::EquivalenceRelation
from_vars	search/structural_symmetries/permutation.h	/^    std::vector<int> from_vars;$/;"	m	class:Permutation
front	search/bliss/kqueue.h	/^Type KQueue<Type>::front() const$/;"	f	class:bliss::KQueue
fts	search/merge_and_shrink/factored_transition_system.h	/^    const FactoredTransitionSystem &fts;$/;"	m	class:merge_and_shrink::FTSConstIterator
fts	search/merge_and_shrink/merge_strategy.h	/^    FactoredTransitionSystem &fts;$/;"	m	class:merge_and_shrink::MergeStrategy
full_name	search/options/doc_store.h	/^    std::string full_name;$/;"	m	struct:options::DocStruct
function	search/potentials/potential_heuristic.h	/^    std::unique_ptr<PotentialFunction> function;$/;"	m	class:potentials::PotentialHeuristic
functions	search/potentials/potential_max_heuristic.h	/^    std::vector<std::unique_ptr<PotentialFunction>> functions;$/;"	m	class:potentials::PotentialMaxHeuristic
g	search/cegar/abstract_state.h	/^    int g;$/;"	m	class:cegar::AbstractSearchInfo
g	search/search_node_info.h	/^    int g : 30;$/;"	m	struct:SearchNodeInfo
g	translate/graph.py	/^    g = Graph([1, 2, 3, 4, 5, 6])$/;"	v
g_axiom_evaluator	search/globals.cc	/^AxiomEvaluator *g_axiom_evaluator;$/;"	v
g_axiom_layers	search/globals.cc	/^vector<int> g_axiom_layers;$/;"	v
g_axioms	search/globals.cc	/^vector<GlobalOperator> g_axioms;$/;"	v
g_default_axiom_values	search/globals.cc	/^vector<int> g_default_axiom_values;$/;"	v
g_evaluator	search/evaluators/g_evaluator.cc	/^namespace g_evaluator {$/;"	n	file:
g_evaluator	search/evaluators/g_evaluator.h	/^namespace g_evaluator {$/;"	n
g_fact_names	search/globals.cc	/^vector<vector<string>> g_fact_names;$/;"	v
g_goal	search/globals.cc	/^vector<pair<int, int>> g_goal;$/;"	v
g_improving_symmetrical_states	search/globals.cc	/^int g_improving_symmetrical_states;$/;"	v
g_inconsistent_facts	search/globals.cc	/^static vector<vector<set<FactPair>>> g_inconsistent_facts;$/;"	v	file:
g_initial_state_data	search/globals.cc	/^vector<int> g_initial_state_data;$/;"	v
g_invariant_groups	search/globals.cc	/^vector<vector<FactPair>> g_invariant_groups;$/;"	v
g_is_part_of_anytime_portfolio	search/globals.cc	/^bool g_is_part_of_anytime_portfolio = false;$/;"	v
g_log	search/globals.cc	/^utils::Log g_log;$/;"	v
g_max_action_cost	search/globals.cc	/^int g_max_action_cost = 0;$/;"	v
g_min_action_cost	search/globals.cc	/^int g_min_action_cost = numeric_limits<int>::max();$/;"	v
g_num_previously_generated_plans	search/globals.cc	/^int g_num_previously_generated_plans = 0;$/;"	v
g_operators	search/globals.cc	/^vector<GlobalOperator> g_operators;$/;"	v
g_plan_filename	search/globals.cc	/^string g_plan_filename = "sas_plan";$/;"	v
g_root_task	search/globals.cc	/^const shared_ptr<AbstractTask> g_root_task() {$/;"	f
g_state_packer	search/globals.cc	/^int_packer::IntPacker *g_state_packer;$/;"	v
g_successor_generator	search/globals.cc	/^SuccessorGenerator *g_successor_generator;$/;"	v
g_symmetrical_states_generated	search/globals.cc	/^int g_symmetrical_states_generated;$/;"	v
g_symmetry_improved_evaluations	search/globals.cc	/^int g_symmetry_improved_evaluations;$/;"	v
g_timer	search/utils/timer.cc	/^Timer g_timer;$/;"	m	namespace:utils	file:
g_use_metric	search/globals.cc	/^bool g_use_metric;$/;"	v
g_value	search/evaluation_context.h	/^    int g_value;$/;"	m	class:EvaluationContext
g_variable_domain	search/globals.cc	/^vector<int> g_variable_domain;$/;"	v
g_variable_name	search/globals.cc	/^vector<string> g_variable_name;$/;"	v
gcd	search/structural_symmetries/permutation.cc	/^int gcd(int m, int n) {$/;"	f
generate	search/landmarks/landmark_factory.cc	/^void LandmarkFactory::generate(const TaskProxy &task_proxy, Exploration &exploration) {$/;"	f	class:landmarks::LandmarkFactory
generate	search/pdbs/pattern_collection_generator_combo.cc	/^PatternCollectionInformation PatternCollectionGeneratorCombo::generate($/;"	f	class:pdbs::PatternCollectionGeneratorCombo
generate	search/pdbs/pattern_collection_generator_genetic.cc	/^PatternCollectionInformation PatternCollectionGeneratorGenetic::generate($/;"	f	class:pdbs::PatternCollectionGeneratorGenetic
generate	search/pdbs/pattern_collection_generator_hillclimbing.cc	/^PatternCollectionInformation PatternCollectionGeneratorHillclimbing::generate($/;"	f	class:pdbs::PatternCollectionGeneratorHillclimbing
generate	search/pdbs/pattern_collection_generator_manual.cc	/^PatternCollectionInformation PatternCollectionGeneratorManual::generate($/;"	f	class:pdbs::PatternCollectionGeneratorManual
generate	search/pdbs/pattern_collection_generator_systematic.cc	/^PatternCollectionInformation PatternCollectionGeneratorSystematic::generate($/;"	f	class:pdbs::PatternCollectionGeneratorSystematic
generate	search/pdbs/pattern_generator_greedy.cc	/^Pattern PatternGeneratorGreedy::generate(const shared_ptr<AbstractTask> &task) {$/;"	f	class:pdbs::PatternGeneratorGreedy
generate	search/pdbs/pattern_generator_manual.cc	/^Pattern PatternGeneratorManual::generate(const shared_ptr<AbstractTask> &task) {$/;"	f	class:pdbs::PatternGeneratorManual
generate	translate/build_model.py	/^    def generate(self, atom, result):$/;"	m	class:LeafGenerator
generate	translate/build_model.py	/^    def generate(self, atom, result):$/;"	m	class:MatchGenerator
generate_all_partial_tuples	search/heuristics/hm_heuristic.cc	/^void HMHeuristic::generate_all_partial_tuples($/;"	f	class:hm_heuristic::HMHeuristic
generate_all_partial_tuples_aux	search/heuristics/hm_heuristic.cc	/^void HMHeuristic::generate_all_partial_tuples_aux($/;"	f	class:hm_heuristic::HMHeuristic
generate_all_tuples	search/heuristics/hm_heuristic.cc	/^void HMHeuristic::generate_all_tuples() {$/;"	f	class:hm_heuristic::HMHeuristic
generate_all_tuples_aux	search/heuristics/hm_heuristic.cc	/^void HMHeuristic::generate_all_tuples_aux(int var, int sz, const Tuple &base) {$/;"	f	class:hm_heuristic::HMHeuristic
generate_applicable_ops	search/successor_generator.cc	/^void GeneratorEmpty::generate_applicable_ops($/;"	f	class:GeneratorEmpty
generate_applicable_ops	search/successor_generator.cc	/^void GeneratorLeaf::generate_applicable_ops($/;"	f	class:GeneratorLeaf
generate_applicable_ops	search/successor_generator.cc	/^void GeneratorSwitch::generate_applicable_ops($/;"	f	class:GeneratorSwitch
generate_applicable_ops	search/successor_generator.cc	/^void SuccessorGenerator::generate_applicable_ops($/;"	f	class:SuccessorGenerator
generate_candidate_pdbs	search/pdbs/pattern_collection_generator_hillclimbing.cc	/^int PatternCollectionGeneratorHillclimbing::generate_candidate_pdbs($/;"	f	class:pdbs::PatternCollectionGeneratorHillclimbing
generate_helpful_actions	search/landmarks/landmark_count_heuristic.cc	/^bool LandmarkCountHeuristic::generate_helpful_actions(const State &state,$/;"	f	class:landmarks::LandmarkCountHeuristic
generate_heuristic_functions	search/cegar/additive_cartesian_heuristic.cc	/^static vector<CartesianHeuristicFunction> generate_heuristic_functions($/;"	f	namespace:cegar
generate_heuristic_functions	search/cegar/cost_saturation.cc	/^vector<CartesianHeuristicFunction> CostSaturation::generate_heuristic_functions($/;"	f	class:cegar::CostSaturation
generate_landmarks	search/landmarks/landmark_factory_h_m.cc	/^void LandmarkFactoryHM::generate_landmarks($/;"	f	class:landmarks::LandmarkFactoryHM
generate_landmarks	search/landmarks/landmark_factory_merged.cc	/^void LandmarkFactoryMerged::generate_landmarks($/;"	f	class:landmarks::LandmarkFactoryMerged
generate_landmarks	search/landmarks/landmark_factory_rpg_exhaust.cc	/^void LandmarkFactoryRpgExhaust::generate_landmarks($/;"	f	class:landmarks::LandmarkFactoryRpgExhaust
generate_landmarks	search/landmarks/landmark_factory_rpg_sasp.cc	/^void LandmarkFactoryRpgSasp::generate_landmarks($/;"	f	class:landmarks::LandmarkFactoryRpgSasp
generate_landmarks	search/landmarks/landmark_factory_zhu_givan.cc	/^void LandmarkFactoryZhuGivan::generate_landmarks($/;"	f	class:landmarks::LandmarkFactoryZhuGivan
generate_operators_lookups	search/landmarks/landmark_graph.cc	/^void LandmarkGraph::generate_operators_lookups(const TaskProxy &task_proxy) {$/;"	f	class:landmarks::LandmarkGraph
generate_parse_tree	search/options/option_parser.cc	/^static ParseTree generate_parse_tree(string config) {$/;"	f	namespace:options
generate_successors	search/search_engines/lazy_search.cc	/^void LazySearch::generate_successors() {$/;"	f	class:lazy_search::LazySearch
generated_ops	search/search_statistics.h	/^    int generated_ops;    \/\/ no of operators that were returned as applicable$/;"	m	class:SearchStatistics
generated_states	search/search_statistics.h	/^    int generated_states; \/\/ no states created in total (plus those removed since already in close list)$/;"	m	class:SearchStatistics
generator_for_value	search/successor_generator.cc	/^    vector<GeneratorBase *> generator_for_value;$/;"	m	class:GeneratorSwitch	file:
generators	search/structural_symmetries/group.h	/^    std::vector<const Permutation *> generators;$/;"	m	class:Group
genetic_algorithm	search/pdbs/pattern_collection_generator_genetic.cc	/^void PatternCollectionGeneratorGenetic::genetic_algorithm($/;"	f	class:pdbs::PatternCollectionGeneratorGenetic
get	search/algorithms/int_packer.cc	/^    int get(const Bin *buffer) const {$/;"	f	class:int_packer::IntPacker::VariableInfo
get	search/algorithms/int_packer.cc	/^int IntPacker::get(const Bin *buffer, int var) const {$/;"	f	class:int_packer::IntPacker
get	search/options/doc_store.cc	/^DocStruct DocStore::get(string k) {$/;"	f	class:options::DocStore
get	search/options/options.h	/^    T get(std::string key) const {$/;"	f	class:options::Options
get	search/options/options.h	/^    T get(std::string key, const T &default_value) const {$/;"	f	class:options::Options
get	search/options/predefinitions.h	/^    T get(const std::string &k) {$/;"	f	class:options::Predefinitions
get	search/options/registries.cc	/^const PluginTypeInfo &PluginTypeRegistry::get(const type_index &type) const {$/;"	f	class:options::PluginTypeRegistry
get	search/options/registries.h	/^    Factory get(const std::string &k) {$/;"	f	class:options::Registry
get_abstract_fact	search/tasks/domain_abstracted_task.h	/^    FactPair get_abstract_fact(const FactPair &fact) const {$/;"	f	class:extra_tasks::DomainAbstractedTask
get_abstract_state	search/cegar/abstract_state.cc	/^AbstractState AbstractState::get_abstract_state($/;"	f	class:cegar::AbstractState
get_abstract_value	search/tasks/domain_abstracted_task.h	/^    int get_abstract_value(const FactPair &fact) const {$/;"	f	class:extra_tasks::DomainAbstractedTask
get_achievers	search/landmarks/landmark_cost_assignment.cc	/^const set<int> &LandmarkCostAssignment::get_achievers($/;"	f	class:landmarks::LandmarkCostAssignment
get_action_predicate	translate/normalize.py	/^def get_action_predicate(action):$/;"	f
get_adjusted_action_cost	search/operator_cost.cc	/^int get_adjusted_action_cost(const GlobalOperator &op, OperatorCost cost_type) {$/;"	f
get_adjusted_action_cost	search/operator_cost.cc	/^int get_adjusted_action_cost(int cost, OperatorCost cost_type) {$/;"	f
get_adjusted_cost	search/search_engine.cc	/^int SearchEngine::get_adjusted_cost(const GlobalOperator &op) const {$/;"	f	class:SearchEngine
get_admissible_potentials_reference	search/potentials/util.cc	/^string get_admissible_potentials_reference() {$/;"	f	namespace:potentials
get_affected_operators_no	search/structural_symmetries/operator_permutation.h	/^    const std::vector<int>& get_affected_operators_no() const { return ops_affected; }$/;"	f	class:OperatorPermutation
get_affected_vars	search/structural_symmetries/permutation.h	/^    const std::vector<int>& get_affected_vars() const { return vars_affected; }$/;"	f	class:Permutation
get_applicability_conditions	translate/sas_tasks.py	/^    def get_applicability_conditions(self):$/;"	m	class:SASOperator
get_applicable_operators	search/pdbs/match_tree.cc	/^void MatchTree::get_applicable_operators($/;"	f	class:pdbs::MatchTree
get_applicable_operators_recursive	search/pdbs/match_tree.cc	/^void MatchTree::get_applicable_operators_recursive($/;"	f	class:pdbs::MatchTree
get_arity	translate/pddl/predicates.py	/^    def get_arity(self):$/;"	m	class:Predicate
get_as_vector	search/algorithms/ordered_set.h	/^    const std::vector<T> &get_as_vector() const {$/;"	f	class:ordered_set::OrderedSet
get_assignment	translate/invariants.py	/^    def get_assignment(self, parameters, literal):$/;"	m	class:InvariantPart
get_atom	translate/pddl/pddl_types.py	/^    def get_atom(self):$/;"	m	class:TypedObject
get_average_operator_cost	search/task_tools.cc	/^double get_average_operator_cost(TaskProxy task_proxy) {$/;"	f
get_axiom_init	translate/axiom_rules.py	/^def get_axiom_init(axioms_by_atom, necessary_literals):$/;"	f
get_axiom_layer	search/task_proxy.h	/^    int get_axiom_layer() const {$/;"	f	class:VariableProxy
get_axiom_predicate	translate/normalize.py	/^def get_axiom_predicate(axiom):$/;"	f
get_axioms	search/task_proxy.h	/^    AxiomsProxy get_axioms() const {$/;"	f	class:TaskProxy
get_axioms_by_atom	translate/axiom_rules.py	/^def get_axioms_by_atom(axioms):$/;"	f
get_bins_per_state	search/state_registry.cc	/^int StateRegistry::get_bins_per_state() const {$/;"	f	class:StateRegistry
get_bit_mask	search/algorithms/int_packer.cc	/^static IntPacker::Bin get_bit_mask(int from, int to) {$/;"	f	namespace:int_packer
get_bit_size_for_range	search/algorithms/int_packer.cc	/^static int get_bit_size_for_range(int range) {$/;"	f	namespace:int_packer
get_bound	search/search_engine.h	/^    int get_bound() {return bound; }$/;"	f	class:SearchEngine
get_cache	search/evaluation_context.cc	/^const HeuristicCache &EvaluationContext::get_cache() const {$/;"	f	class:EvaluationContext
get_calculate_preferred	search/evaluation_context.cc	/^bool EvaluationContext::get_calculate_preferred() const {$/;"	f	class:EvaluationContext
get_canonical_pdbs_from_options	search/pdbs/canonical_pdbs_heuristic.cc	/^CanonicalPDBs get_canonical_pdbs_from_options($/;"	f	namespace:pdbs
get_canonical_representative	search/structural_symmetries/group.cc	/^int *Group::get_canonical_representative(const GlobalState &state) const {$/;"	f	class:Group
get_causal_graph	search/causal_graph.cc	/^const CausalGraph &get_causal_graph(const AbstractTask *task) {$/;"	f
get_causal_graph	search/task_proxy.cc	/^const CausalGraph &TaskProxy::get_causal_graph() const {$/;"	f	class:TaskProxy
get_cell	search/bliss/partition.h	/^  Cell* get_cell(const unsigned int e) const {$/;"	f	class:bliss::Partition
get_child	search/cegar/refinement_hierarchy.cc	/^Node *Node::get_child(int value) const {$/;"	f	class:cegar::Node
get_coefficients	search/lp/lp_solver.h	/^    const std::vector<double> &get_coefficients() const {return coefficients; }$/;"	f	class:lp::LPConstraint
get_combined_fact_name	search/tasks/domain_abstracted_task_factory.cc	/^string DomainAbstractedTaskFactory::get_combined_fact_name($/;"	f	class:extra_tasks::DomainAbstractedTaskFactory
get_conditions	search/task_proxy.h	/^    EffectConditionsProxy get_conditions() const {$/;"	f	class:EffectProxy
get_conflicting_vars	search/pruning/stubborn_sets_ec.cc	/^void get_conflicting_vars(const vector<FactPair> &facts1,$/;"	f	namespace:stubborn_sets_ec
get_connected_conditions	translate/split_rules.py	/^def get_connected_conditions(conditions):$/;"	f
get_cost	search/cegar/subtask_generators.cc	/^    int get_cost(const FactPair &fact) {$/;"	f	class:cegar::SortFactsByIncreasingHaddValues	file:
get_cost	search/global_operator.h	/^    int get_cost() const {return cost; }$/;"	f	class:GlobalOperator
get_cost	search/merge_and_shrink/label_equivalence_relation.h	/^    int get_cost() const {$/;"	f	class:merge_and_shrink::LabelGroup
get_cost	search/merge_and_shrink/labels.h	/^    int get_cost() const {$/;"	f	class:merge_and_shrink::Label
get_cost	search/pdbs/pattern_database.h	/^    int get_cost() const {return cost; }$/;"	f	class:pdbs::AbstractOperator
get_cost	search/task_proxy.h	/^    int get_cost() const {$/;"	f	class:OperatorProxy
get_cost_for_cegar	search/heuristics/additive_heuristic.h	/^    int get_cost_for_cegar(int var, int value) const {$/;"	f	class:additive_heuristic::AdditiveHeuristic
get_count_evaluation	search/evaluation_result.cc	/^bool EvaluationResult::get_count_evaluation() const {$/;"	f	class:EvaluationResult
get_covering_assignments	translate/invariants.py	/^    def get_covering_assignments(self, parameters, atom):$/;"	m	class:Invariant
get_default_axiom_value	search/task_proxy.h	/^    int get_default_axiom_value() const {$/;"	f	class:VariableProxy
get_description	search/heuristic.cc	/^string Heuristic::get_description() const {$/;"	f	class:Heuristic
get_description	search/merge_and_shrink/transition_system.cc	/^string TransitionSystem::get_description() const {$/;"	f	class:merge_and_shrink::TransitionSystem
get_disabled_vars	search/pruning/stubborn_sets_ec.cc	/^void StubbornSetsEC::get_disabled_vars($/;"	f	class:stubborn_sets_ec::StubbornSetsEC
get_disj_lm_node	search/landmarks/landmark_graph.h	/^    inline LandmarkNode &get_disj_lm_node(const FactPair &a) const {$/;"	f	class:landmarks::EdgeType::LandmarkGraph
get_dist	search/merge_and_shrink/factored_transition_system.h	/^    const Distances &get_dist(int index) const {$/;"	f	class:merge_and_shrink::FactoredTransitionSystem
get_documentation	search/options/registries.h	/^    const std::string &get_documentation() const {$/;"	f	class:options::PluginTypeInfo
get_domain_size	search/merge_and_shrink/merge_and_shrink_representation.cc	/^int MergeAndShrinkRepresentation::get_domain_size() const {$/;"	f	class:merge_and_shrink::MergeAndShrinkRepresentation
get_domain_size	search/task_proxy.h	/^    int get_domain_size() const {$/;"	f	class:VariableProxy
get_domain_sizes	search/cegar/utils.cc	/^vector<int> get_domain_sizes(const TaskProxy &task) {$/;"	f	namespace:cegar
get_duration	search/bliss/timer.cc	/^double Timer::get_duration()$/;"	f	class:bliss::Timer
get_eff_to_eff	search/causal_graph.h	/^    const std::vector<int> &get_eff_to_eff(int var) const {$/;"	f	class:CausalGraph
get_eff_to_pre	search/causal_graph.h	/^    const std::vector<int> &get_eff_to_pre(int var) const {$/;"	f	class:CausalGraph
get_effective_pre	translate/simplify.py	/^    def get_effective_pre(var_no, conditions, effect_conditions):$/;"	f	function:build_dtgs
get_effects	search/global_operator.h	/^    const std::vector<GlobalEffect> &get_effects() const {return effects; }$/;"	f	class:GlobalOperator
get_effects	search/task_proxy.h	/^    EffectsProxy get_effects() const {$/;"	f	class:OperatorProxy
get_elapsed_time	search/utils/countdown_timer.cc	/^double CountdownTimer::get_elapsed_time() const {$/;"	f	class:utils::CountdownTimer
get_encoding_size	translate/sas_tasks.py	/^    def get_encoding_size(self):$/;"	m	class:SASAxiom
get_encoding_size	translate/sas_tasks.py	/^    def get_encoding_size(self):$/;"	m	class:SASGoal
get_encoding_size	translate/sas_tasks.py	/^    def get_encoding_size(self):$/;"	m	class:SASMutexGroup
get_encoding_size	translate/sas_tasks.py	/^    def get_encoding_size(self):$/;"	m	class:SASOperator
get_encoding_size	translate/sas_tasks.py	/^    def get_encoding_size(self):$/;"	m	class:SASTask
get_encoding_size	translate/sas_tasks.py	/^    def get_encoding_size(self):$/;"	m	class:SASVariables
get_entries	search/per_state_information.h	/^    const segmented_vector::SegmentedVector<Entry> *get_entries(const StateRegistry *registry) const {$/;"	f	class:PerStateInformation
get_entries	search/per_state_information.h	/^    segmented_vector::SegmentedVector<Entry> *get_entries(const StateRegistry *registry) {$/;"	f	class:PerStateInformation
get_enum	search/options/options.h	/^    int get_enum(std::string key) const {$/;"	f	class:options::Options
get_evaluated_states	search/search_statistics.h	/^    int get_evaluated_states() const {return evaluated_states; }$/;"	f	class:SearchStatistics
get_evaluations	search/search_statistics.h	/^    int get_evaluations() const {return evaluations; }$/;"	f	class:SearchStatistics
get_exit_code_message_reentrant	search/utils/system.cc	/^const char *get_exit_code_message_reentrant(ExitCode exitcode) {$/;"	f	namespace:utils
get_expanded	search/search_statistics.h	/^    int get_expanded() const {return expanded_states; }$/;"	f	class:SearchStatistics
get_exploration_options	search/landmarks/landmark_count_heuristic.cc	/^static Options get_exploration_options($/;"	f	namespace:landmarks
get_f_value	search/search_engines/kstar.cc	/^int KStar::get_f_value(StateID id) {$/;"	f	class:kstar::KStar
get_fact	search/cegar/utils_landmarks.cc	/^static FactPair get_fact(const LandmarkNode &node) {$/;"	f	namespace:cegar
get_fact	search/task_proxy.h	/^    FactProxy get_fact() const {$/;"	f	class:EffectProxy
get_fact	search/task_proxy.h	/^    FactProxy get_fact(int index) const {$/;"	f	class:VariableProxy
get_fact_landmarks	search/cegar/utils_landmarks.cc	/^vector<FactPair> get_fact_landmarks(const LandmarkGraph &graph) {$/;"	f	namespace:cegar
get_fact_name	search/tasks/delegating_task.cc	/^string DelegatingTask::get_fact_name(const FactPair &fact) const {$/;"	f	class:tasks::DelegatingTask
get_fact_name	search/tasks/domain_abstracted_task.cc	/^string DomainAbstractedTask::get_fact_name(const FactPair &fact) const {$/;"	f	class:extra_tasks::DomainAbstractedTask
get_fact_name	search/tasks/plan_forbid_reformulated_task.cc	/^string PlanForbidReformulatedTask::get_fact_name(const FactPair &fact) const {$/;"	f	class:extra_tasks::PlanForbidReformulatedTask
get_fact_name	search/tasks/root_task.cc	/^string RootTask::get_fact_name(const FactPair &fact) const {$/;"	f	class:tasks::RootTask
get_fact_pairs	search/task_tools.h	/^std::vector<FactPair> get_fact_pairs(const FactProxyCollection &facts) {$/;"	f
get_facts	search/task_proxy.h	/^    FactsProxy get_facts() const {$/;"	f	class:VariablesProxy
get_ff_heuristic_proxy	search/landmarks/lama_ff_synergy.cc	/^Heuristic *LamaFFSynergy::get_ff_heuristic_proxy() const {$/;"	f	class:landmarks::LamaFFSynergy
get_final_entry	search/merge_and_shrink/factored_transition_system.cc	/^FactoredTransitionSystem::get_final_entry() {$/;"	f	class:merge_and_shrink::FactoredTransitionSystem
get_first_conditional_effects_op_id	search/globals.cc	/^static int get_first_conditional_effects_op_id() {$/;"	f	file:
get_first_conditional_effects_op_id	search/task_tools.cc	/^static int get_first_conditional_effects_op_id(TaskProxy task) {$/;"	f	file:
get_fluent_facts	translate/instantiate.py	/^def get_fluent_facts(task, model):$/;"	f
get_fluents	translate/invariant_finder.py	/^def get_fluents(task):$/;"	f
get_following_var_index	search/tasks/plan_forbid_reformulated_task.cc	/^int PlanForbidReformulatedTask::get_following_var_index(int op_index) const {$/;"	f	class:extra_tasks::PlanForbidReformulatedTask
get_full_help	search/options/option_parser.cc	/^static void get_full_help() {$/;"	f	namespace:options
get_full_help_templ	search/options/option_parser.cc	/^static void get_full_help_templ() {$/;"	f	namespace:options
get_g	search/search_space.cc	/^int SearchNode::get_g() const {$/;"	f	class:SearchNode
get_g_value	search/cegar/abstract_state.h	/^    int get_g_value() const {$/;"	f	class:cegar::AbstractSearchInfo
get_g_value	search/evaluation_context.cc	/^int EvaluationContext::get_g_value() const {$/;"	f	class:EvaluationContext
get_generated	search/search_statistics.h	/^    int get_generated() const {return generated_states; }$/;"	f	class:SearchStatistics
get_generated_ops	search/search_statistics.h	/^    int get_generated_ops() const {return generated_ops; }$/;"	f	class:SearchStatistics
get_global_operator	search/task_proxy.h	/^    const GlobalOperator *get_global_operator() const {$/;"	f	class:OperatorProxy
get_global_operator	search/tasks/delegating_task.cc	/^const GlobalOperator *DelegatingTask::get_global_operator(int index, bool is_axiom) const {$/;"	f	class:tasks::DelegatingTask
get_global_operator	search/tasks/plan_forbid_reformulated_task.cc	/^const GlobalOperator *PlanForbidReformulatedTask::get_global_operator(int , bool ) const {$/;"	f	class:extra_tasks::PlanForbidReformulatedTask
get_global_operator	search/tasks/root_task.cc	/^const GlobalOperator *RootTask::get_global_operator(int index, bool is_axiom) const {$/;"	f	class:tasks::RootTask
get_goal_distance	search/merge_and_shrink/distances.h	/^    int get_goal_distance(int state) const { \/\/ used by shrink strategies and DFP$/;"	f	class:merge_and_shrink::Distances
get_goal_fact	search/tasks/delegating_task.cc	/^FactPair DelegatingTask::get_goal_fact(int index) const {$/;"	f	class:tasks::DelegatingTask
get_goal_fact	search/tasks/domain_abstracted_task.cc	/^FactPair DomainAbstractedTask::get_goal_fact(int index) const {$/;"	f	class:extra_tasks::DomainAbstractedTask
get_goal_fact	search/tasks/modified_goals_task.cc	/^FactPair ModifiedGoalsTask::get_goal_fact(int index) const {$/;"	f	class:extra_tasks::ModifiedGoalsTask
get_goal_fact	search/tasks/plan_forbid_reformulated_task.cc	/^FactPair PlanForbidReformulatedTask::get_goal_fact(int index) const {$/;"	f	class:extra_tasks::PlanForbidReformulatedTask
get_goal_fact	search/tasks/root_task.cc	/^FactPair RootTask::get_goal_fact(int index) const {$/;"	f	class:tasks::RootTask
get_goals	search/task_proxy.h	/^    GoalsProxy get_goals() const {$/;"	f	class:TaskProxy
get_greedy_preconditions_for_lm	search/landmarks/landmark_factory_rpg_sasp.cc	/^void LandmarkFactoryRpgSasp::get_greedy_preconditions_for_lm($/;"	f	class:landmarks::LandmarkFactoryRpgSasp
get_group	search/merge_and_shrink/label_equivalence_relation.h	/^    const LabelGroup &get_group(int group_id) const {$/;"	f	class:merge_and_shrink::LabelEquivalenceRelation
get_group_id	search/merge_and_shrink/label_equivalence_relation.h	/^    int get_group_id(int label_no) const {$/;"	f	class:merge_and_shrink::LabelEquivalenceRelation
get_group_size_approx	search/bliss/graph.h	/^  long double get_group_size_approx() const {return group_size_approx;}$/;"	f	class:bliss::Stats
get_groups	translate/invariant_finder.py	/^def get_groups(task, reachable_action_params=None):$/;"	f
get_h_value	search/cegar/abstract_state.cc	/^int AbstractState::get_h_value() const {$/;"	f	class:cegar::AbstractState
get_h_value	search/cegar/refinement_hierarchy.h	/^    int get_h_value() const {$/;"	f	class:cegar::Node
get_h_value	search/evaluation_result.cc	/^int EvaluationResult::get_h_value() const {$/;"	f	class:EvaluationResult
get_h_value_of_initial_state	search/cegar/abstraction.cc	/^int Abstraction::get_h_value_of_initial_state() const {$/;"	f	class:cegar::Abstraction
get_hadd_value	search/cegar/split_selector.cc	/^int SplitSelector::get_hadd_value(int var_id, int value) const {$/;"	f	class:cegar::SplitSelector
get_hash	search/bliss/graph.cc	/^Digraph::get_hash()$/;"	f	class:bliss::Digraph
get_hash	search/bliss/graph.cc	/^Graph::get_hash()$/;"	f	class:bliss::Graph
get_hash_effect	search/pdbs/pattern_database.h	/^    std::size_t get_hash_effect() const {return hash_effect; }$/;"	f	class:pdbs::AbstractOperator
get_heavy_action	translate/invariant_finder.py	/^    def get_heavy_action(self, action):$/;"	m	class:BalanceChecker
get_help	search/options/option_parser.cc	/^static void get_help(string k) {$/;"	f	namespace:options
get_help_templ	search/options/option_parser.cc	/^static void get_help_templ(const ParseTree &pt) {$/;"	f	namespace:options
get_heuristic_value	search/evaluation_context.cc	/^int EvaluationContext::get_heuristic_value(ScalarEvaluator *heur) {$/;"	f	class:EvaluationContext
get_heuristic_value	search/landmarks/landmark_count_heuristic.cc	/^int LandmarkCountHeuristic::get_heuristic_value(const GlobalState &global_state) {$/;"	f	class:landmarks::LandmarkCountHeuristic
get_heuristic_value_or_infinity	search/evaluation_context.cc	/^int EvaluationContext::get_heuristic_value_or_infinity(ScalarEvaluator *heur) {$/;"	f	class:EvaluationContext
get_id	search/global_state.h	/^    StateID get_id() const {$/;"	f	class:GlobalState
get_id	search/landmarks/landmark_graph.h	/^    int get_id() const {$/;"	f	class:landmarks::EdgeType::LandmarkNode
get_id	search/task_proxy.h	/^    int get_id() const {$/;"	f	class:OperatorProxy
get_id	search/task_proxy.h	/^    int get_id() const {$/;"	f	class:VariableProxy
get_incoming_transition	search/cegar/abstract_state.h	/^    const Transition &get_incoming_transition() const {$/;"	f	class:cegar::AbstractSearchInfo
get_incoming_transitions	search/cegar/abstract_state.h	/^    const Transitions &get_incoming_transitions() const {$/;"	f	class:cegar::AbstractState
get_incorporated_variables	search/merge_and_shrink/transition_system.h	/^    const std::vector<int> &get_incorporated_variables() const {$/;"	f	class:merge_and_shrink::TransitionSystem
get_index	search/global_operator.h	/^	int get_index() const {return index; }$/;"	f	class:GlobalOperator
get_index	search/heuristics/cg_cache.cc	/^int CGCache::get_index(int var, const State &state,$/;"	f	class:cg_heuristic::CGCache
get_index_by_var_val_pair	search/structural_symmetries/permutation.cc	/^int Permutation::get_index_by_var_val_pair(int var, int val) {$/;"	f	class:Permutation
get_infinity	search/lp/lp_solver.cc	/^double LPSolver::get_infinity() const {$/;"	f	class:lp::LPSolver
get_init_distance	search/merge_and_shrink/distances.h	/^    int get_init_distance(int state) const { \/\/ used by shrink_fh$/;"	f	class:merge_and_shrink::Distances
get_init_state	search/merge_and_shrink/transition_system.h	/^    int get_init_state() const {$/;"	f	class:merge_and_shrink::TransitionSystem
get_initial_invariants	translate/invariant_finder.py	/^def get_initial_invariants(task):$/;"	f
get_initial_state	search/state_registry.cc	/^const GlobalState &StateRegistry::get_initial_state() {$/;"	f	class:StateRegistry
get_initial_state	search/task_proxy.h	/^    State get_initial_state() const {$/;"	f	class:TaskProxy
get_initial_state_values	search/tasks/delegating_task.cc	/^vector<int> DelegatingTask::get_initial_state_values() const {$/;"	f	class:tasks::DelegatingTask
get_initial_state_values	search/tasks/domain_abstracted_task.cc	/^vector<int> DomainAbstractedTask::get_initial_state_values() const {$/;"	f	class:extra_tasks::DomainAbstractedTask
get_initial_state_values	search/tasks/plan_forbid_reformulated_task.cc	/^vector<int> PlanForbidReformulatedTask::get_initial_state_values() const {$/;"	f	class:extra_tasks::PlanForbidReformulatedTask
get_initial_state_values	search/tasks/root_task.cc	/^vector<int> RootTask::get_initial_state_values() const {$/;"	f	class:tasks::RootTask
get_involved_heuristics	search/evaluators/combining_evaluator.cc	/^void CombiningEvaluator::get_involved_heuristics(set<Heuristic *> &hset) {$/;"	f	class:combining_evaluator::CombiningEvaluator
get_involved_heuristics	search/evaluators/weighted_evaluator.cc	/^void WeightedEvaluator::get_involved_heuristics(set<Heuristic *> &hset) {$/;"	f	class:weighted_evaluator::WeightedEvaluator
get_involved_heuristics	search/open_lists/alternation_open_list.cc	/^void AlternationOpenList<Entry>::get_involved_heuristics($/;"	f	class:AlternationOpenList
get_involved_heuristics	search/open_lists/epsilon_greedy_open_list.cc	/^void EpsilonGreedyOpenList<Entry>::get_involved_heuristics(set<Heuristic *> &hset) {$/;"	f	class:EpsilonGreedyOpenList
get_involved_heuristics	search/open_lists/pareto_open_list.cc	/^void ParetoOpenList<Entry>::get_involved_heuristics(set<Heuristic *> &hset) {$/;"	f	class:ParetoOpenList
get_involved_heuristics	search/open_lists/standard_scalar_open_list.cc	/^void StandardScalarOpenList<Entry>::get_involved_heuristics($/;"	f	class:StandardScalarOpenList
get_involved_heuristics	search/open_lists/tiebreaking_open_list.cc	/^void TieBreakingOpenList<Entry>::get_involved_heuristics($/;"	f	class:TieBreakingOpenList
get_involved_heuristics	search/open_lists/type_based_open_list.cc	/^void TypeBasedOpenList<Entry>::get_involved_heuristics($/;"	f	class:TypeBasedOpenList
get_keys	search/options/doc_store.cc	/^vector<string> DocStore::get_keys() {$/;"	f	class:options::DocStore
get_keys	search/options/registries.h	/^    std::vector<std::string> get_keys() {$/;"	f	class:options::Registry
get_label_cost	search/merge_and_shrink/labels.cc	/^int Labels::get_label_cost(int label_no) const {$/;"	f	class:merge_and_shrink::Labels
get_labels	search/merge_and_shrink/factored_transition_system.h	/^    const Labels &get_labels() const {$/;"	f	class:merge_and_shrink::FactoredTransitionSystem
get_lama_heuristic_proxy	search/landmarks/lama_ff_synergy.cc	/^Heuristic *LamaFFSynergy::get_lama_heuristic_proxy() const {$/;"	f	class:landmarks::LamaFFSynergy
get_landmark	search/landmarks/landmark_graph.cc	/^LandmarkNode *LandmarkGraph::get_landmark(const FactPair &fact) const {$/;"	f	class:landmarks::LandmarkGraph
get_landmark_graph	search/cegar/utils_landmarks.cc	/^shared_ptr<LandmarkGraph> get_landmark_graph(const shared_ptr<AbstractTask> &task) {$/;"	f	namespace:cegar
get_left_most_sibling	search/merge_and_shrink/merge_tree.cc	/^MergeTreeNode *MergeTreeNode::get_left_most_sibling() {$/;"	f	class:merge_and_shrink::MergeTreeNode
get_list	search/options/options.h	/^    std::vector<T> get_list(std::string key) const {$/;"	f	class:options::Options
get_literals	translate/invariants.py	/^def get_literals(condition):$/;"	f
get_lm_for_index	search/landmarks/landmark_graph.cc	/^LandmarkNode *LandmarkGraph::get_lm_for_index(int i) const {$/;"	f	class:landmarks::LandmarkGraph
get_local_problem	search/heuristics/cea_heuristic.cc	/^LocalProblem *ContextEnhancedAdditiveHeuristic::get_local_problem($/;"	f	class:cea_heuristic::ContextEnhancedAdditiveHeuristic
get_loops	search/cegar/abstract_state.h	/^    const Loops &get_loops() const {$/;"	f	class:cegar::AbstractState
get_lower_bound	search/lp/lp_solver.h	/^    double get_lower_bound() const {return lower_bound; }$/;"	f	class:lp::LPConstraint
get_lp_var_id	search/potentials/potential_optimizer.cc	/^int PotentialOptimizer::get_lp_var_id(const FactProxy &fact) const {$/;"	f	class:potentials::PotentialOptimizer
get_m_sets	search/landmarks/landmark_factory_h_m.cc	/^void LandmarkFactoryHM::get_m_sets(const VariablesProxy &variables, int m, vector<FluentSet> &subsets) {$/;"	f	class:landmarks::LandmarkFactoryHM
get_m_sets	search/landmarks/landmark_factory_h_m.cc	/^void LandmarkFactoryHM::get_m_sets(const VariablesProxy &variables, int m,$/;"	f	class:landmarks::LandmarkFactoryHM
get_m_sets	search/landmarks/landmark_factory_h_m.cc	/^void LandmarkFactoryHM::get_m_sets(const VariablesProxy &variables,$/;"	f	class:landmarks::LandmarkFactoryHM
get_m_sets_	search/landmarks/landmark_factory_h_m.cc	/^void LandmarkFactoryHM::get_m_sets_(const VariablesProxy &variables, int m, int num_included, int current_var,$/;"	f	class:landmarks::LandmarkFactoryHM
get_m_sets_of_set	search/landmarks/landmark_factory_h_m.cc	/^void LandmarkFactoryHM::get_m_sets_of_set(const VariablesProxy &variables,$/;"	f	class:landmarks::LandmarkFactoryHM
get_mapping	translate/constraints.py	/^    def get_mapping(self):$/;"	m	class:Assignment
get_matching_landmark	search/landmarks/landmark_factory_merged.cc	/^LandmarkNode *LandmarkFactoryMerged::get_matching_landmark(const LandmarkNode &lm) const {$/;"	f	class:landmarks::LandmarkFactoryMerged
get_max_additive_subsets	search/pdbs/incremental_canonical_pdbs.cc	/^MaxAdditivePDBSubsets IncrementalCanonicalPDBs::get_max_additive_subsets($/;"	f	class:pdbs::IncrementalCanonicalPDBs
get_max_additive_subsets	search/pdbs/pattern_collection_information.cc	/^shared_ptr<MaxAdditivePDBSubsets> PatternCollectionInformation::get_max_additive_subsets() {$/;"	f	class:pdbs::PatternCollectionInformation
get_max_f	search/merge_and_shrink/distances.h	/^    int get_max_f() const { \/\/ used by shrink_fh$/;"	f	class:merge_and_shrink::Distances
get_max_g	search/merge_and_shrink/distances.h	/^    int get_max_g() const { \/\/ unused$/;"	f	class:merge_and_shrink::Distances
get_max_h	search/merge_and_shrink/distances.h	/^    int get_max_h() const { \/\/ used by shrink strategies$/;"	f	class:merge_and_shrink::Distances
get_max_hadd_value	search/cegar/split_selector.cc	/^int SplitSelector::get_max_hadd_value(int var_id, const vector<int> &values) const {$/;"	f	class:cegar::SplitSelector
get_max_level	search/bliss/graph.h	/^  unsigned long int get_max_level() const {return max_level;}$/;"	f	class:bliss::Stats
get_max_size	search/merge_and_shrink/labels.h	/^    int get_max_size() const {$/;"	f	class:merge_and_shrink::Labels
get_maximizing_vertex	search/algorithms/max_cliques.cc	/^    int get_maximizing_vertex($/;"	f	class:max_cliques::MaxCliqueComputer	file:
get_min_hadd_value	search/cegar/split_selector.cc	/^int SplitSelector::get_min_hadd_value(int var_id, const vector<int> &values) const {$/;"	f	class:cegar::SplitSelector
get_min_operator_cost	search/task_tools.cc	/^int get_min_operator_cost(TaskProxy task_proxy) {$/;"	f
get_minimal_representative	search/bliss/orbit.cc	/^unsigned int Orbit::get_minimal_representative(unsigned int element) const$/;"	f	class:bliss::Orbit
get_name	search/global_operator.h	/^    const std::string &get_name() const {return name; }$/;"	f	class:GlobalOperator
get_name	search/merge_and_shrink/shrink_strategy.cc	/^string ShrinkStrategy::get_name() const {$/;"	f	class:merge_and_shrink::ShrinkStrategy
get_name	search/task_proxy.h	/^    std::string get_name() const {$/;"	f	class:FactProxy
get_name	search/task_proxy.h	/^    std::string get_name() const {$/;"	f	class:OperatorProxy
get_name	search/task_proxy.h	/^    std::string get_name() const {$/;"	f	class:VariableProxy
get_needed_cost	search/landmarks/landmark_graph.h	/^    int get_needed_cost() const {return needed_cost; }$/;"	f	class:landmarks::EdgeType::LandmarkGraph
get_new_var_val_by_old_var_val	search/structural_symmetries/permutation.cc	/^pair<int, int> Permutation::get_new_var_val_by_old_var_val(const int var, const int val) const {$/;"	f	class:Permutation
get_next	search/merge_and_shrink/merge_strategy_precomputed.cc	/^pair<int, int> MergeStrategyPrecomputed::get_next() {$/;"	f	class:merge_and_shrink::MergeStrategyPrecomputed
get_next	search/merge_and_shrink/merge_strategy_stateless.cc	/^pair<int, int> MergeStrategyStateless::get_next() {$/;"	f	class:merge_and_shrink::MergeStrategyStateless
get_next_merge	search/merge_and_shrink/merge_tree.cc	/^pair<int, int> MergeTree::get_next_merge(int new_index) {$/;"	f	class:merge_and_shrink::MergeTree
get_node	search/cegar/refinement_hierarchy.cc	/^Node *RefinementHierarchy::get_node(const State &state) const {$/;"	f	class:cegar::RefinementHierarchy
get_node	search/search_space.cc	/^SearchNode SearchSpace::get_node(const GlobalState &state) {$/;"	f	class:SearchSpace
get_node_name	search/search_engines/top_k_eager_search.cc	/^std::string TopKEagerSearch::get_node_name(StateActionPair &edge) {$/;"	f	class:top_k_eager_search::TopKEagerSearch
get_nodes	search/landmarks/landmark_graph.h	/^    inline const std::set<LandmarkNode *> &get_nodes() const {$/;"	f	class:landmarks::EdgeType::LandmarkGraph
get_nof_bad_nodes	search/bliss/graph.h	/^  long unsigned int get_nof_bad_nodes() const {return nof_bad_nodes;}$/;"	f	class:bliss::Stats
get_nof_canupdates	search/bliss/graph.h	/^  long unsigned int get_nof_canupdates() const {return nof_canupdates;}$/;"	f	class:bliss::Stats
get_nof_generators	search/bliss/graph.h	/^  long unsigned int get_nof_generators() const {return nof_generators;}$/;"	f	class:bliss::Stats
get_nof_leaf_nodes	search/bliss/graph.h	/^  long unsigned int get_nof_leaf_nodes() const {return nof_leaf_nodes;}$/;"	f	class:bliss::Stats
get_nof_nodes	search/bliss/graph.h	/^  long unsigned int get_nof_nodes() const {return nof_nodes;}$/;"	f	class:bliss::Stats
get_nof_vertices	search/bliss/graph.h	/^  unsigned int get_nof_vertices() const {return vertices.size(); }$/;"	f	class:bliss::Digraph
get_nof_vertices	search/bliss/graph.h	/^  unsigned int get_nof_vertices() const {return vertices.size(); }$/;"	f	class:bliss::Graph
get_num_active_entries	search/merge_and_shrink/factored_transition_system.h	/^    int get_num_active_entries() const {$/;"	f	class:merge_and_shrink::FactoredTransitionSystem
get_num_axioms	search/tasks/delegating_task.cc	/^int DelegatingTask::get_num_axioms() const {$/;"	f	class:tasks::DelegatingTask
get_num_axioms	search/tasks/root_task.cc	/^int RootTask::get_num_axioms() const {$/;"	f	class:tasks::RootTask
get_num_bins	search/algorithms/int_packer.h	/^    int get_num_bins() const {return num_bins; }$/;"	f	class:int_packer::IntPacker
get_num_blocks	search/algorithms/equivalence_relation.cc	/^int EquivalenceRelation::get_num_blocks() const {$/;"	f	class:equivalence_relation::EquivalenceRelation
get_num_constraints	search/lp/lp_solver.cc	/^int LPSolver::get_num_constraints() const {$/;"	f	class:lp::LPSolver
get_num_elements	search/algorithms/equivalence_relation.cc	/^int EquivalenceRelation::get_num_elements() const {$/;"	f	class:equivalence_relation::EquivalenceRelation
get_num_explicit_blocks	search/algorithms/equivalence_relation.cc	/^int EquivalenceRelation::get_num_explicit_blocks() const {$/;"	f	class:equivalence_relation::EquivalenceRelation
get_num_explicit_elements	search/algorithms/equivalence_relation.cc	/^int EquivalenceRelation::get_num_explicit_elements() const {$/;"	f	class:equivalence_relation::EquivalenceRelation
get_num_generators	search/structural_symmetries/group.cc	/^int Group::get_num_generators() const {$/;"	f	class:Group
get_num_goals	search/tasks/delegating_task.cc	/^int DelegatingTask::get_num_goals() const {$/;"	f	class:tasks::DelegatingTask
get_num_goals	search/tasks/modified_goals_task.cc	/^int ModifiedGoalsTask::get_num_goals() const {$/;"	f	class:extra_tasks::ModifiedGoalsTask
get_num_goals	search/tasks/plan_forbid_reformulated_task.cc	/^int PlanForbidReformulatedTask::get_num_goals() const {$/;"	f	class:extra_tasks::PlanForbidReformulatedTask
get_num_goals	search/tasks/root_task.cc	/^int RootTask::get_num_goals() const {$/;"	f	class:tasks::RootTask
get_num_loops	search/cegar/transition_updater.cc	/^int TransitionUpdater::get_num_loops() const {$/;"	f	class:cegar::TransitionUpdater
get_num_non_looping_transitions	search/cegar/abstraction.h	/^    int get_num_non_looping_transitions() const {$/;"	f	class:cegar::Abstraction
get_num_non_loops	search/cegar/transition_updater.cc	/^int TransitionUpdater::get_num_non_loops() const {$/;"	f	class:cegar::TransitionUpdater
get_num_operator_appearances_on_plan	search/tasks/plan_forbid_reformulated_task.cc	/^int PlanForbidReformulatedTask::get_num_operator_appearances_on_plan(int op_no) const {$/;"	f	class:extra_tasks::PlanForbidReformulatedTask
get_num_operator_effect_conditions	search/tasks/delegating_task.cc	/^int DelegatingTask::get_num_operator_effect_conditions($/;"	f	class:tasks::DelegatingTask
get_num_operator_effect_conditions	search/tasks/plan_forbid_reformulated_task.cc	/^int PlanForbidReformulatedTask::get_num_operator_effect_conditions($/;"	f	class:extra_tasks::PlanForbidReformulatedTask
get_num_operator_effect_conditions	search/tasks/root_task.cc	/^int RootTask::get_num_operator_effect_conditions($/;"	f	class:tasks::RootTask
get_num_operator_effects	search/tasks/delegating_task.cc	/^int DelegatingTask::get_num_operator_effects(int op_index, bool is_axiom) const {$/;"	f	class:tasks::DelegatingTask
get_num_operator_effects	search/tasks/plan_forbid_reformulated_task.cc	/^int PlanForbidReformulatedTask::get_num_operator_effects(int op_index, bool is_axiom) const {$/;"	f	class:extra_tasks::PlanForbidReformulatedTask
get_num_operator_effects	search/tasks/root_task.cc	/^int RootTask::get_num_operator_effects(int op_index, bool is_axiom) const {$/;"	f	class:tasks::RootTask
get_num_operator_preconditions	search/tasks/delegating_task.cc	/^int DelegatingTask::get_num_operator_preconditions(int index, bool is_axiom) const {$/;"	f	class:tasks::DelegatingTask
get_num_operator_preconditions	search/tasks/plan_forbid_reformulated_task.cc	/^int PlanForbidReformulatedTask::get_num_operator_preconditions(int index, bool is_axiom) const {$/;"	f	class:extra_tasks::PlanForbidReformulatedTask
get_num_operator_preconditions	search/tasks/root_task.cc	/^int RootTask::get_num_operator_preconditions(int index, bool is_axiom) const {$/;"	f	class:tasks::RootTask
get_num_operators	search/tasks/delegating_task.cc	/^int DelegatingTask::get_num_operators() const {$/;"	f	class:tasks::DelegatingTask
get_num_operators	search/tasks/plan_forbid_reformulated_task.cc	/^int PlanForbidReformulatedTask::get_num_operators() const {$/;"	f	class:extra_tasks::PlanForbidReformulatedTask
get_num_operators	search/tasks/root_task.cc	/^int RootTask::get_num_operators() const {$/;"	f	class:tasks::RootTask
get_num_states	search/cegar/abstraction.h	/^    int get_num_states() const {$/;"	f	class:cegar::Abstraction
get_num_states	search/merge_and_shrink/distances.cc	/^int Distances::get_num_states() const {$/;"	f	class:merge_and_shrink::Distances
get_num_unwanted_values	search/cegar/split_selector.cc	/^int SplitSelector::get_num_unwanted_values($/;"	f	class:cegar::SplitSelector
get_num_variables	search/lp/lp_solver.cc	/^int LPSolver::get_num_variables() const {$/;"	f	class:lp::LPSolver
get_num_variables	search/state_registry.h	/^    int get_num_variables() const {$/;"	f	class:StateRegistry
get_num_variables	search/tasks/delegating_task.cc	/^int DelegatingTask::get_num_variables() const {$/;"	f	class:tasks::DelegatingTask
get_num_variables	search/tasks/plan_forbid_reformulated_task.cc	/^int PlanForbidReformulatedTask::get_num_variables() const {$/;"	f	class:extra_tasks::PlanForbidReformulatedTask
get_num_variables	search/tasks/root_task.cc	/^int RootTask::get_num_variables() const {$/;"	f	class:tasks::RootTask
get_objective_value	search/lp/lp_solver.cc	/^double LPSolver::get_objective_value() const {$/;"	f	class:lp::LPSolver
get_objects_by_type	translate/instantiate.py	/^def get_objects_by_type(typed_objects, types):$/;"	f
get_offset	search/algorithms/segmented_vector.h	/^    size_t get_offset(size_t index) const {$/;"	f	class:segmented_vector::SegmentedArrayVector
get_offset	search/algorithms/segmented_vector.h	/^    size_t get_offset(size_t index) const {$/;"	f	class:segmented_vector::SegmentedVector
get_op_for_label	search/domain_transition_graph.cc	/^OperatorProxy DTGFactory::get_op_for_label(const ValueTransitionLabel &label) {$/;"	f	class:DTGFactory
get_op_index	search/pruning_method.cc	/^static inline int get_op_index(const GlobalOperator *op) {$/;"	f	file:
get_op_index_hacked	search/global_operator.cc	/^int get_op_index_hacked(const GlobalOperator *op) {$/;"	f
get_op_type	search/tasks/plan_forbid_reformulated_task.cc	/^int PlanForbidReformulatedTask::get_op_type(int index) const {$/;"	f	class:extra_tasks::PlanForbidReformulatedTask
get_operator_cost	search/tasks/cost_adapted_task.cc	/^int CostAdaptedTask::get_operator_cost(int index, bool is_axiom) const {$/;"	f	class:tasks::CostAdaptedTask
get_operator_cost	search/tasks/delegating_task.cc	/^int DelegatingTask::get_operator_cost(int index, bool is_axiom) const {$/;"	f	class:tasks::DelegatingTask
get_operator_cost	search/tasks/modified_operator_costs_task.cc	/^int ModifiedOperatorCostsTask::get_operator_cost(int index, bool is_axiom) const {$/;"	f	class:extra_tasks::ModifiedOperatorCostsTask
get_operator_cost	search/tasks/plan_forbid_reformulated_task.cc	/^int PlanForbidReformulatedTask::get_operator_cost(int index, bool is_axiom) const {$/;"	f	class:extra_tasks::PlanForbidReformulatedTask
get_operator_cost	search/tasks/root_task.cc	/^int RootTask::get_operator_cost(int index, bool is_axiom) const {$/;"	f	class:tasks::RootTask
get_operator_costs	search/task_tools.cc	/^vector<int> get_operator_costs(const TaskProxy &task_proxy) {$/;"	f
get_operator_eff	search/heuristics/hm_heuristic.cc	/^HMHeuristic::Tuple HMHeuristic::get_operator_eff(const OperatorProxy &op) const {$/;"	f	class:hm_heuristic::HMHeuristic
get_operator_effect	search/tasks/delegating_task.cc	/^FactPair DelegatingTask::get_operator_effect($/;"	f	class:tasks::DelegatingTask
get_operator_effect	search/tasks/domain_abstracted_task.cc	/^FactPair DomainAbstractedTask::get_operator_effect($/;"	f	class:extra_tasks::DomainAbstractedTask
get_operator_effect	search/tasks/plan_forbid_reformulated_task.cc	/^FactPair PlanForbidReformulatedTask::get_operator_effect($/;"	f	class:extra_tasks::PlanForbidReformulatedTask
get_operator_effect	search/tasks/root_task.cc	/^FactPair RootTask::get_operator_effect($/;"	f	class:tasks::RootTask
get_operator_effect_condition	search/tasks/delegating_task.cc	/^FactPair DelegatingTask::get_operator_effect_condition($/;"	f	class:tasks::DelegatingTask
get_operator_effect_condition	search/tasks/plan_forbid_reformulated_task.cc	/^FactPair PlanForbidReformulatedTask::get_operator_effect_condition($/;"	f	class:extra_tasks::PlanForbidReformulatedTask
get_operator_effect_condition	search/tasks/root_task.cc	/^FactPair RootTask::get_operator_effect_condition($/;"	f	class:tasks::RootTask
get_operator_name	search/tasks/delegating_task.cc	/^string DelegatingTask::get_operator_name(int index, bool is_axiom) const {$/;"	f	class:tasks::DelegatingTask
get_operator_name	search/tasks/plan_forbid_reformulated_task.cc	/^string PlanForbidReformulatedTask::get_operator_name(int index, bool is_axiom) const {$/;"	f	class:extra_tasks::PlanForbidReformulatedTask
get_operator_name	search/tasks/root_task.cc	/^string RootTask::get_operator_name(int index, bool is_axiom) const {$/;"	f	class:tasks::RootTask
get_operator_or_axiom	search/landmarks/util.cc	/^OperatorProxy get_operator_or_axiom(const TaskProxy &task_proxy, int op_or_axiom_id) {$/;"	f	namespace:landmarks
get_operator_or_axiom	search/tasks/root_task.cc	/^static GlobalOperator &get_operator_or_axiom(int index, bool is_axiom) {$/;"	f	namespace:tasks
get_operator_or_axiom_id	search/landmarks/util.cc	/^int get_operator_or_axiom_id(const OperatorProxy &op) {$/;"	f	namespace:landmarks
get_operator_postcondition	search/landmarks/landmark_factory_h_m.cc	/^static FluentSet get_operator_postcondition(int num_vars, const OperatorProxy &op) {$/;"	f	namespace:landmarks
get_operator_pre	search/heuristics/hm_heuristic.cc	/^HMHeuristic::Tuple HMHeuristic::get_operator_pre(const OperatorProxy &op) const {$/;"	f	class:hm_heuristic::HMHeuristic
get_operator_precondition	search/landmarks/landmark_factory_h_m.cc	/^static FluentSet get_operator_precondition(const OperatorProxy &op) {$/;"	f	namespace:landmarks
get_operator_precondition	search/tasks/delegating_task.cc	/^FactPair DelegatingTask::get_operator_precondition($/;"	f	class:tasks::DelegatingTask
get_operator_precondition	search/tasks/domain_abstracted_task.cc	/^FactPair DomainAbstractedTask::get_operator_precondition($/;"	f	class:extra_tasks::DomainAbstractedTask
get_operator_precondition	search/tasks/plan_forbid_reformulated_task.cc	/^FactPair PlanForbidReformulatedTask::get_operator_precondition($/;"	f	class:extra_tasks::PlanForbidReformulatedTask
get_operator_precondition	search/tasks/root_task.cc	/^FactPair RootTask::get_operator_precondition($/;"	f	class:tasks::RootTask
get_operators	search/task_proxy.h	/^    OperatorsProxy get_operators() const {$/;"	f	class:TaskProxy
get_operators_including_eff	search/landmarks/landmark_graph.h	/^    inline const std::vector<int> &get_operators_including_eff(const FactPair &eff) const {$/;"	f	class:landmarks::EdgeType::LandmarkGraph
get_order	search/structural_symmetries/permutation.h	/^    int get_order() const {$/;"	f	class:Permutation
get_ordering	translate/variable_order.py	/^    def get_ordering(self):$/;"	m	class:CausalGraph
get_outgoing_transitions	search/cegar/abstract_state.h	/^    const Transitions &get_outgoing_transitions() const {$/;"	f	class:cegar::AbstractState
get_packed_buffer	search/global_state.h	/^    const PackedStateBin *get_packed_buffer() const {$/;"	f	class:GlobalState
get_pair	search/task_proxy.h	/^    FactPair get_pair() const {$/;"	f	class:FactProxy
get_parameters	translate/invariants.py	/^    def get_parameters(self, atom):$/;"	m	class:Invariant
get_parameters	translate/invariants.py	/^    def get_parameters(self, literal):$/;"	m	class:InvariantPart
get_parent_of_ts_index	search/merge_and_shrink/merge_tree.cc	/^MergeTreeNode *MergeTreeNode::get_parent_of_ts_index(int index) {$/;"	f	class:merge_and_shrink::MergeTreeNode
get_parent_op_index	search/tasks/plan_forbid_reformulated_task.cc	/^int PlanForbidReformulatedTask::get_parent_op_index(int index) const {$/;"	f	class:extra_tasks::PlanForbidReformulatedTask
get_parents_of_ts_indices	search/merge_and_shrink/merge_tree.cc	/^pair<MergeTreeNode *, MergeTreeNode *> MergeTree::get_parents_of_ts_indices($/;"	f	class:merge_and_shrink::MergeTree
get_parse_tree	search/options/option_parser.cc	/^const ParseTree *OptionParser::get_parse_tree() {$/;"	f	class:options::OptionParser
get_pattern	search/pdbs/pattern_database.h	/^    const Pattern &get_pattern() const {$/;"	f	class:pdbs::PatternDatabase
get_pattern_collection_information	search/pdbs/incremental_canonical_pdbs.cc	/^IncrementalCanonicalPDBs::get_pattern_collection_information() const {$/;"	f	class:pdbs::IncrementalCanonicalPDBs
get_pattern_databases	search/pdbs/incremental_canonical_pdbs.h	/^    std::shared_ptr<PDBCollection> get_pattern_databases() const {$/;"	f	class:pdbs::IncrementalCanonicalPDBs
get_patterns	search/pdbs/pattern_collection_information.cc	/^shared_ptr<PatternCollection> PatternCollectionInformation::get_patterns() {$/;"	f	class:pdbs::PatternCollectionInformation
get_pdb_from_options	search/pdbs/pdb_heuristic.cc	/^PatternDatabase get_pdb_from_options(const shared_ptr<AbstractTask> &task,$/;"	f	namespace:pdbs
get_pdbs	search/pdbs/pattern_collection_information.cc	/^shared_ptr<PDBCollection> PatternCollectionInformation::get_pdbs() {$/;"	f	class:pdbs::PatternCollectionInformation
get_peak_memory_in_kb	search/utils/system_unix.cc	/^int get_peak_memory_in_kb() {$/;"	f	namespace:utils
get_peak_memory_in_kb	search/utils/system_windows.cc	/^int get_peak_memory_in_kb() {$/;"	f	namespace:utils
get_peak_memory_in_kb	translate/tools.py	/^def get_peak_memory_in_kb():$/;"	f
get_permutation	search/structural_symmetries/group.cc	/^const Permutation &Group::get_permutation(int index) const {$/;"	f	class:Group
get_permuted_operator_no	search/structural_symmetries/operator_permutation.h	/^    int get_permuted_operator_no(int op_no) const {$/;"	f	class:OperatorPermutation
get_plan	search/search_engine.cc	/^const SearchEngine::Plan &SearchEngine::get_plan() const {$/;"	f	class:SearchEngine
get_plan_index_ordered	search/tasks/plan_forbid_reformulated_task.cc	/^int PlanForbidReformulatedTask::get_plan_index_ordered(int op_no, int appearance_index) const {$/;"	f	class:extra_tasks::PlanForbidReformulatedTask
get_possible_splits	search/cegar/abstraction.cc	/^    vector<Split> get_possible_splits() const {$/;"	f	struct:cegar::Flaw
get_possible_var_index	search/tasks/plan_forbid_reformulated_task.cc	/^int PlanForbidReformulatedTask::get_possible_var_index() const {$/;"	f	class:extra_tasks::PlanForbidReformulatedTask
get_postcondition_value	search/cegar/transition_updater.cc	/^int TransitionUpdater::get_postcondition_value(int op_id, int var) const {$/;"	f	class:cegar::TransitionUpdater
get_postconditions	search/cegar/transition_updater.cc	/^static vector<FactPair> get_postconditions($/;"	f	namespace:cegar
get_postconditions_by_operator	search/cegar/transition_updater.cc	/^static vector<vector<FactPair>> get_postconditions_by_operator($/;"	f	namespace:cegar
get_potential_function	search/potentials/potential_optimizer.cc	/^unique_ptr<PotentialFunction> PotentialOptimizer::get_potential_function() const {$/;"	f	class:potentials::PotentialOptimizer
get_pre_to_eff	search/causal_graph.h	/^    const std::vector<int> &get_pre_to_eff(int var) const {$/;"	f	class:CausalGraph
get_precondition_value	search/cegar/transition_updater.cc	/^int TransitionUpdater::get_precondition_value(int op_id, int var) const {$/;"	f	class:cegar::TransitionUpdater
get_preconditions	search/global_operator.h	/^    const std::vector<GlobalCondition> &get_preconditions() const {return preconditions; }$/;"	f	class:GlobalOperator
get_preconditions	search/task_proxy.h	/^    PreconditionsProxy get_preconditions() const {$/;"	f	class:OperatorProxy
get_preconditions_by_operator	search/cegar/transition_updater.cc	/^static vector<vector<FactPair>> get_preconditions_by_operator($/;"	f	namespace:cegar
get_predecessors	search/causal_graph.h	/^    const std::vector<int> &get_predecessors(int var) const {$/;"	f	class:CausalGraph
get_predicate_for_fact	search/landmarks/landmark_factory_rpg_sasp.cc	/^static string get_predicate_for_fact(const VariablesProxy &variables,$/;"	f	namespace:landmarks
get_predicate_name	translate/pddl/pddl_types.py	/^    def get_predicate_name(self):$/;"	m	class:Type
get_preferred_operators	search/evaluation_context.cc	/^EvaluationContext::get_preferred_operators(ScalarEvaluator *heur) {$/;"	f	class:EvaluationContext
get_preferred_operators	search/evaluation_result.cc	/^EvaluationResult::get_preferred_operators() const {$/;"	f	class:EvaluationResult
get_prev_landmarks	search/cegar/utils_landmarks.cc	/^VarToValues get_prev_landmarks(const LandmarkGraph &graph, const FactPair &fact) {$/;"	f	namespace:cegar
get_priority	search/heuristics/cea_heuristic.cc	/^int ContextEnhancedAdditiveHeuristic::get_priority($/;"	f	class:cea_heuristic::ContextEnhancedAdditiveHeuristic
get_process_id	search/utils/system_unix.cc	/^int get_process_id() {$/;"	f	namespace:utils
get_process_id	search/utils/system_windows.cc	/^int get_process_id() {$/;"	f	namespace:utils
get_proposition	search/heuristics/lm_cut_landmarks.cc	/^RelaxedProposition *LandmarkCutLandmarks::get_proposition($/;"	f	class:lm_cut_heuristic::LandmarkCutLandmarks
get_proposition	search/heuristics/relaxation_heuristic.cc	/^Proposition *RelaxationHeuristic::get_proposition(const FactProxy &fact) {$/;"	f	class:relaxation_heuristic::RelaxationHeuristic
get_range	search/causal_graph.cc	/^int IntRelationBuilder::get_range() const {$/;"	f	class:IntRelationBuilder
get_reached_cost	search/landmarks/landmark_graph.h	/^    int get_reached_cost() const {return reached_cost; }$/;"	f	class:landmarks::EdgeType::LandmarkGraph
get_reached_landmarks	search/landmarks/landmark_status_manager.cc	/^vector<bool> &LandmarkStatusManager::get_reached_landmarks(const GlobalState &state) {$/;"	f	class:landmarks::LandmarkStatusManager
get_real_g	search/search_space.cc	/^int SearchNode::get_real_g() const {$/;"	f	class:SearchNode
get_refinedness	search/cegar/split_selector.cc	/^double SplitSelector::get_refinedness(const AbstractState &state, int var_id) const {$/;"	f	class:cegar::SplitSelector
get_reformulated_op_type	search/global_operator.cc	/^int GlobalOperator::get_reformulated_op_type(const vector<GlobalCondition>& extra_pre, const vector<GlobalEffect>& extra_eff) const {$/;"	f	class:GlobalOperator
get_registry	search/global_state.h	/^    const StateRegistry &get_registry() const {$/;"	f	class:GlobalState
get_regression_preconditions	search/pdbs/pattern_database.h	/^    const std::vector<FactPair> &get_regression_preconditions() const {$/;"	f	class:pdbs::AbstractOperator
get_relaxed_possible_before	search/cegar/utils.cc	/^unordered_set<FactProxy> get_relaxed_possible_before($/;"	f	namespace:cegar
get_remaining_candidates	search/merge_and_shrink/merge_selector_score_based_filtering.cc	/^vector<pair<int, int>> MergeSelectorScoreBasedFiltering::get_remaining_candidates($/;"	f	class:merge_and_shrink::MergeSelectorScoreBasedFiltering
get_remaining_costs_task	search/cegar/cost_saturation.cc	/^shared_ptr<AbstractTask> CostSaturation::get_remaining_costs_task($/;"	f	class:cegar::CostSaturation
get_remaining_time	search/utils/countdown_timer.cc	/^double CountdownTimer::get_remaining_time() const {$/;"	f	class:utils::CountdownTimer
get_reopened	search/search_statistics.h	/^    int get_reopened() const {return reopened_states; }$/;"	f	class:SearchStatistics
get_result	search/evaluation_context.cc	/^const EvaluationResult &EvaluationContext::get_result(ScalarEvaluator *heur) {$/;"	f	class:EvaluationContext
get_result	translate/greedy_join.py	/^    def get_result(self):$/;"	m	class:ResultList
get_result	translate/variable_order.py	/^    def get_result(self):$/;"	m	class:MaxDAG
get_result	translate/variable_order.py	/^    def get_result(self):$/;"	m	class:SCC
get_root	search/cegar/refinement_hierarchy.h	/^    Node *get_root() const {$/;"	f	class:cegar::RefinementHierarchy
get_saturated_costs	search/cegar/abstraction.cc	/^vector<int> Abstraction::get_saturated_costs() {$/;"	f	class:cegar::Abstraction
get_search_engine	search/search_engines/iterated_search.cc	/^unique_ptr<SearchEngine> IteratedSearch::get_search_engine($/;"	f	class:iterated_search::IteratedSearch
get_search_info	search/cegar/abstract_state.h	/^    AbstractSearchInfo &get_search_info() {return search_info; }$/;"	f	class:cegar::AbstractState
get_search_symmetries	search/structural_symmetries/group.h	/^    SearchSymmetries get_search_symmetries() const {$/;"	f	class:Group
get_segment	search/algorithms/segmented_vector.h	/^    size_t get_segment(size_t index) const {$/;"	f	class:segmented_vector::SegmentedArrayVector
get_segment	search/algorithms/segmented_vector.h	/^    size_t get_segment(size_t index) const {$/;"	f	class:segmented_vector::SegmentedVector
get_simple_lm_node	search/landmarks/landmark_graph.h	/^    inline LandmarkNode &get_simple_lm_node(const FactPair &a) const {$/;"	f	class:landmarks::EdgeType::LandmarkGraph
get_size	search/merge_and_shrink/factored_transition_system.h	/^    int get_size() const {$/;"	f	class:merge_and_shrink::FactoredTransitionSystem
get_size	search/merge_and_shrink/label_equivalence_relation.h	/^    int get_size() const {$/;"	f	class:merge_and_shrink::LabelEquivalenceRelation
get_size	search/merge_and_shrink/labels.h	/^    int get_size() const {$/;"	f	class:merge_and_shrink::Labels
get_size	search/merge_and_shrink/transition_system.h	/^    int get_size() const {$/;"	f	class:merge_and_shrink::TransitionSystem
get_size	search/pdbs/incremental_canonical_pdbs.h	/^    int get_size() const {$/;"	f	class:pdbs::IncrementalCanonicalPDBs
get_size	search/pdbs/pattern_database.h	/^    int get_size() const {$/;"	f	class:pdbs::PatternDatabase
get_solution	search/cegar/abstract_search.h	/^    const Solution &get_solution() {$/;"	f	class:cegar::AbstractSearch
get_split_m_sets	search/landmarks/landmark_factory_h_m.cc	/^void LandmarkFactoryHM::get_split_m_sets($/;"	f	class:landmarks::LandmarkFactoryHM
get_state	search/evaluation_context.cc	/^const GlobalState &EvaluationContext::get_state() const {$/;"	f	class:EvaluationContext
get_state	search/heuristic_cache.cc	/^const GlobalState &HeuristicCache::get_state() const {$/;"	f	class:HeuristicCache
get_state	search/search_space.cc	/^GlobalState SearchNode::get_state() const {$/;"	f	class:SearchNode
get_state_id	search/search_space.h	/^    StateID get_state_id() const {$/;"	f	class:SearchNode
get_state_registry	search/search_engine.h	/^    const StateRegistry &get_state_registry() const {$/;"	f	class:SearchEngine
get_state_size_in_bytes	search/state_registry.cc	/^int StateRegistry::get_state_size_in_bytes() const {$/;"	f	class:StateRegistry
get_state_value	search/state_registry.h	/^    int get_state_value(const PackedStateBin *buffer, int var) const {$/;"	f	class:StateRegistry
get_statistics	search/search_engine.h	/^    const SearchStatistics &get_statistics() const {return statistics; }$/;"	f	class:SearchEngine
get_status	search/landmarks/landmark_graph.h	/^    int get_status() const {$/;"	f	class:landmarks::EdgeType::LandmarkNode
get_status	search/search_engine.cc	/^SearchStatus SearchEngine::get_status() const {$/;"	f	class:SearchEngine
get_strongly_connected_components	translate/variable_order.py	/^    def get_strongly_connected_components(self):$/;"	m	class:CausalGraph
get_subtasks	search/cegar/subtask_generators.cc	/^SharedTasks GoalDecomposition::get_subtasks($/;"	f	class:cegar::GoalDecomposition
get_subtasks	search/cegar/subtask_generators.cc	/^SharedTasks LandmarkDecomposition::get_subtasks($/;"	f	class:cegar::LandmarkDecomposition
get_subtasks	search/cegar/subtask_generators.cc	/^SharedTasks TaskDuplicator::get_subtasks($/;"	f	class:cegar::TaskDuplicator
get_successor	search/task_proxy.h	/^    State get_successor(OperatorProxy op) const {$/;"	f	class:State
get_successor_operators	search/search_engines/lazy_search.cc	/^vector<const GlobalOperator *> LazySearch::get_successor_operators($/;"	f	class:lazy_search::LazySearch
get_successor_state	search/state_registry.cc	/^GlobalState StateRegistry::get_successor_state(const GlobalState &predecessor, const GlobalOperator &op) {$/;"	f	class:StateRegistry
get_successors	search/causal_graph.h	/^    const std::vector<int> &get_successors(int var) const {$/;"	f	class:CausalGraph
get_symmetrical_lookups	search/structural_symmetries/group.h	/^    SymmetricalLookups get_symmetrical_lookups() const {$/;"	f	class:Group
get_task	search/potentials/potential_optimizer.cc	/^const shared_ptr<AbstractTask> PotentialOptimizer::get_task() const {$/;"	f	class:potentials::PotentialOptimizer
get_task	search/state_registry.h	/^    const AbstractTask &get_task() const {$/;"	f	class:StateRegistry
get_task	search/task_proxy.h	/^inline TaskProxy State::get_task() const {$/;"	f	class:State
get_task	search/tasks/domain_abstracted_task_factory.cc	/^shared_ptr<AbstractTask> DomainAbstractedTaskFactory::get_task() const {$/;"	f	class:extra_tasks::DomainAbstractedTaskFactory
get_threats	translate/invariant_finder.py	/^    def get_threats(self, predicate):$/;"	m	class:BalanceChecker
get_trace	search/structural_symmetries/group.cc	/^void Group::get_trace(const GlobalState &state, Trace& full_trace) const {$/;"	f	class:Group
get_transition	search/domain_transition_graph.cc	/^ValueTransition *DTGFactory::get_transition(int origin, int target,$/;"	f	class:DTGFactory
get_transition_cost	search/heuristics/cg_heuristic.cc	/^int CGHeuristic::get_transition_cost(const State &state,$/;"	f	class:cg_heuristic::CGHeuristic
get_transitions_for_group_id	search/merge_and_shrink/transition_system.h	/^    const std::vector<Transition> &get_transitions_for_group_id(int group_id) const {$/;"	f	class:merge_and_shrink::TransitionSystem
get_trivial_abstract_state	search/cegar/abstract_state.cc	/^AbstractState *AbstractState::get_trivial_abstract_state($/;"	f	class:cegar::AbstractState
get_ts	search/merge_and_shrink/factored_transition_system.h	/^    const TransitionSystem &get_ts(int index) const {$/;"	f	class:merge_and_shrink::FactoredTransitionSystem
get_type	search/options/registries.h	/^    const std::type_index &get_type() const {$/;"	f	class:options::PluginTypeInfo
get_type_map	translate/normalize.py	/^    def get_type_map(self):$/;"	m	class:AxiomConditionProxy
get_type_map	translate/normalize.py	/^    def get_type_map(self):$/;"	m	class:EffectConditionProxy
get_type_map	translate/normalize.py	/^    def get_type_map(self):$/;"	m	class:GoalConditionProxy
get_type_map	translate/normalize.py	/^    def get_type_map(self):$/;"	m	class:PreconditionProxy
get_type_name	search/options/registries.h	/^    const std::string &get_type_name() const {$/;"	f	class:options::PluginTypeInfo
get_types	search/options/doc_store.cc	/^vector<string> DocStore::get_types() {$/;"	f	class:options::DocStore
get_undefined_value	search/potentials/potential_optimizer.cc	/^static int get_undefined_value(VariableProxy var) {$/;"	f	namespace:potentials
get_unparsed_config	search/options/options.h	/^    std::string get_unparsed_config() const {$/;"	f	class:options::Options
get_upper_bound	search/lp/lp_solver.h	/^    double get_upper_bound() const {return upper_bound; }$/;"	f	class:lp::LPConstraint
get_value	search/bliss/uintseqhash.h	/^  unsigned int get_value() const {return h; }$/;"	f	class:bliss::UintSeqHash
get_value	search/cegar/cartesian_heuristic_function.cc	/^int CartesianHeuristicFunction::get_value(const State &parent_state) const {$/;"	f	class:cegar::CartesianHeuristicFunction
get_value	search/merge_and_shrink/merge_and_shrink_representation.cc	/^int MergeAndShrinkRepresentationLeaf::get_value(const State &state) const {$/;"	f	class:merge_and_shrink::MergeAndShrinkRepresentationLeaf
get_value	search/merge_and_shrink/merge_and_shrink_representation.cc	/^int MergeAndShrinkRepresentationMerge::get_value($/;"	f	class:merge_and_shrink::MergeAndShrinkRepresentationMerge
get_value	search/pdbs/canonical_pdbs.cc	/^int CanonicalPDBs::get_value(const State &state) const {$/;"	f	class:pdbs::CanonicalPDBs
get_value	search/pdbs/incremental_canonical_pdbs.cc	/^int IncrementalCanonicalPDBs::get_value(const State &state) const {$/;"	f	class:pdbs::IncrementalCanonicalPDBs
get_value	search/pdbs/pattern_database.cc	/^int PatternDatabase::get_value(const State &state) const {$/;"	f	class:pdbs::PatternDatabase
get_value	search/pdbs/zero_one_pdbs.cc	/^int ZeroOnePDBs::get_value(const State &state) const {$/;"	f	class:pdbs::ZeroOnePDBs
get_value	search/potentials/potential_function.cc	/^int PotentialFunction::get_value(const State &state) const {$/;"	f	class:potentials::PotentialFunction
get_value	search/structural_symmetries/permutation.h	/^    int get_value(int ind) const {$/;"	f	class:Permutation
get_value	search/task_proxy.h	/^    int get_value() const {$/;"	f	class:FactProxy
get_value_or_default	search/utils/collections.h	/^ValueType get_value_or_default($/;"	f	namespace:utils
get_values	search/global_state.cc	/^vector<int> GlobalState::get_values() const {$/;"	f	class:GlobalState
get_values	search/task_proxy.h	/^    const std::vector<int> &get_values() const {$/;"	f	class:State
get_var	search/cegar/refinement_hierarchy.h	/^    int get_var() const {$/;"	f	class:cegar::Node
get_var_by_index	search/structural_symmetries/permutation.cc	/^int Permutation::get_var_by_index(int ind) {$/;"	f	class:Permutation
get_var_val_by_index	search/structural_symmetries/permutation.cc	/^pair<int, int> Permutation::get_var_val_by_index(int ind) {$/;"	f	class:Permutation
get_variable	search/task_proxy.h	/^inline VariableProxy FactProxy::get_variable() const {$/;"	f	class:FactProxy
get_variable_axiom_layer	search/tasks/delegating_task.cc	/^int DelegatingTask::get_variable_axiom_layer(int var) const {$/;"	f	class:tasks::DelegatingTask
get_variable_axiom_layer	search/tasks/plan_forbid_reformulated_task.cc	/^int PlanForbidReformulatedTask::get_variable_axiom_layer(int var) const {$/;"	f	class:extra_tasks::PlanForbidReformulatedTask
get_variable_axiom_layer	search/tasks/root_task.cc	/^int RootTask::get_variable_axiom_layer(int var) const {$/;"	f	class:tasks::RootTask
get_variable_default_axiom_value	search/tasks/delegating_task.cc	/^int DelegatingTask::get_variable_default_axiom_value(int var) const {$/;"	f	class:tasks::DelegatingTask
get_variable_default_axiom_value	search/tasks/plan_forbid_reformulated_task.cc	/^int PlanForbidReformulatedTask::get_variable_default_axiom_value(int var) const {$/;"	f	class:extra_tasks::PlanForbidReformulatedTask
get_variable_default_axiom_value	search/tasks/root_task.cc	/^int RootTask::get_variable_default_axiom_value(int var) const {$/;"	f	class:tasks::RootTask
get_variable_domain_size	search/tasks/delegating_task.cc	/^int DelegatingTask::get_variable_domain_size(int var) const {$/;"	f	class:tasks::DelegatingTask
get_variable_domain_size	search/tasks/domain_abstracted_task.cc	/^int DomainAbstractedTask::get_variable_domain_size(int var) const {$/;"	f	class:extra_tasks::DomainAbstractedTask
get_variable_domain_size	search/tasks/plan_forbid_reformulated_task.cc	/^int PlanForbidReformulatedTask::get_variable_domain_size(int var) const {$/;"	f	class:extra_tasks::PlanForbidReformulatedTask
get_variable_domain_size	search/tasks/root_task.cc	/^int RootTask::get_variable_domain_size(int var) const {$/;"	f	class:tasks::RootTask
get_variable_name	search/tasks/delegating_task.cc	/^string DelegatingTask::get_variable_name(int var) const {$/;"	f	class:tasks::DelegatingTask
get_variable_name	search/tasks/plan_forbid_reformulated_task.cc	/^string PlanForbidReformulatedTask::get_variable_name(int var) const {$/;"	f	class:extra_tasks::PlanForbidReformulatedTask
get_variable_name	search/tasks/root_task.cc	/^string RootTask::get_variable_name(int var) const {$/;"	f	class:tasks::RootTask
get_variables	search/lp/lp_solver.h	/^    const std::vector<int> &get_variables() const {return variables; }$/;"	f	class:lp::LPConstraint
get_variables	search/task_proxy.h	/^    VariablesProxy get_variables() const {$/;"	f	class:TaskProxy
get_variables	translate/pddl_to_prolog.py	/^    def get_variables(self):$/;"	m	class:Rule
get_variables	translate/pddl_to_prolog.py	/^def get_variables(symbolic_atoms):$/;"	f
get_zero_one_pdbs_from_options	search/pdbs/zero_one_pdbs_heuristic.cc	/^ZeroOnePDBs get_zero_one_pdbs_from_options($/;"	f	namespace:pdbs
global_to_local_var	search/domain_transition_graph.h	/^    std::vector<std::unordered_map<int, int>> global_to_local_var;$/;"	m	class:DTGFactory
goal_count_heuristic	search/heuristics/goal_count_heuristic.cc	/^namespace goal_count_heuristic {$/;"	n	file:
goal_count_heuristic	search/heuristics/goal_count_heuristic.h	/^namespace goal_count_heuristic {$/;"	n
goal_distances	search/merge_and_shrink/distances.h	/^    std::vector<int> goal_distances;$/;"	m	class:merge_and_shrink::Distances
goal_node	search/heuristics/cea_heuristic.h	/^    LocalProblemNode *goal_node;$/;"	m	class:cea_heuristic::ContextEnhancedAdditiveHeuristic
goal_problem	search/heuristics/cea_heuristic.h	/^    LocalProblem *goal_problem;$/;"	m	class:cea_heuristic::ContextEnhancedAdditiveHeuristic
goal_propositions	search/heuristics/relaxation_heuristic.h	/^    std::vector<Proposition *> goal_propositions;$/;"	m	class:relaxation_heuristic::RelaxationHeuristic
goal_propositions	search/landmarks/exploration.h	/^    std::vector<ExProposition *> goal_propositions;$/;"	m	class:landmarks::Exploration
goal_state	search/operator_counting/state_equation_constraints.h	/^    std::vector<int> goal_state;$/;"	m	class:operator_counting::StateEquationConstraints
goal_state	search/search_engines/top_k_eager_search.h	/^	StateID goal_state = StateID::no_state;$/;"	m	class:top_k_eager_search::TopKEagerSearch
goal_states	search/merge_and_shrink/fts_factory.cc	/^        vector<bool> goal_states;$/;"	m	struct:merge_and_shrink::FTSFactory::TransitionSystemData	file:
goal_states	search/merge_and_shrink/transition_system.h	/^    std::vector<bool> goal_states;$/;"	m	class:merge_and_shrink::TransitionSystem
goals	search/cegar/abstraction.h	/^    AbstractStates goals;$/;"	m	class:cegar::Abstraction
goals	search/heuristics/hm_heuristic.h	/^    const Tuple goals;$/;"	m	class:hm_heuristic::HMHeuristic
goals	search/tasks/domain_abstracted_task.h	/^    const std::vector<FactPair> goals;$/;"	m	class:extra_tasks::DomainAbstractedTask
goals	search/tasks/domain_abstracted_task_factory.cc	/^    vector<FactPair> goals;$/;"	m	class:extra_tasks::DomainAbstractedTaskFactory	file:
goals	search/tasks/modified_goals_task.h	/^    const std::vector<FactPair> goals;$/;"	m	class:extra_tasks::ModifiedGoalsTask
goto_backtrack_point	search/bliss/partition.cc	/^Partition::goto_backtrack_point(BacktrackPoint p)$/;"	f	class:bliss::Partition
graph	search/algorithms/max_cliques.cc	/^    const vector<vector<int>> &graph;$/;"	m	class:max_cliques::MaxCliqueComputer	file:
graph	search/bliss/partition.h	/^  AbstractGraph* graph;$/;"	m	class:bliss::Partition
graph_creator	search/structural_symmetries/group.h	/^    GraphCreator *graph_creator;$/;"	m	class:Group
greedy	search/merge_and_shrink/shrink_bisimulation.h	/^    const bool greedy;$/;"	m	class:merge_and_shrink::ShrinkBisimulation
greedy_join	translate/greedy_join.py	/^def greedy_join(rule, name_generator):$/;"	f
greedy_necessary	search/landmarks/landmark_graph.h	/^    greedy_necessary = 3,$/;"	m	class:landmarks::EdgeType
group	search/merge_and_shrink/shrink_bisimulation.cc	/^    int group;$/;"	m	struct:merge_and_shrink::Signature	file:
group	search/search_engines/eager_search.h	/^    std::shared_ptr<Group> group;$/;"	m	class:eager_search::EagerSearch
group	search/state_registry.h	/^    std::shared_ptr<Group> group;$/;"	m	class:StateRegistry
group_size	search/bliss/graph.h	/^  BigNum group_size;$/;"	m	class:bliss::Stats
group_size_approx	search/bliss/graph.h	/^  long double group_size_approx;$/;"	m	class:bliss::Stats
grouped_labels	search/merge_and_shrink/label_equivalence_relation.h	/^    std::vector<LabelGroup> grouped_labels;$/;"	m	class:merge_and_shrink::LabelEquivalenceRelation
groups	translate/invariant_finder.py	/^    groups = get_groups(task)$/;"	v
h	search/bliss/uintseqhash.h	/^  unsigned int h;$/;"	m	class:bliss::UintSeqHash
h	search/cegar/refinement_hierarchy.h	/^    int h;$/;"	m	class:cegar::Node
h	search/heuristic.h	/^        int h : 31;$/;"	m	struct:Heuristic::HEntry
h	search/open_lists/epsilon_greedy_open_list.cc	/^        int h;$/;"	m	struct:EpsilonGreedyOpenList::HeapNode	file:
h_add_cost	search/landmarks/exploration.h	/^    int h_add_cost;$/;"	m	struct:landmarks::ExProposition
h_add_cost	search/landmarks/exploration.h	/^    int h_add_cost;$/;"	m	struct:landmarks::ExUnaryOperator
h_and_goal	search/merge_and_shrink/shrink_bisimulation.cc	/^    int h_and_goal; \/\/ -1 for goal states; h value for non-goal states$/;"	m	struct:merge_and_shrink::Signature	file:
h_m_table_	search/landmarks/landmark_factory_h_m.h	/^    std::vector<HMEntry> h_m_table_;$/;"	m	class:landmarks::LandmarkFactoryHM
h_max_cost	search/heuristics/lm_cut_landmarks.h	/^    int h_max_cost;$/;"	m	struct:lm_cut_heuristic::RelaxedProposition
h_max_cost	search/landmarks/exploration.h	/^    int h_max_cost;$/;"	m	struct:landmarks::ExProposition
h_max_cost	search/landmarks/exploration.h	/^    int h_max_cost;$/;"	m	struct:landmarks::ExUnaryOperator
h_max_supporter	search/heuristics/lm_cut_landmarks.h	/^    RelaxedProposition *h_max_supporter;$/;"	m	struct:lm_cut_heuristic::RelaxedOperator
h_max_supporter_cost	search/heuristics/lm_cut_landmarks.h	/^    int h_max_supporter_cost; \/\/ h_max_cost of h_max_supporter$/;"	m	struct:lm_cut_heuristic::RelaxedOperator
h_start	search/merge_and_shrink/shrink_fh.h	/^    const HighLow h_start;$/;"	m	class:merge_and_shrink::ShrinkFH
h_value	search/evaluation_result.h	/^    int h_value;$/;"	m	class:EvaluationResult
hadd	search/cegar/subtask_generators.cc	/^    shared_ptr<additive_heuristic::AdditiveHeuristic> hadd;$/;"	m	class:cegar::SortFactsByIncreasingHaddValues	file:
handle_axioms	translate/axiom_rules.py	/^def handle_axioms(operators, axioms, goals):$/;"	f
handle_coin_error	search/lp/lp_internals.cc	/^void handle_coin_error(const CoinError &error) {$/;"	f	namespace:lp
handle_eff_eff_edge	search/causal_graph.cc	/^    void handle_eff_eff_edge(int u, int v) {$/;"	f	struct:CausalGraphBuilder
handle_operator	search/causal_graph.cc	/^    void handle_operator(const OperatorProxy &op) {$/;"	f	struct:CausalGraphBuilder
handle_operator_effect	search/merge_and_shrink/fts_factory.cc	/^void FTSFactory::handle_operator_effect($/;"	f	class:merge_and_shrink::FTSFactory
handle_operator_precondition	search/merge_and_shrink/fts_factory.cc	/^void FTSFactory::handle_operator_precondition($/;"	f	class:merge_and_shrink::FTSFactory
handle_pre_eff_arc	search/causal_graph.cc	/^    void handle_pre_eff_arc(int u, int v) {$/;"	f	struct:CausalGraphBuilder
handle_shrink_limit_options_defaults	search/merge_and_shrink/merge_and_shrink_heuristic.cc	/^void MergeAndShrinkHeuristic::handle_shrink_limit_options_defaults(Options &opts) {$/;"	f	class:merge_and_shrink::MergeAndShrinkHeuristic
handle_stubborn_operator	search/pruning/stubborn_sets_ec.cc	/^void StubbornSetsEC::handle_stubborn_operator(const State &state, int op_no) {$/;"	f	class:stubborn_sets_ec::StubbornSetsEC
handle_stubborn_operator	search/pruning/stubborn_sets_simple.cc	/^void StubbornSetsSimple::handle_stubborn_operator(const State &state,$/;"	f	class:stubborn_sets_simple::StubbornSetsSimple
has_axioms	search/globals.cc	/^bool has_axioms() {$/;"	f
has_axioms	search/task_tools.cc	/^bool has_axioms(TaskProxy task) {$/;"	f
has_bound	search/options/bounds.h	/^    bool has_bound() const {$/;"	f	struct:options::Bounds
has_cond_effects	search/heuristics/hm_heuristic.h	/^    const bool has_cond_effects;$/;"	m	class:hm_heuristic::HMHeuristic
has_conditional_effects	search/globals.cc	/^bool has_conditional_effects() {$/;"	f
has_conditional_effects	search/task_tools.cc	/^bool has_conditional_effects(TaskProxy task) {$/;"	f
has_conditional_effects	search/tasks/domain_abstracted_task.cc	/^static bool has_conditional_effects(const AbstractTask &task) {$/;"	f	namespace:extra_tasks
has_disjunction	translate/pddl/conditions.py	/^    def has_disjunction(self):$/;"	m	class:Condition
has_disjunction	translate/pddl/conditions.py	/^    def has_disjunction(self):$/;"	m	class:Disjunction
has_existential_part	translate/pddl/conditions.py	/^    def has_existential_part(self):$/;"	m	class:Condition
has_existential_part	translate/pddl/conditions.py	/^    def has_existential_part(self):$/;"	m	class:ExistentialCondition
has_optimal_solution	search/lp/lp_solver.cc	/^bool LPSolver::has_optimal_solution() const {$/;"	f	class:lp::LPSolver
has_optimal_solution	search/potentials/potential_optimizer.cc	/^bool PotentialOptimizer::has_optimal_solution() const {$/;"	f	class:potentials::PotentialOptimizer
has_symmetries	search/structural_symmetries/group.h	/^    bool has_symmetries() const {$/;"	f	class:Group
has_temporary_constraints	search/lp/lp_solver.cc	/^int LPSolver::has_temporary_constraints() const {$/;"	f	class:lp::LPSolver
has_temporary_constraints_	search/lp/lp_solver.h	/^    bool has_temporary_constraints_;$/;"	m	class:lp::LPSolver
has_two_leaf_children	search/merge_and_shrink/merge_tree.h	/^    bool has_two_leaf_children() const {$/;"	f	struct:merge_and_shrink::MergeTreeNode
has_universal_part	translate/pddl/conditions.py	/^    def has_universal_part(self):$/;"	m	class:Condition
has_universal_part	translate/pddl/conditions.py	/^    def has_universal_part(self):$/;"	m	class:UniversalCondition
hash	search/abstract_task.h	/^struct hash<FactPair> {$/;"	s	namespace:std
hash	search/cegar/utils.h	/^struct hash<FactProxy> {$/;"	s	namespace:std
hash	search/state_id.h	/^    size_t hash() const {$/;"	f	class:StateID
hash	search/state_id.h	/^struct hash<StateID> {$/;"	s	namespace:std
hash	search/task_proxy.h	/^    std::size_t hash() const {$/;"	f	class:State
hash	search/task_proxy.h	/^struct hash<State> {$/;"	s	namespace:std
hash	search/utils/hash.h	/^struct hash<std::pair<TA, TB>> {$/;"	s	namespace:std
hash	search/utils/hash.h	/^struct hash<std::vector<T>> {$/;"	s	namespace:std
hash_combine	search/utils/hash.h	/^inline void hash_combine(size_t &hash, const T &value) {$/;"	f	namespace:utils
hash_effect	search/pdbs/pattern_database.h	/^    std::size_t hash_effect;$/;"	m	class:pdbs::AbstractOperator
hash_index	search/pdbs/pattern_database.cc	/^size_t PatternDatabase::hash_index(const State &state) const {$/;"	f	class:pdbs::PatternDatabase
hash_multipliers	search/pdbs/match_tree.h	/^    std::vector<size_t> hash_multipliers;$/;"	m	class:pdbs::MatchTree
hash_multipliers	search/pdbs/pattern_database.h	/^    std::vector<std::size_t> hash_multipliers;$/;"	m	class:pdbs::PatternDatabase
hash_sequence	search/utils/hash.h	/^size_t hash_sequence(const Sequence &data, size_t length) {$/;"	f	namespace:utils
head	search/bliss/kqueue.h	/^  Type *head, *tail;$/;"	m	class:bliss::KQueue
head	search/ext/tree.hh	/^		tree_node *head, *feet;    \/\/ head\/feet are always dummy; if an iterator points to them it is invalid$/;"	m	class:tree
head_initialise_	search/ext/tree.hh	/^void tree<T, tree_node_allocator>::head_initialise_() $/;"	f	class:tree
heap	search/algorithms/priority_queues.h	/^    Heap heap;$/;"	m	class:priority_queues::HeapQueue
heap	search/open_lists/epsilon_greedy_open_list.cc	/^    vector<HeapNode> heap;$/;"	m	class:EpsilonGreedyOpenList	file:
held	search/options/any.h	/^        ValueType held;$/;"	m	class:options::Any::Holder
help	search/options/doc_store.h	/^    std::string help;$/;"	m	struct:options::ArgumentInfo
help_mode	search/options/option_parser.cc	/^bool OptionParser::help_mode() const {$/;"	f	class:options::OptionParser
help_mode	search/options/options.h	/^    bool help_mode;$/;"	m	class:options::Options
help_mode_	search/options/option_parser.h	/^    bool help_mode_;$/;"	m	class:options::OptionParser
helpful_transition_cache	search/heuristics/cg_cache.h	/^    std::vector<std::vector<ValueTransitionLabel *>> helpful_transition_cache;$/;"	m	class:cg_heuristic::CGCache
helpful_transition_extraction_counter	search/heuristics/cg_heuristic.h	/^    int helpful_transition_extraction_counter;$/;"	m	class:cg_heuristic::CGHeuristic
helpful_transitions	search/domain_transition_graph.h	/^    std::vector<ValueTransitionLabel *> helpful_transitions;$/;"	m	struct:ValueNode
heuristic	search/search_engines/enforced_hill_climbing_search.h	/^    Heuristic *heuristic;$/;"	m	class:enforced_hill_climbing_search::EnforcedHillClimbingSearch
heuristic_cache	search/heuristic.h	/^    PerStateInformation<HEntry> heuristic_cache;$/;"	m	class:Heuristic
heuristic_functions	search/cegar/additive_cartesian_heuristic.h	/^    const std::vector<CartesianHeuristicFunction> heuristic_functions;$/;"	m	class:cegar::AdditiveCartesianHeuristic
heuristic_functions	search/cegar/cost_saturation.h	/^    std::vector<CartesianHeuristicFunction> heuristic_functions;$/;"	m	class:cegar::CostSaturation
heuristic_recomputation_needed	search/landmarks/exploration.h	/^    bool heuristic_recomputation_needed;$/;"	m	class:landmarks::Exploration
heuristics	search/options/synergy.h	/^    std::vector<Heuristic *> heuristics;$/;"	m	class:options::Synergy
heuristics	search/search_engines/eager_search.h	/^    std::vector<Heuristic *> heuristics;$/;"	m	class:eager_search::EagerSearch
heuristics	search/search_engines/enforced_hill_climbing_search.h	/^    std::set<Heuristic *> heuristics;$/;"	m	class:enforced_hill_climbing_search::EnforcedHillClimbingSearch
heuristics	search/search_engines/lazy_search.h	/^    std::vector<Heuristic *> heuristics;$/;"	m	class:lazy_search::LazySearch
heuristics	search/search_engines/top_k_eager_search.h	/^    std::vector<Heuristic *> heuristics;$/;"	m	class:top_k_eager_search::TopKEagerSearch
hidden	search/options/doc_store.h	/^    bool hidden;$/;"	m	struct:options::DocStruct
hide	search/options/doc_store.cc	/^void DocStore::hide(string k) {$/;"	f	class:options::DocStore
hill_climbing	search/pdbs/pattern_collection_generator_hillclimbing.cc	/^void PatternCollectionGeneratorHillclimbing::hill_climbing($/;"	f	class:pdbs::PatternCollectionGeneratorHillclimbing
hill_climbing_timer	search/pdbs/pattern_collection_generator_hillclimbing.h	/^    utils::CountdownTimer *hill_climbing_timer;$/;"	m	class:pdbs::PatternCollectionGeneratorHillclimbing
hm_heuristic	search/heuristics/hm_heuristic.cc	/^namespace hm_heuristic {$/;"	n	file:
hm_heuristic	search/heuristics/hm_heuristic.h	/^namespace hm_heuristic {$/;"	n
hm_table	search/heuristics/hm_heuristic.h	/^    std::map<Tuple, int> hm_table;$/;"	m	class:hm_heuristic::HMHeuristic
id	search/global_state.h	/^    StateID id;$/;"	m	class:GlobalState
id	search/heuristics/relaxation_heuristic.h	/^    int id;$/;"	m	struct:relaxation_heuristic::Proposition
id	search/landmarks/landmark_graph.h	/^    int id;$/;"	m	class:landmarks::EdgeType::LandmarkNode
id	search/open_lists/epsilon_greedy_open_list.cc	/^        int id;$/;"	m	struct:EpsilonGreedyOpenList::HeapNode	file:
id	search/task_proxy.h	/^    int id;$/;"	m	class:VariableProxy
identity	search/structural_symmetries/operator_permutation.cc	/^bool OperatorPermutation::identity() const{$/;"	f	class:OperatorPermutation
identity	search/structural_symmetries/permutation.cc	/^bool Permutation::identity() const{$/;"	f	class:Permutation
immediate_operators	search/successor_generator.cc	/^    list<OperatorProxy> immediate_operators;$/;"	m	class:GeneratorSwitch	file:
imply_del_effect	translate/invariants.py	/^    def imply_del_effect(self, del_effect, lhs_by_pred):$/;"	m	class:Invariant
in_best_path	search/bliss/graph.cc	/^  bool in_best_path;$/;"	m	class:bliss::TreeNode	file:
in_bounds	search/utils/collections.h	/^bool in_bounds(int index, const T &container) {$/;"	f	namespace:utils
in_bounds	search/utils/collections.h	/^bool in_bounds(size_t index, const T &container) {$/;"	f	namespace:utils
in_goal	search/landmarks/landmark_graph.h	/^    bool in_goal;$/;"	m	class:landmarks::EdgeType::LandmarkNode
in_neighbour_heap	search/bliss/partition.h	/^    bool in_neighbour_heap;$/;"	m	class:bliss::Partition::Cell
in_orbit	search/bliss/orbit.h	/^  OrbitEntry **in_orbit;$/;"	m	class:bliss::Orbit
in_pos	search/bliss/partition.h	/^  unsigned int **in_pos;$/;"	m	class:bliss::Partition
in_search	search/bliss/graph.h	/^  bool in_search;$/;"	m	class:bliss::AbstractGraph
in_splitting_queue	search/bliss/partition.h	/^    bool in_splitting_queue;$/;"	m	class:bliss::Partition::Cell
inc_dead_ends	search/search_statistics.h	/^    void inc_dead_ends(int inc = 1) {dead_end_states += inc; }$/;"	f	class:SearchStatistics
inc_evaluated_states	search/search_statistics.h	/^    void inc_evaluated_states(int inc = 1) {evaluated_states += inc; }$/;"	f	class:SearchStatistics
inc_evaluations	search/search_statistics.h	/^    void inc_evaluations(int inc = 1) {evaluations += inc; }$/;"	f	class:SearchStatistics
inc_expanded	search/search_statistics.h	/^    void inc_expanded(int inc = 1) {expanded_states += inc; }$/;"	f	class:SearchStatistics
inc_generated	search/search_statistics.h	/^    void inc_generated(int inc = 1) {generated_states += inc; }$/;"	f	class:SearchStatistics
inc_generated_ops	search/search_statistics.h	/^    void inc_generated_ops(int inc = 1) {generated_ops += inc; }$/;"	f	class:SearchStatistics
inc_reopened	search/search_statistics.h	/^    void inc_reopened(int inc = 1) {reopened_states += inc; }$/;"	f	class:SearchStatistics
includes	search/cegar/abstract_state.cc	/^bool AbstractState::includes(const State &concrete_state) const {$/;"	f	class:cegar::AbstractState
incoming_transition	search/cegar/abstract_state.h	/^    Transition incoming_transition;$/;"	m	class:cegar::AbstractSearchInfo
incoming_transitions	search/cegar/abstract_state.h	/^    Transitions incoming_transitions;$/;"	m	class:cegar::AbstractState
incorporated_variables	search/merge_and_shrink/fts_factory.cc	/^        vector<int> incorporated_variables;$/;"	m	struct:merge_and_shrink::FTSFactory::TransitionSystemData	file:
incorporated_variables	search/merge_and_shrink/transition_system.h	/^    std::vector<int> incorporated_variables;$/;"	m	class:merge_and_shrink::TransitionSystem
increase_cost	search/heuristics/additive_heuristic.h	/^    void increase_cost(int &cost, int amount) {$/;"	f	class:additive_heuristic::AdditiveHeuristic
increase_cost	search/landmarks/exploration.cc	/^void Exploration::increase_cost(int &cost, int amount) {$/;"	f	class:landmarks::Exploration
increase_h_value_to	search/cegar/refinement_hierarchy.h	/^    void increase_h_value_to(int new_h) {$/;"	f	class:cegar::Node
indegree_invariant	search/bliss/graph.cc	/^Digraph::indegree_invariant(const Digraph* const g, const unsigned int vnum)$/;"	f	class:bliss::Digraph
index	search/ext/tree.hh	/^unsigned int tree<T, tree_node_allocator>::index(sibling_iterator it) const$/;"	f	class:tree
index	search/global_operator.h	/^	int index;$/;"	m	class:GlobalOperator
index	search/landmarks/landmark_factory_h_m.h	/^    int index;$/;"	m	struct:landmarks::PMOp
index	search/task_proxy.h	/^    int index;$/;"	m	class:OperatorProxy
index	translate/build_model.py	/^    index = sys.maxsize$/;"	v	class:LeafGenerator
indices	search/lp/lp_solver.h	/^    std::vector<int> indices;$/;"	m	class:lp::LPSolver
individualize	search/bliss/partition.cc	/^Partition::individualize(Partition::Cell * const cell,$/;"	f	class:bliss::Partition
info	search/search_space.h	/^    SearchNodeInfo &info;$/;"	m	class:SearchNode
info_bytes	search/search_node_info.cc	/^static const int info_bytes = 3 * sizeof(int) + sizeof(StateID);$/;"	v	file:
information_is_valid	search/pdbs/pattern_collection_information.cc	/^bool PatternCollectionInformation::information_is_valid() const {$/;"	f	class:pdbs::PatternCollectionInformation
init	search/bliss/heap.cc	/^void Heap::init(const unsigned int size)$/;"	f	class:bliss::Heap
init	search/bliss/kqueue.h	/^void KQueue<Type>::init(const unsigned int k)$/;"	f	class:bliss::KQueue
init	search/bliss/kstack.h	/^void KStack<Type>::init(int k)$/;"	f	class:bliss::KStack
init	search/bliss/orbit.cc	/^void Orbit::init(const unsigned int n)$/;"	f	class:bliss::Orbit
init	search/bliss/partition.cc	/^void Partition::init(const unsigned int M)$/;"	f	class:bliss::Partition
init	search/cegar/abstraction.h	/^    AbstractState *init;$/;"	m	class:cegar::Abstraction
init_distances	search/merge_and_shrink/distances.h	/^    std::vector<int> init_distances;$/;"	m	class:merge_and_shrink::Distances
init_hm_table	search/heuristics/hm_heuristic.cc	/^void HMHeuristic::init_hm_table(const Tuple &t) {$/;"	f	class:hm_heuristic::HMHeuristic
init_state	search/merge_and_shrink/fts_factory.cc	/^        int init_state;$/;"	m	struct:merge_and_shrink::FTSFactory::TransitionSystemData	file:
init_state	search/merge_and_shrink/transition_system.h	/^    int init_state;$/;"	m	class:merge_and_shrink::TransitionSystem
initial_state_data	search/state_registry.h	/^    const std::vector<int> &initial_state_data;$/;"	m	class:StateRegistry
initial_state_values	search/tasks/domain_abstracted_task.h	/^    const std::vector<int> initial_state_values;$/;"	m	class:extra_tasks::DomainAbstractedTask
initial_state_values	search/tasks/domain_abstracted_task_factory.cc	/^    vector<int> initial_state_values;$/;"	m	class:extra_tasks::DomainAbstractedTaskFactory	file:
initial_state_values	search/tasks/plan_forbid_reformulated_task.h	/^	std::vector<int> initial_state_values;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
initialize	search/landmarks/landmark_factory_h_m.cc	/^void LandmarkFactoryHM::initialize(const TaskProxy &task_proxy) {$/;"	f	class:landmarks::LandmarkFactoryHM
initialize	search/merge_and_shrink/label_reduction.cc	/^void LabelReduction::initialize(const TaskProxy &task_proxy) {$/;"	f	class:merge_and_shrink::LabelReduction
initialize	search/merge_and_shrink/merge_scoring_function.h	/^    virtual void initialize(const TaskProxy &) {$/;"	f	class:merge_and_shrink::MergeScoringFunction
initialize	search/merge_and_shrink/merge_scoring_function_total_order.cc	/^void MergeScoringFunctionTotalOrder::initialize(const TaskProxy &task_proxy) {$/;"	f	class:merge_and_shrink::MergeScoringFunctionTotalOrder
initialize	search/merge_and_shrink/merge_selector_score_based_filtering.cc	/^void MergeSelectorScoreBasedFiltering::initialize(const TaskProxy &task_proxy) {$/;"	f	class:merge_and_shrink::MergeSelectorScoreBasedFiltering
initialize	search/pdbs/match_tree.cc	/^void MatchTree::Node::initialize(int var_id_, int var_domain_size_) {$/;"	f	class:pdbs::MatchTree::Node
initialize	search/potentials/potential_optimizer.cc	/^void PotentialOptimizer::initialize() {$/;"	f	class:potentials::PotentialOptimizer
initialize	search/pruning/null_pruning_method.cc	/^void NullPruningMethod::initialize(const shared_ptr<AbstractTask> &task) {$/;"	f	class:null_pruning_method::NullPruningMethod
initialize	search/pruning/stubborn_sets.cc	/^void StubbornSets::initialize(const shared_ptr<AbstractTask> &task) {$/;"	f	class:stubborn_sets::StubbornSets
initialize	search/pruning/stubborn_sets_ec.cc	/^void StubbornSetsEC::initialize(const shared_ptr<AbstractTask> &task) {$/;"	f	class:stubborn_sets_ec::StubbornSetsEC
initialize	search/pruning/stubborn_sets_simple.cc	/^void StubbornSetsSimple::initialize(const shared_ptr<AbstractTask> &task) {$/;"	f	class:stubborn_sets_simple::StubbornSetsSimple
initialize	search/pruning_method.cc	/^void PruningMethod::initialize(const shared_ptr<AbstractTask> &task_) {$/;"	f	class:PruningMethod
initialize	search/search_engine.h	/^    virtual void initialize() {}$/;"	f	class:SearchEngine
initialize	search/search_engines/eager_search.cc	/^void EagerSearch::initialize() {$/;"	f	class:eager_search::EagerSearch
initialize	search/search_engines/enforced_hill_climbing_search.cc	/^void EnforcedHillClimbingSearch::initialize() {$/;"	f	class:enforced_hill_climbing_search::EnforcedHillClimbingSearch
initialize	search/search_engines/lazy_search.cc	/^void LazySearch::initialize() {$/;"	f	class:lazy_search::LazySearch
initialize	search/search_engines/top_k_eager_search.cc	/^void TopKEagerSearch::initialize() {$/;"	f	class:top_k_eager_search::TopKEagerSearch
initialize	search/tasks/domain_abstracted_task_factory.cc	/^void DomainAbstractedTaskFactory::initialize(const AbstractTask &parent) {$/;"	f	class:extra_tasks::DomainAbstractedTaskFactory
initialize_certificate	search/bliss/graph.cc	/^Digraph::initialize_certificate()$/;"	f	class:bliss::Digraph
initialize_certificate	search/bliss/graph.cc	/^Graph::initialize_certificate()$/;"	f	class:bliss::Graph
initialize_constraints	search/operator_counting/constraint_generator.cc	/^void ConstraintGenerator::initialize_constraints($/;"	f	class:operator_counting::ConstraintGenerator
initialize_constraints	search/operator_counting/lm_cut_constraints.cc	/^void LMCutConstraints::initialize_constraints($/;"	f	class:operator_counting::LMCutConstraints
initialize_constraints	search/operator_counting/pho_constraints.cc	/^void PhOConstraints::initialize_constraints($/;"	f	class:operator_counting::PhOConstraints
initialize_constraints	search/operator_counting/state_equation_constraints.cc	/^void StateEquationConstraints::initialize_constraints($/;"	f	class:operator_counting::StateEquationConstraints
initialize_groups	search/merge_and_shrink/shrink_bisimulation.cc	/^int ShrinkBisimulation::initialize_groups(const FactoredTransitionSystem &fts,$/;"	f	class:merge_and_shrink::ShrinkBisimulation
initialize_heap	search/heuristics/cea_heuristic.cc	/^inline void ContextEnhancedAdditiveHeuristic::initialize_heap() {$/;"	f	class:cea_heuristic::ContextEnhancedAdditiveHeuristic
initialize_index_structures	search/domain_transition_graph.cc	/^void DTGFactory::initialize_index_structures(int num_dtgs) {$/;"	f	class:DTGFactory
initialize_stubborn_set	search/pruning/stubborn_sets_ec.cc	/^void StubbornSetsEC::initialize_stubborn_set(const State &state) {$/;"	f	class:stubborn_sets_ec::StubbornSetsEC
initialize_stubborn_set	search/pruning/stubborn_sets_simple.cc	/^void StubbornSetsSimple::initialize_stubborn_set(const State &state) {$/;"	f	class:stubborn_sets_simple::StubbornSetsSimple
initialize_transition_system_data	search/merge_and_shrink/fts_factory.cc	/^void FTSFactory::initialize_transition_system_data(const Labels &labels) {$/;"	f	class:merge_and_shrink::FTSFactory
initialized	search/merge_and_shrink/label_reduction.cc	/^bool LabelReduction::initialized() const {$/;"	f	class:merge_and_shrink::LabelReduction
initialized	search/merge_and_shrink/merge_scoring_function.h	/^    bool initialized;$/;"	m	class:merge_and_shrink::MergeScoringFunction
initialized	search/structural_symmetries/group.h	/^    bool initialized;$/;"	m	class:Group
inorder	search/merge_and_shrink/merge_tree.cc	/^void MergeTreeNode::inorder(int offset, int current_indentation) const {$/;"	f	class:merge_and_shrink::MergeTreeNode
inorder_traversal	search/merge_and_shrink/merge_tree.cc	/^void MergeTree::inorder_traversal(int indentation_offset) const {$/;"	f	class:merge_and_shrink::MergeTree
insert	search/algorithms/equivalence_relation.cc	/^ElementListIter Block::insert(int element) {$/;"	f	class:equivalence_relation::Block
insert	search/algorithms/ordered_set.h	/^    void insert(const T &item) {$/;"	f	class:ordered_set::OrderedSet
insert	search/bliss/heap.cc	/^void Heap::insert(const unsigned int v)$/;"	f	class:bliss::Heap
insert	search/ext/tree.hh	/^iter tree<T, tree_node_allocator>::insert(iter position, const T& x)$/;"	f	class:tree
insert	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::sibling_iterator tree<T, tree_node_allocator>::insert(sibling_iterator position, const T& x)$/;"	f	class:tree
insert	search/lp/lp_solver.cc	/^void LPConstraint::insert(int index, double coefficient) {$/;"	f	class:lp::LPConstraint
insert	search/merge_and_shrink/label_equivalence_relation.h	/^    LabelIter insert(int label) {$/;"	f	class:merge_and_shrink::LabelGroup
insert	search/open_lists/open_list.h	/^void OpenList<Entry>::insert($/;"	f	class:OpenList
insert	search/options/registries.cc	/^void PluginTypeRegistry::insert(const PluginTypeInfo &info) {$/;"	f	class:options::PluginTypeRegistry
insert	search/options/registries.h	/^    void insert(const std::string &k, Factory f) {$/;"	f	class:options::Registry
insert	search/pdbs/match_tree.cc	/^void MatchTree::insert(const AbstractOperator &op) {$/;"	f	class:pdbs::MatchTree
insert_after	search/ext/tree.hh	/^iter tree<T, tree_node_allocator>::insert_after(iter position, const T& x)$/;"	f	class:tree
insert_id_or_pop_state	search/state_registry.cc	/^StateID StateRegistry::insert_id_or_pop_state() {$/;"	f	class:StateRegistry
insert_id_or_pop_state_dks	search/state_registry.cc	/^StateID StateRegistry::insert_id_or_pop_state_dks() {$/;"	f	class:StateRegistry
insert_into	search/landmarks/landmark_factory_h_m.cc	/^void insert_into(list<T> &alist, const T &val) {$/;"	f	namespace:landmarks
insert_recursive	search/pdbs/match_tree.cc	/^void MatchTree::insert_recursive($/;"	f	class:pdbs::MatchTree
insert_subtree	search/ext/tree.hh	/^iter tree<T, tree_node_allocator>::insert_subtree(iter position, const iterator_base& subtree)$/;"	f	class:tree
insert_subtree_after	search/ext/tree.hh	/^iter tree<T, tree_node_allocator>::insert_subtree_after(iter position, const iterator_base& subtree)$/;"	f	class:tree
insert_successor_into_open_list	search/search_engines/enforced_hill_climbing_search.cc	/^void EnforcedHillClimbingSearch::insert_successor_into_open_list($/;"	f	class:enforced_hill_climbing_search::EnforcedHillClimbingSearch
instance	search/options/doc_store.h	/^    static DocStore *instance() {$/;"	f	class:options::DocStore
instance	search/options/predefinitions.h	/^    static Predefinitions<T> *instance() {$/;"	f	class:options::Predefinitions
instance	search/options/registries.cc	/^PluginTypeRegistry *PluginTypeRegistry::instance() {$/;"	f	class:options::PluginTypeRegistry
instance	search/options/registries.h	/^    static Registry<T> *instance() {$/;"	f	class:options::Registry
instantiate	translate/instantiate.py	/^def instantiate(task, model):$/;"	f
instantiate	translate/invariants.py	/^    def instantiate(self, parameters):$/;"	m	class:Invariant
instantiate	translate/invariants.py	/^    def instantiate(self, parameters):$/;"	m	class:InvariantPart
instantiate	translate/pddl/actions.py	/^    def instantiate(self, var_mapping, init_facts, fluent_facts,$/;"	m	class:Action
instantiate	translate/pddl/axioms.py	/^    def instantiate(self, var_mapping, init_facts, fluent_facts):$/;"	m	class:Axiom
instantiate	translate/pddl/conditions.py	/^    def instantiate(self, var_mapping, init_facts, fluent_facts, result):$/;"	m	class:Atom
instantiate	translate/pddl/conditions.py	/^    def instantiate(self, var_mapping, init_facts, fluent_facts, result):$/;"	m	class:Condition
instantiate	translate/pddl/conditions.py	/^    def instantiate(self, var_mapping, init_facts, fluent_facts, result):$/;"	m	class:Conjunction
instantiate	translate/pddl/conditions.py	/^    def instantiate(self, var_mapping, init_facts, fluent_facts, result):$/;"	m	class:ExistentialCondition
instantiate	translate/pddl/conditions.py	/^    def instantiate(self, var_mapping, init_facts, fluent_facts, result):$/;"	m	class:Falsity
instantiate	translate/pddl/conditions.py	/^    def instantiate(self, var_mapping, init_facts, fluent_facts, result):$/;"	m	class:NegatedAtom
instantiate	translate/pddl/conditions.py	/^    def instantiate(self, var_mapping, init_facts, fluent_facts, result):$/;"	m	class:Truth
instantiate	translate/pddl/effects.py	/^    def instantiate(self, var_mapping, init_facts, fluent_facts,$/;"	m	class:Effect
instantiate	translate/pddl/f_expression.py	/^    def instantiate(self, var_mapping, init_facts):$/;"	m	class:FunctionAssignment
instantiate	translate/pddl/f_expression.py	/^    def instantiate(self, var_mapping, init_facts):$/;"	m	class:FunctionalExpression
instantiate	translate/pddl/f_expression.py	/^    def instantiate(self, var_mapping, init_facts):$/;"	m	class:NumericConstant
instantiate	translate/pddl/f_expression.py	/^    def instantiate(self, var_mapping, init_facts):$/;"	m	class:PrimitiveNumericExpression
instantiate_factored_mapping	translate/invariants.py	/^def instantiate_factored_mapping(pairs):$/;"	f
instantiate_groups	translate/fact_groups.py	/^def instantiate_groups(groups, task, reachable_facts):$/;"	f
int_packer	search/algorithms/int_packer.cc	/^namespace int_packer {$/;"	n	file:
int_packer	search/algorithms/int_packer.h	/^namespace int_packer {$/;"	n
int_packer	search/axioms.h	/^namespace int_packer {$/;"	n
int_packer	search/globals.h	/^namespace int_packer {$/;"	n
int_sets	search/causal_graph.cc	/^    vector<IntSet> int_sets;$/;"	m	class:IntRelationBuilder	file:
interesting	search/landmarks/landmark_factory_h_m.cc	/^bool LandmarkFactoryHM::interesting(const VariablesProxy &variables,$/;"	f	class:landmarks::LandmarkFactoryHM
interfere	search/pruning/stubborn_sets_simple.h	/^    inline bool interfere(int op1_no, int op2_no) {$/;"	f	class:stubborn_sets_simple::StubbornSetsSimple
interference_relation	search/pruning/stubborn_sets_simple.h	/^    std::vector<std::vector<int>> interference_relation;$/;"	m	class:stubborn_sets_simple::StubbornSetsSimple
interferes	search/landmarks/landmark_factory.cc	/^bool LandmarkFactory::interferes(const TaskProxy &task_proxy,$/;"	f	class:landmarks::LandmarkFactory
interrupt	search/search_engines/top_k_eager_search.cc	/^void TopKEagerSearch::interrupt() {$/;"	f	class:top_k_eager_search::TopKEagerSearch
interrupt_immediatly	search/search_engines/top_k_eager_search.h	/^	bool interrupt_immediatly = false;$/;"	m	struct:top_k_eager_search::SearchControl
interrupt_search	search/search_engines/top_k_eager_search.h	/^	bool interrupt_search;$/;"	m	class:top_k_eager_search::TopKEagerSearch
intersect_with	search/landmarks/landmark_factory_h_m.cc	/^void intersect_with(list<T> &alist, const list<T> &other) {$/;"	f	namespace:landmarks
intersects	search/algorithms/dynamic_bitset.h	/^    bool intersects(const DynamicBitset &other) const {$/;"	f	class:dynamic_bitset::DynamicBitset
intersects	search/cegar/domains.cc	/^bool Domains::intersects(const Domains &other, int var) const {$/;"	f	class:cegar::Domains
invariant_values	search/bliss/partition.h	/^  unsigned int *invariant_values;$/;"	m	class:bliss::Partition
invert_list	translate/invariants.py	/^def invert_list(alist):$/;"	f
is_active	search/merge_and_shrink/factored_transition_system.h	/^    bool is_active(int index) const {$/;"	f	class:merge_and_shrink::FactoredTransitionSystem
is_an_axiom	search/global_operator.h	/^    bool is_an_axiom;$/;"	m	class:GlobalOperator
is_an_axiom	search/task_proxy.h	/^    bool is_an_axiom;$/;"	m	class:OperatorProxy
is_applicable	search/global_operator.h	/^    bool is_applicable(const GlobalState &state) const {$/;"	f	class:GlobalOperator
is_applicable	search/global_operator.h	/^    bool is_applicable(const GlobalState &state) const {$/;"	f	struct:GlobalCondition
is_applicable	search/pruning/stubborn_sets_ec.cc	/^bool StubbornSetsEC::is_applicable(int op_no, const State &state) const {$/;"	f	class:stubborn_sets_ec::StubbornSetsEC
is_applicable	search/task_tools.h	/^inline bool is_applicable(OperatorProxy op, const State &state) {$/;"	f
is_automorphism	search/bliss/graph.cc	/^AbstractGraph::is_automorphism(const std::vector<unsigned int>& perm) const$/;"	f	class:bliss::AbstractGraph
is_automorphism	search/bliss/graph.cc	/^AbstractGraph::is_automorphism(unsigned int* const perm)$/;"	f	class:bliss::AbstractGraph
is_automorphism	search/bliss/graph.cc	/^Digraph::is_automorphism(const std::vector<unsigned int>& perm) const$/;"	f	class:bliss::Digraph
is_automorphism	search/bliss/graph.cc	/^Digraph::is_automorphism(unsigned int* const perm)$/;"	f	class:bliss::Digraph
is_automorphism	search/bliss/graph.cc	/^Graph::is_automorphism(const std::vector<unsigned int>& perm) const$/;"	f	class:bliss::Graph
is_automorphism	search/bliss/graph.cc	/^Graph::is_automorphism(unsigned int* const perm)$/;"	f	class:bliss::Graph
is_axiom	search/domain_transition_graph.h	/^    bool is_axiom;$/;"	m	struct:ValueTransitionLabel
is_axiom	search/global_operator.h	/^    bool is_axiom() const {return is_an_axiom; }$/;"	f	class:GlobalOperator
is_axiom	search/task_proxy.h	/^    bool is_axiom() const {$/;"	f	class:OperatorProxy
is_axiom	search/task_proxy.h	/^    bool is_axiom;$/;"	m	class:EffectConditionsProxy
is_axiom	search/task_proxy.h	/^    bool is_axiom;$/;"	m	class:EffectProxy
is_axiom	search/task_proxy.h	/^    bool is_axiom;$/;"	m	class:EffectsProxy
is_axiom	search/task_proxy.h	/^    bool is_axiom;$/;"	m	class:PreconditionsProxy
is_cached	search/heuristics/cg_cache.h	/^    bool is_cached(int var) const {$/;"	f	class:cg_heuristic::CGCache
is_call	search/options/doc_printer.cc	/^static bool is_call(string s) {$/;"	f	namespace:options
is_causal_landmark	search/landmarks/landmark_factory.cc	/^bool LandmarkFactory::is_causal_landmark(const TaskProxy &task_proxy, Exploration &exploration,$/;"	f	class:landmarks::LandmarkFactory
is_causal_predecessor	search/variable_order_finder.h	/^    std::vector<bool> is_causal_predecessor;$/;"	m	class:VariableOrderFinder
is_closed	search/search_space.cc	/^bool SearchNode::is_closed() const {$/;"	f	class:SearchNode
is_component_valid	search/merge_and_shrink/factored_transition_system.cc	/^bool FactoredTransitionSystem::is_component_valid(int index) const {$/;"	f	class:merge_and_shrink::FactoredTransitionSystem
is_consistent	translate/constraints.py	/^    def is_consistent(self):$/;"	m	class:Assignment
is_current_label	search/merge_and_shrink/labels.cc	/^bool Labels::is_current_label(int label_no) const {$/;"	f	class:merge_and_shrink::Labels
is_dead_end	search/open_lists/alternation_open_list.cc	/^bool AlternationOpenList<Entry>::is_dead_end($/;"	f	class:AlternationOpenList
is_dead_end	search/open_lists/epsilon_greedy_open_list.cc	/^bool EpsilonGreedyOpenList<Entry>::is_dead_end($/;"	f	class:EpsilonGreedyOpenList
is_dead_end	search/open_lists/pareto_open_list.cc	/^bool ParetoOpenList<Entry>::is_dead_end($/;"	f	class:ParetoOpenList
is_dead_end	search/open_lists/standard_scalar_open_list.cc	/^bool StandardScalarOpenList<Entry>::is_dead_end($/;"	f	class:StandardScalarOpenList
is_dead_end	search/open_lists/tiebreaking_open_list.cc	/^bool TieBreakingOpenList<Entry>::is_dead_end($/;"	f	class:TieBreakingOpenList
is_dead_end	search/open_lists/type_based_open_list.cc	/^bool TypeBasedOpenList<Entry>::is_dead_end($/;"	f	class:TypeBasedOpenList
is_dead_end	search/pdbs/incremental_canonical_pdbs.cc	/^bool IncrementalCanonicalPDBs::is_dead_end(const State &state) const {$/;"	f	class:pdbs::IncrementalCanonicalPDBs
is_dead_end	search/search_space.cc	/^bool SearchNode::is_dead_end() const {$/;"	f	class:SearchNode
is_derived	search/landmarks/landmark_graph.h	/^    bool is_derived;$/;"	m	class:landmarks::EdgeType::LandmarkNode
is_derived	search/task_proxy.h	/^    bool is_derived() const {$/;"	f	class:VariableProxy
is_discrete	search/bliss/partition.h	/^  bool is_discrete() const {return(free_cells == 0); }$/;"	f	class:bliss::Partition
is_empty	search/bliss/heap.h	/^  bool is_empty() const {return(n==0); }$/;"	f	class:bliss::Heap
is_empty	search/bliss/kqueue.h	/^bool KQueue<Type>::is_empty() const$/;"	f	class:bliss::KQueue
is_empty	search/bliss/kstack.h	/^  bool is_empty() const {return(cursor == entries); }$/;"	f	class:bliss::KStack
is_empty_group	search/merge_and_shrink/label_equivalence_relation.h	/^    bool is_empty_group(int group_id) const {$/;"	f	class:merge_and_shrink::LabelEquivalenceRelation
is_equal	search/bliss/uintseqhash.h	/^  bool is_equal(const UintSeqHash &other) const {return(cmp(other) == 0); }$/;"	f	class:bliss::UintSeqHash
is_equitable	search/bliss/graph.cc	/^Digraph::is_equitable() const$/;"	f	class:bliss::Digraph
is_equitable	search/bliss/graph.cc	/^bool Graph::is_equitable() const$/;"	f	class:bliss::Graph
is_exit_code_error_reentrant	search/utils/system.cc	/^bool is_exit_code_error_reentrant(ExitCode exitcode) {$/;"	f	namespace:utils
is_expired	search/utils/countdown_timer.cc	/^bool CountdownTimer::is_expired() const {$/;"	f	class:utils::CountdownTimer
is_goal	search/cegar/abstraction.cc	/^bool Abstraction::is_goal(AbstractState *state) const {$/;"	f	class:cegar::Abstraction
is_goal	search/heuristics/relaxation_heuristic.h	/^    bool is_goal;$/;"	m	struct:relaxation_heuristic::Proposition
is_goal	search/landmarks/landmark_graph.h	/^    bool is_goal() const {$/;"	f	class:landmarks::EdgeType::LandmarkNode
is_goal_condition	search/landmarks/exploration.h	/^    bool is_goal_condition;$/;"	m	struct:landmarks::ExProposition
is_goal_relevant	search/merge_and_shrink/utils.cc	/^bool is_goal_relevant(const TransitionSystem &ts) {$/;"	f	namespace:merge_and_shrink
is_goal_state	search/merge_and_shrink/transition_system.h	/^    bool is_goal_state(int state) const {$/;"	f	class:merge_and_shrink::TransitionSystem
is_goal_state	search/pdbs/pattern_database.cc	/^bool PatternDatabase::is_goal_state($/;"	f	class:pdbs::PatternDatabase
is_goal_state	search/task_tools.h	/^inline bool is_goal_state(TaskProxy task, const State &state) {$/;"	f
is_goal_variable	search/variable_order_finder.h	/^    std::vector<bool> is_goal_variable;$/;"	m	class:VariableOrderFinder
is_h_dirty	search/heuristic.h	/^    bool is_h_dirty(GlobalState &state) {$/;"	f	class:Heuristic
is_heuristic_improved	search/pdbs/pattern_collection_generator_hillclimbing.cc	/^bool PatternCollectionGeneratorHillclimbing::is_heuristic_improved($/;"	f	class:pdbs::PatternCollectionGeneratorHillclimbing
is_heuristic_infinite	search/evaluation_context.cc	/^bool EvaluationContext::is_heuristic_infinite(ScalarEvaluator *heur) {$/;"	f	class:EvaluationContext
is_in_splitting_queue	search/bliss/partition.h	/^    bool is_in_splitting_queue() const {return(in_splitting_queue); }$/;"	f	class:bliss::Partition::Cell
is_in_subtree	search/ext/tree.hh	/^bool tree<T, tree_node_allocator>::is_in_subtree(const iterator_base& it, const iterator_base& begin, $/;"	f	class:tree
is_index_valid	search/merge_and_shrink/factored_transition_system.cc	/^bool FactoredTransitionSystem::is_index_valid(int index) const {$/;"	f	class:merge_and_shrink::FactoredTransitionSystem
is_induced_by_axiom	search/landmarks/exploration.h	/^    bool is_induced_by_axiom(const TaskProxy &task_proxy) const {$/;"	f	struct:landmarks::ExUnaryOperator
is_infinite	search/evaluation_result.cc	/^bool EvaluationResult::is_infinite() const {$/;"	f	class:EvaluationResult
is_initialized	search/lp/lp_solver.h	/^    bool is_initialized;$/;"	m	class:lp::LPSolver
is_initialized	search/structural_symmetries/group.h	/^    bool is_initialized() const {$/;"	f	class:Group
is_landmark	search/landmarks/exploration.cc	/^static bool is_landmark(vector<FactPair> &landmarks, const FactPair &fact) {$/;"	f	namespace:landmarks
is_landmark_precondition	search/landmarks/landmark_factory.cc	/^bool LandmarkFactory::is_landmark_precondition(const OperatorProxy &op,$/;"	f	class:landmarks::LandmarkFactory
is_le	search/bliss/uintseqhash.h	/^  bool is_le(const UintSeqHash &other) const {return(cmp(other) <= 0); }$/;"	f	class:bliss::UintSeqHash
is_leaf	search/merge_and_shrink/merge_tree.h	/^    bool is_leaf() const {$/;"	f	struct:merge_and_shrink::MergeTreeNode
is_leaf_node	search/pdbs/match_tree.cc	/^bool MatchTree::Node::is_leaf_node() const {$/;"	f	class:pdbs::MatchTree::Node
is_local_problem_set_up	search/heuristics/cea_heuristic.cc	/^bool ContextEnhancedAdditiveHeuristic::is_local_problem_set_up($/;"	f	class:cea_heuristic::ContextEnhancedAdditiveHeuristic
is_lt	search/bliss/uintseqhash.h	/^  bool is_lt(const UintSeqHash &other) const {return(cmp(other) < 0); }$/;"	f	class:bliss::UintSeqHash
is_minimal_representative	search/bliss/orbit.cc	/^bool Orbit::is_minimal_representative(unsigned int element) const$/;"	f	class:bliss::Orbit
is_more_general_than	search/cegar/abstract_state.cc	/^bool AbstractState::is_more_general_than(const AbstractState &other) const {$/;"	f	class:cegar::AbstractState
is_mutex	search/task_proxy.h	/^    bool is_mutex(const FactProxy &other) const {$/;"	f	class:FactProxy
is_new	search/search_space.cc	/^bool SearchNode::is_new() const {$/;"	f	class:SearchNode
is_nondominated	search/open_lists/pareto_open_list.cc	/^bool ParetoOpenList<Entry>::is_nondominated($/;"	f	class:ParetoOpenList
is_op_affected	search/structural_symmetries/operator_permutation.h	/^    std::vector<bool> is_op_affected;$/;"	m	class:OperatorPermutation
is_open	search/search_space.cc	/^bool SearchNode::is_open() const {$/;"	f	class:SearchNode
is_operator_on_plan	search/tasks/plan_forbid_reformulated_task.cc	/^bool PlanForbidReformulatedTask::is_operator_on_plan(int op_no) const {$/;"	f	class:extra_tasks::PlanForbidReformulatedTask
is_operator_relevant	search/pdbs/pattern_database.cc	/^bool PatternDatabase::is_operator_relevant(const OperatorProxy &op) const {$/;"	f	class:pdbs::PatternDatabase
is_pattern_too_large	search/pdbs/pattern_collection_generator_genetic.cc	/^bool PatternCollectionGeneratorGenetic::is_pattern_too_large($/;"	f	class:pdbs::PatternCollectionGeneratorGenetic
is_permutation	search/bliss/utils.cc	/^is_permutation(const std::vector<unsigned int>& perm)$/;"	f	namespace:bliss
is_permutation	search/bliss/utils.cc	/^is_permutation(const unsigned int N, const unsigned int* perm)$/;"	f	namespace:bliss
is_preferred	search/evaluation_context.cc	/^bool EvaluationContext::is_preferred() const {$/;"	f	class:EvaluationContext
is_product_within_limit	search/utils/math.cc	/^bool is_product_within_limit(int factor1, int factor2, int limit) {$/;"	f	namespace:utils
is_relevant	search/merge_and_shrink/fts_factory.cc	/^bool FTSFactory::is_relevant(int var_no, int label_no) const {$/;"	f	class:merge_and_shrink::FTSFactory
is_reliable_dead_end	search/open_lists/alternation_open_list.cc	/^bool AlternationOpenList<Entry>::is_reliable_dead_end($/;"	f	class:AlternationOpenList
is_reliable_dead_end	search/open_lists/epsilon_greedy_open_list.cc	/^bool EpsilonGreedyOpenList<Entry>::is_reliable_dead_end($/;"	f	class:EpsilonGreedyOpenList
is_reliable_dead_end	search/open_lists/pareto_open_list.cc	/^bool ParetoOpenList<Entry>::is_reliable_dead_end($/;"	f	class:ParetoOpenList
is_reliable_dead_end	search/open_lists/standard_scalar_open_list.cc	/^bool StandardScalarOpenList<Entry>::is_reliable_dead_end($/;"	f	class:StandardScalarOpenList
is_reliable_dead_end	search/open_lists/tiebreaking_open_list.cc	/^bool TieBreakingOpenList<Entry>::is_reliable_dead_end($/;"	f	class:TieBreakingOpenList
is_reliable_dead_end	search/open_lists/type_based_open_list.cc	/^bool TypeBasedOpenList<Entry>::is_reliable_dead_end($/;"	f	class:TypeBasedOpenList
is_satisfiable	translate/constraints.py	/^    def is_satisfiable(self):$/;"	m	class:NegativeClause
is_solvable	search/merge_and_shrink/factored_transition_system.h	/^    bool is_solvable() const {$/;"	f	class:merge_and_shrink::FactoredTransitionSystem
is_solvable	search/merge_and_shrink/transition_system.cc	/^bool TransitionSystem::is_solvable() const {$/;"	f	class:merge_and_shrink::TransitionSystem
is_solvable	translate/constraints.py	/^    def is_solvable(self):$/;"	m	class:ConstraintSystem
is_solved	search/lp/lp_solver.h	/^    bool is_solved;$/;"	m	class:lp::LPSolver
is_sorted_unique	search/utils/collections.h	/^extern bool is_sorted_unique(const std::vector<T> &values) {$/;"	f	namespace:utils
is_split	search/cegar/refinement_hierarchy.h	/^    bool is_split() const {$/;"	f	class:cegar::Node
is_stabilizing_initial_state	search/structural_symmetries/group.h	/^    bool is_stabilizing_initial_state() const {$/;"	f	class:Group
is_subset	search/utils/util.h	/^bool is_subset(std::set<T>&v1, std::set<T>&v2) {$/;"	f
is_subset_of	search/algorithms/dynamic_bitset.h	/^    bool is_subset_of(const DynamicBitset &other) const {$/;"	f	class:dynamic_bitset::DynamicBitset
is_superset_of	search/cegar/domains.cc	/^bool Domains::is_superset_of(const Domains &other) const {$/;"	f	class:cegar::Domains
is_termination_condition	search/landmarks/exploration.h	/^    bool is_termination_condition;$/;"	m	struct:landmarks::ExProposition
is_true_in_state	search/landmarks/landmark_graph.h	/^    bool is_true_in_state(const GlobalState &global_state) const {$/;"	f	class:landmarks::EdgeType::LandmarkNode
is_true_in_state	search/landmarks/landmark_graph.h	/^    bool is_true_in_state(const State &state) const {$/;"	f	class:landmarks::EdgeType::LandmarkNode
is_uninitialized	search/evaluation_result.cc	/^bool EvaluationResult::is_uninitialized() const {$/;"	f	class:EvaluationResult
is_unit	search/bliss/partition.h	/^    bool is_unit() const {return(length == 1); }$/;"	f	class:bliss::Partition::Cell
is_unit_cost	search/globals.cc	/^bool is_unit_cost() {$/;"	f
is_unit_cost	search/merge_and_shrink/distances.cc	/^bool Distances::is_unit_cost() const {$/;"	f	class:merge_and_shrink::Distances
is_unit_cost	search/task_tools.cc	/^bool is_unit_cost(TaskProxy task) {$/;"	f
is_unit_cost	search/tasks/cost_adapted_task.h	/^    const bool is_unit_cost;$/;"	m	class:tasks::CostAdaptedTask
is_v_applicable	search/pruning/stubborn_sets_ec.cc	/^static inline bool is_v_applicable(int var,$/;"	f	namespace:stubborn_sets_ec
is_valid	search/ext/tree.hh	/^bool tree<T, tree_node_allocator>::is_valid(const iterator_base& it) const$/;"	f	class:tree
is_valid_option	search/options/option_parser.cc	/^bool OptionParser::is_valid_option(const string &k) const {$/;"	f	class:options::OptionParser
it_intersection_block	search/algorithms/equivalence_relation.h	/^    BlockListIter it_intersection_block;$/;"	m	class:equivalence_relation::Block
iterated_found_solution	search/search_engines/iterated_search.h	/^    bool iterated_found_solution;$/;"	m	class:iterated_search::IteratedSearch
iterated_search	search/search_engines/iterated_search.cc	/^namespace iterated_search {$/;"	n	file:
iterated_search	search/search_engines/iterated_search.h	/^namespace iterated_search {$/;"	n
iterator	search/ext/tree.hh	/^		typedef pre_order_iterator            iterator;$/;"	t	class:tree
iterator_base	search/ext/tree.hh	/^		class iterator_base : public stlport::bidirectional_iterator<T, ptrdiff_t> {$/;"	c	class:tree
iterator_base	search/ext/tree.hh	/^tree<T, tree_node_allocator>::iterator_base::iterator_base()$/;"	f	class:tree::iterator_base
iterator_base	search/ext/tree.hh	/^tree<T, tree_node_allocator>::iterator_base::iterator_base(tree_node *tn)$/;"	f	class:tree::iterator_base
iterator_base_less	search/ext/tree.hh	/^		class iterator_base_less {$/;"	c	class:tree
iterator_category	search/ext/tree.hh	/^				typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:tree::iterator_base
kapacity	search/bliss/kstack.h	/^  int kapacity;$/;"	m	class:bliss::KStack
keep_operator_symmetries	search/structural_symmetries/group.h	/^    bool keep_operator_symmetries;$/;"	m	class:Group
key	search/options/parse_tree.h	/^    std::string key;$/;"	m	struct:options::ParseNode
key	translate/pddl/axioms.py	/^    def key(self):$/;"	m	class:PropositionalAxiom
key	translate/pddl/conditions.py	/^    def key(self):$/;"	m	class:Literal
key_to_bucket_index	search/open_lists/type_based_open_list.cc	/^    unordered_map<Key, int> key_to_bucket_index;$/;"	m	class:TypeBasedOpenList	file:
kp	search/ext/tree.hh	/^namespace kp {$/;"	n
kptree	search/ext/tree_util.hh	/^namespace kptree {$/;"	n
kstar	search/search_engines/kstar.cc	/^namespace kstar{$/;"	n	file:
kstar	search/search_engines/kstar.h	/^namespace kstar {$/;"	n
kwd	search/options/doc_store.h	/^    std::string kwd;$/;"	m	struct:options::ArgumentInfo
label	search/heuristics/cea_heuristic.cc	/^    const ValueTransitionLabel *label;$/;"	m	struct:cea_heuristic::LocalTransition	file:
label_equivalence_relation	search/merge_and_shrink/fts_factory.cc	/^        unique_ptr<LabelEquivalenceRelation> label_equivalence_relation;$/;"	m	struct:merge_and_shrink::FTSFactory::TransitionSystemData	file:
label_equivalence_relation	search/merge_and_shrink/transition_system.h	/^    const LabelEquivalenceRelation &label_equivalence_relation;$/;"	m	class:merge_and_shrink::TSConstIterator
label_equivalence_relation	search/merge_and_shrink/transition_system.h	/^    std::unique_ptr<LabelEquivalenceRelation> label_equivalence_relation;$/;"	m	class:merge_and_shrink::TransitionSystem
label_group	search/merge_and_shrink/transition_system.h	/^    const LabelGroup &label_group;$/;"	m	struct:merge_and_shrink::GroupAndTransitions
label_reduction	search/merge_and_shrink/merge_and_shrink_heuristic.h	/^    std::shared_ptr<LabelReduction> label_reduction;$/;"	m	class:merge_and_shrink::MergeAndShrinkHeuristic
label_to_positions	search/merge_and_shrink/label_equivalence_relation.h	/^    std::vector<std::pair<int, LabelIter>> label_to_positions;$/;"	m	class:merge_and_shrink::LabelEquivalenceRelation
labels	search/domain_transition_graph.h	/^    std::vector<ValueTransitionLabel> labels;$/;"	m	struct:ValueTransition
labels	search/landmarks/landmark_factory_zhu_givan.h	/^        lm_set labels;$/;"	m	class:landmarks::LandmarkFactoryZhuGivan::plan_graph_node
labels	search/merge_and_shrink/factored_transition_system.h	/^    std::unique_ptr<Labels> labels;$/;"	m	class:merge_and_shrink::FactoredTransitionSystem
labels	search/merge_and_shrink/label_equivalence_relation.h	/^    const Labels &labels;$/;"	m	class:merge_and_shrink::LabelEquivalenceRelation
labels	search/merge_and_shrink/label_equivalence_relation.h	/^    std::list<int> labels;$/;"	m	class:merge_and_shrink::LabelGroup
labels	search/merge_and_shrink/labels.h	/^    std::vector<std::unique_ptr<Label>> labels;$/;"	m	class:merge_and_shrink::Labels
lama_heuristic	search/landmarks/lama_ff_synergy.h	/^    std::unique_ptr<LandmarkCountHeuristic> lama_heuristic;$/;"	m	class:landmarks::LamaFFSynergy
lama_master_heuristic	search/landmarks/lama_ff_synergy.h	/^    std::unique_ptr<LamaMasterHeuristic> lama_master_heuristic;$/;"	m	class:landmarks::LamaFFSynergy
lama_notify_initial_state	search/landmarks/lama_ff_synergy.cc	/^void LamaFFSynergy::lama_notify_initial_state(const GlobalState &initial_state) {$/;"	f	class:landmarks::LamaFFSynergy
lama_notify_state_transition	search/landmarks/lama_ff_synergy.cc	/^bool LamaFFSynergy::lama_notify_state_transition($/;"	f	class:landmarks::LamaFFSynergy
lama_result	search/landmarks/lama_ff_synergy.h	/^    EvaluationResult lama_result;$/;"	m	class:landmarks::LamaFFSynergy
landmark_add_conjunctive	search/landmarks/landmark_graph.cc	/^LandmarkNode &LandmarkGraph::landmark_add_conjunctive(const set<FactPair> &lm) {$/;"	f	class:landmarks::LandmarkGraph
landmark_add_disjunctive	search/landmarks/landmark_graph.cc	/^LandmarkNode &LandmarkGraph::landmark_add_disjunctive(const set<FactPair> &lm) {$/;"	f	class:landmarks::LandmarkGraph
landmark_add_simple	search/landmarks/landmark_graph.cc	/^LandmarkNode &LandmarkGraph::landmark_add_simple(const FactPair &lm) {$/;"	f	class:landmarks::LandmarkGraph
landmark_exists	search/landmarks/landmark_graph.cc	/^bool LandmarkGraph::landmark_exists(const FactPair &lm) const {$/;"	f	class:landmarks::LandmarkGraph
landmark_generator	search/heuristics/lm_cut_heuristic.h	/^    std::unique_ptr<LandmarkCutLandmarks> landmark_generator;$/;"	m	class:lm_cut_heuristic::LandmarkCutHeuristic
landmark_generator	search/operator_counting/lm_cut_constraints.h	/^    std::unique_ptr<lm_cut_heuristic::LandmarkCutLandmarks> landmark_generator;$/;"	m	class:operator_counting::LMCutConstraints
landmark_is_interesting	search/landmarks/landmark_count_heuristic.cc	/^bool LandmarkCountHeuristic::landmark_is_interesting($/;"	f	class:landmarks::LandmarkCountHeuristic
landmark_is_leaf	search/landmarks/landmark_status_manager.cc	/^bool LandmarkStatusManager::landmark_is_leaf(const LandmarkNode &node,$/;"	f	class:landmarks::LandmarkStatusManager
landmark_status	search/landmarks/landmark_graph.h	/^enum landmark_status {lm_reached = 0, lm_not_reached = 1, lm_needed_again = 2};$/;"	g	class:landmarks::EdgeType
landmarks	search/cegar/subtask_generators.h	/^namespace landmarks {$/;"	n
landmarks	search/cegar/utils_landmarks.h	/^namespace landmarks {$/;"	n
landmarks	search/landmarks/exploration.cc	/^namespace landmarks {$/;"	n	file:
landmarks	search/landmarks/exploration.h	/^namespace landmarks {$/;"	n
landmarks	search/landmarks/lama_ff_synergy.cc	/^namespace landmarks {$/;"	n	file:
landmarks	search/landmarks/lama_ff_synergy.h	/^namespace landmarks {$/;"	n
landmarks	search/landmarks/landmark_cost_assignment.cc	/^namespace landmarks {$/;"	n	file:
landmarks	search/landmarks/landmark_cost_assignment.h	/^namespace landmarks {$/;"	n
landmarks	search/landmarks/landmark_count_heuristic.cc	/^namespace landmarks {$/;"	n	file:
landmarks	search/landmarks/landmark_count_heuristic.h	/^namespace landmarks {$/;"	n
landmarks	search/landmarks/landmark_factory.cc	/^namespace landmarks {$/;"	n	file:
landmarks	search/landmarks/landmark_factory.h	/^namespace landmarks {$/;"	n
landmarks	search/landmarks/landmark_factory_h_m.cc	/^namespace landmarks {$/;"	n	file:
landmarks	search/landmarks/landmark_factory_h_m.h	/^    std::list<int> landmarks;$/;"	m	struct:landmarks::HMEntry
landmarks	search/landmarks/landmark_factory_h_m.h	/^namespace landmarks {$/;"	n
landmarks	search/landmarks/landmark_factory_merged.cc	/^namespace landmarks {$/;"	n	file:
landmarks	search/landmarks/landmark_factory_merged.h	/^namespace landmarks {$/;"	n
landmarks	search/landmarks/landmark_factory_rpg_exhaust.cc	/^namespace landmarks {$/;"	n	file:
landmarks	search/landmarks/landmark_factory_rpg_exhaust.h	/^namespace landmarks {$/;"	n
landmarks	search/landmarks/landmark_factory_rpg_sasp.cc	/^namespace landmarks {$/;"	n	file:
landmarks	search/landmarks/landmark_factory_rpg_sasp.h	/^namespace landmarks {$/;"	n
landmarks	search/landmarks/landmark_factory_zhu_givan.cc	/^namespace landmarks {$/;"	n	file:
landmarks	search/landmarks/landmark_factory_zhu_givan.h	/^namespace landmarks {$/;"	n
landmarks	search/landmarks/landmark_graph.cc	/^namespace landmarks {$/;"	n	file:
landmarks	search/landmarks/landmark_graph.h	/^namespace landmarks {$/;"	n
landmarks	search/landmarks/landmark_status_manager.cc	/^namespace landmarks {$/;"	n	file:
landmarks	search/landmarks/landmark_status_manager.h	/^namespace landmarks {$/;"	n
landmarks	search/landmarks/util.cc	/^namespace landmarks {$/;"	n	file:
landmarks	search/landmarks/util.h	/^namespace landmarks {$/;"	n
landmarks	search/options/option_parser.cc	/^namespace landmarks {$/;"	n	file:
landmarks_cost	search/landmarks/landmark_graph.h	/^    int landmarks_cost;$/;"	m	class:landmarks::EdgeType::LandmarkGraph
landmarks_count	search/landmarks/landmark_graph.h	/^    int landmarks_count;$/;"	m	class:landmarks::EdgeType::LandmarkGraph
last_child	search/ext/tree.hh	/^	   tree_node_<T> *first_child, *last_child;$/;"	m	class:tree_node_
last_child	search/options/parse_tree.h	/^typename tree<T>::sibling_iterator last_child($/;"	f	namespace:options
last_child_of_root	search/options/parse_tree.h	/^typename tree<T>::sibling_iterator last_child_of_root(const tree<T> &tr) {$/;"	f	namespace:options
last_helpful_transition_extraction_time	search/domain_transition_graph.h	/^    int last_helpful_transition_extraction_time;$/;"	m	class:DomainTransitionGraph
last_jump_improving_symmetrical_states	search/search_statistics.h	/^    int last_jump_improving_symmetrical_states;$/;"	m	class:SearchStatistics
last_jump_symmetrical_states_generated	search/search_statistics.h	/^    int last_jump_symmetrical_states_generated;$/;"	m	class:SearchStatistics
last_jump_symmetry_improved_evaluations	search/search_statistics.h	/^    int last_jump_symmetry_improved_evaluations;$/;"	m	class:SearchStatistics
last_num_expanded	search/search_engines/enforced_hill_climbing_search.h	/^    int last_num_expanded;$/;"	m	class:enforced_hill_climbing_search::EnforcedHillClimbingSearch
last_phase_found_solution	search/search_engines/iterated_search.h	/^    bool last_phase_found_solution;$/;"	m	class:iterated_search::IteratedSearch
last_start_clock	search/utils/timer.h	/^    double last_start_clock;$/;"	m	class:utils::Timer
lastjump_evaluated_states	search/search_statistics.h	/^    int lastjump_evaluated_states;$/;"	m	class:SearchStatistics
lastjump_expanded_states	search/search_statistics.h	/^    int lastjump_expanded_states; \/\/ same guy but at point where the last jump in the open list$/;"	m	class:SearchStatistics
lastjump_f_value	search/search_statistics.h	/^    int lastjump_f_value; \/\/f value obtained in the last jump$/;"	m	class:SearchStatistics
lastjump_generated_states	search/search_statistics.h	/^    int lastjump_generated_states;$/;"	m	class:SearchStatistics
lastjump_reopened_states	search/search_statistics.h	/^    int lastjump_reopened_states; \/\/ occurred (jump == f-value of the first node in the queue increases)$/;"	m	class:SearchStatistics
lazy_search	search/search_engines/lazy_search.cc	/^namespace lazy_search {$/;"	n	file:
lazy_search	search/search_engines/lazy_search.h	/^namespace lazy_search {$/;"	n
lcm	search/structural_symmetries/permutation.cc	/^int lcm(int a, int b) {$/;"	f
leaf_iterator	search/ext/tree.hh	/^      class leaf_iterator : public iterator_base {$/;"	c	class:tree
leaf_iterator	search/ext/tree.hh	/^tree<T, tree_node_allocator>::leaf_iterator::leaf_iterator() $/;"	f	class:tree::leaf_iterator
leaf_iterator	search/ext/tree.hh	/^tree<T, tree_node_allocator>::leaf_iterator::leaf_iterator(const iterator_base &other)$/;"	f	class:tree::leaf_iterator
leaf_iterator	search/ext/tree.hh	/^tree<T, tree_node_allocator>::leaf_iterator::leaf_iterator(const sibling_iterator& other)$/;"	f	class:tree::leaf_iterator
leaf_iterator	search/ext/tree.hh	/^tree<T, tree_node_allocator>::leaf_iterator::leaf_iterator(tree_node *tn, tree_node *top)$/;"	f	class:tree::leaf_iterator
leave_block	search/utils/logging.cc	/^void MemoryTracer::leave_block(const string &block_name) {$/;"	f	class:utils::MemoryTracer
left_child	search/cegar/refinement_hierarchy.h	/^    Node *left_child;$/;"	m	class:cegar::Node
left_child	search/merge_and_shrink/merge_and_shrink_representation.h	/^    std::unique_ptr<MergeAndShrinkRepresentation> left_child;$/;"	m	class:merge_and_shrink::MergeAndShrinkRepresentationMerge
left_child	search/merge_and_shrink/merge_tree.h	/^    MergeTreeNode *left_child;$/;"	m	struct:merge_and_shrink::MergeTreeNode
length	search/bliss/partition.h	/^    unsigned int length;$/;"	m	class:bliss::Partition::Cell
length	search/structural_symmetries/permutation.cc	/^int Permutation::length;$/;"	m	class:Permutation	file:
length	search/structural_symmetries/permutation.h	/^    static int length;$/;"	m	class:Permutation
level	search/bliss/partition.h	/^    unsigned int level;$/;"	m	class:bliss::Partition::CRCell
level	search/landmarks/landmark_factory_h_m.h	/^    int level;$/;"	m	struct:landmarks::HMEntry
lgraph	search/landmarks/landmark_count_heuristic.h	/^    std::shared_ptr<LandmarkGraph> lgraph;$/;"	m	class:landmarks::LandmarkCountHeuristic
lhs_satisfiable	translate/invariants.py	/^    def lhs_satisfiable(self, renaming, lhs_by_pred):$/;"	m	class:Invariant
listify	translate/sas_tasks.py	/^        def listify(entry):$/;"	f	function:SASOperator._canonical_pre_post
literal	search/axioms.h	/^        AxiomLiteral *literal;$/;"	m	struct:AxiomEvaluator::NegationByFailureInfo
lm_cost_assignment	search/landmarks/landmark_count_heuristic.h	/^    std::unique_ptr<LandmarkCostAssignment> lm_cost_assignment;$/;"	m	class:landmarks::LandmarkCountHeuristic
lm_cost_type	search/landmarks/landmark_factory.h	/^    const OperatorCost lm_cost_type;$/;"	m	class:landmarks::LandmarkFactory
lm_cut_heuristic	search/heuristics/lm_cut_heuristic.cc	/^namespace lm_cut_heuristic {$/;"	n	file:
lm_cut_heuristic	search/heuristics/lm_cut_heuristic.h	/^namespace lm_cut_heuristic {$/;"	n
lm_cut_heuristic	search/heuristics/lm_cut_landmarks.cc	/^namespace lm_cut_heuristic {$/;"	n	file:
lm_cut_heuristic	search/heuristics/lm_cut_landmarks.h	/^namespace lm_cut_heuristic {$/;"	n
lm_cut_heuristic	search/operator_counting/lm_cut_constraints.h	/^namespace lm_cut_heuristic {$/;"	n
lm_factories	search/landmarks/landmark_factory_merged.h	/^    std::vector<LandmarkFactory *> lm_factories;$/;"	m	class:landmarks::LandmarkFactoryMerged
lm_graph	search/landmarks/landmark_cost_assignment.h	/^    const LandmarkGraph &lm_graph;$/;"	m	class:landmarks::LandmarkCostAssignment
lm_graph	search/landmarks/landmark_factory.h	/^    std::shared_ptr<LandmarkGraph> lm_graph;$/;"	m	class:landmarks::LandmarkFactory
lm_graph	search/landmarks/landmark_status_manager.h	/^    LandmarkGraph &lm_graph;$/;"	m	class:landmarks::LandmarkStatusManager
lm_graphs	search/landmarks/landmark_factory_merged.h	/^    std::vector<std::shared_ptr<LandmarkGraph>> lm_graphs;$/;"	m	class:landmarks::LandmarkFactoryMerged
lm_needed_again	search/landmarks/landmark_graph.h	/^enum landmark_status {lm_reached = 0, lm_not_reached = 1, lm_needed_again = 2};$/;"	e	enum:landmarks::EdgeType::landmark_status
lm_node_table_	search/landmarks/landmark_factory_h_m.h	/^    std::map<int, LandmarkNode *> lm_node_table_;$/;"	m	class:landmarks::LandmarkFactoryHM
lm_not_reached	search/landmarks/landmark_graph.h	/^enum landmark_status {lm_reached = 0, lm_not_reached = 1, lm_needed_again = 2};$/;"	e	enum:landmarks::EdgeType::landmark_status
lm_reached	search/landmarks/landmark_graph.h	/^enum landmark_status {lm_reached = 0, lm_not_reached = 1, lm_needed_again = 2};$/;"	e	enum:landmarks::EdgeType::landmark_status
lm_status_manager	search/landmarks/landmark_count_heuristic.h	/^    std::unique_ptr<LandmarkStatusManager> lm_status_manager;$/;"	m	class:landmarks::LandmarkCountHeuristic
load_problem	search/lp/lp_solver.cc	/^void LPSolver::load_problem(LPObjectiveSense sense,$/;"	f	class:lp::LPSolver
local_problem_index	search/heuristics/cea_heuristic.h	/^    std::vector<std::vector<LocalProblem *>> local_problem_index;$/;"	m	class:cea_heuristic::ContextEnhancedAdditiveHeuristic
local_problems	search/heuristics/cea_heuristic.h	/^    std::vector<LocalProblem *> local_problems;$/;"	m	class:cea_heuristic::ContextEnhancedAdditiveHeuristic
local_to_global_child	search/domain_transition_graph.h	/^    std::vector<int> local_to_global_child;$/;"	m	class:DomainTransitionGraph
local_var	search/domain_transition_graph.h	/^    short local_var;$/;"	m	struct:LocalAssignment
long_prune_add_automorphism	search/bliss/graph.cc	/^AbstractGraph::long_prune_add_automorphism(const unsigned int* aut)$/;"	f	class:bliss::AbstractGraph
long_prune_allocget_fixed	search/bliss/graph.cc	/^AbstractGraph::long_prune_allocget_fixed(const unsigned int index)$/;"	f	class:bliss::AbstractGraph
long_prune_allocget_mcrs	search/bliss/graph.cc	/^AbstractGraph::long_prune_allocget_mcrs(const unsigned int index)$/;"	f	class:bliss::AbstractGraph
long_prune_begin	search/bliss/graph.cc	/^  unsigned int long_prune_begin;$/;"	m	class:bliss::TreeNode	file:
long_prune_begin	search/bliss/graph.h	/^  unsigned int long_prune_begin;$/;"	m	class:bliss::AbstractGraph
long_prune_deallocate	search/bliss/graph.cc	/^AbstractGraph::long_prune_deallocate()$/;"	f	class:bliss::AbstractGraph
long_prune_end	search/bliss/graph.h	/^  unsigned int long_prune_end;$/;"	m	class:bliss::AbstractGraph
long_prune_fixed	search/bliss/graph.h	/^  std::vector<std::vector<bool> *> long_prune_fixed;$/;"	m	class:bliss::AbstractGraph
long_prune_get_fixed	search/bliss/graph.cc	/^AbstractGraph::long_prune_get_fixed(const unsigned int index)$/;"	f	class:bliss::AbstractGraph
long_prune_get_mcrs	search/bliss/graph.cc	/^AbstractGraph::long_prune_get_mcrs(const unsigned int index)$/;"	f	class:bliss::AbstractGraph
long_prune_init	search/bliss/graph.cc	/^AbstractGraph::long_prune_init()$/;"	f	class:bliss::AbstractGraph
long_prune_max_stored_autss	search/bliss/graph.h	/^  unsigned int long_prune_max_stored_autss;$/;"	m	class:bliss::AbstractGraph
long_prune_mcrs	search/bliss/graph.h	/^  std::vector<std::vector<bool> *> long_prune_mcrs;$/;"	m	class:bliss::AbstractGraph
long_prune_options_max_mem	search/bliss/graph.h	/^  static const unsigned int long_prune_options_max_mem = 50;$/;"	m	class:bliss::AbstractGraph
long_prune_options_max_stored_auts	search/bliss/graph.h	/^  static const unsigned int long_prune_options_max_stored_auts = 100;$/;"	m	class:bliss::AbstractGraph
long_prune_redundant	search/bliss/graph.cc	/^  std::set<unsigned int, std::less<unsigned int> > long_prune_redundant;$/;"	m	class:bliss::TreeNode	file:
long_prune_swap	search/bliss/graph.cc	/^AbstractGraph::long_prune_swap(const unsigned int i, const unsigned int j)$/;"	f	class:bliss::AbstractGraph
long_prune_temp	search/bliss/graph.h	/^  std::vector<bool> long_prune_temp;$/;"	m	class:bliss::AbstractGraph
long_text	search/options/doc_store.h	/^    bool long_text;$/;"	m	struct:options::NoteInfo
lookup	search/heuristics/cg_cache.h	/^    int lookup(int var, const State &state, int from_val, int to_val) const {$/;"	f	class:cg_heuristic::CGCache
lookup_helpful_transition	search/heuristics/cg_cache.h	/^    ValueTransitionLabel *lookup_helpful_transition($/;"	f	class:cg_heuristic::CGCache
lookup_in_predefinitions	search/options/token_parser.h	/^static T *lookup_in_predefinitions(OptionParser &p, bool &found) {$/;"	f	namespace:options
lookup_in_predefinitions_shared	search/options/token_parser.h	/^static std::shared_ptr<T> lookup_in_predefinitions_shared(OptionParser &p, bool &found) {$/;"	f	namespace:options
lookup_in_registry	search/options/token_parser.h	/^static T *lookup_in_registry(OptionParser &p) {$/;"	f	namespace:options
lookup_in_registry_shared	search/options/token_parser.h	/^static std::shared_ptr<T> lookup_in_registry_shared(OptionParser &p) {$/;"	f	namespace:options
lookup_state	search/state_registry.cc	/^GlobalState StateRegistry::lookup_state(StateID id) const {$/;"	f	class:StateRegistry
lookup_table	search/merge_and_shrink/merge_and_shrink_representation.h	/^    std::vector<int> lookup_table;$/;"	m	class:merge_and_shrink::MergeAndShrinkRepresentationLeaf
lookup_table	search/merge_and_shrink/merge_and_shrink_representation.h	/^    std::vector<std::vector<int>> lookup_table;$/;"	m	class:merge_and_shrink::MergeAndShrinkRepresentationMerge
lookup_value	search/cegar/transition_updater.cc	/^static int lookup_value(const vector<FactPair> &facts, int var) {$/;"	f	namespace:cegar
loop_acyclic_graph	search/landmarks/landmark_factory.cc	/^int LandmarkFactory::loop_acyclic_graph(LandmarkNode &lmn,$/;"	f	class:landmarks::LandmarkFactory
loops	search/cegar/abstract_state.h	/^    Loops loops;$/;"	m	class:cegar::AbstractState
lower_bound	search/lp/lp_solver.h	/^    double lower_bound;$/;"	m	class:lp::LPConstraint
lower_bound	search/lp/lp_solver.h	/^    double lower_bound;$/;"	m	struct:lp::LPVariable
lp	search/lp/lp_internals.cc	/^namespace lp {$/;"	n	file:
lp	search/lp/lp_internals.h	/^namespace lp {$/;"	n
lp	search/lp/lp_solver.cc	/^namespace lp {$/;"	n	file:
lp	search/lp/lp_solver.h	/^namespace lp {$/;"	n
lp	search/operator_counting/constraint_generator.h	/^namespace lp {$/;"	n
lp	search/operator_counting/state_equation_constraints.h	/^namespace lp {$/;"	n
lp_constraints	search/landmarks/landmark_cost_assignment.h	/^    std::vector<lp::LPConstraint> lp_constraints;$/;"	m	class:landmarks::LandmarkEfficientOptimalSharedCostAssignment
lp_solver	search/landmarks/landmark_cost_assignment.h	/^    lp::LPSolver lp_solver;$/;"	m	class:landmarks::LandmarkEfficientOptimalSharedCostAssignment
lp_solver	search/lp/lp_solver.h	/^    std::unique_ptr<OsiSolverInterface> lp_solver;$/;"	m	class:lp::LPSolver
lp_solver	search/operator_counting/operator_counting_heuristic.h	/^    lp::LPSolver lp_solver;$/;"	m	class:operator_counting::OperatorCountingHeuristic
lp_solver	search/potentials/potential_optimizer.h	/^    lp::LPSolver lp_solver;$/;"	m	class:potentials::PotentialOptimizer
lp_var_ids	search/potentials/potential_optimizer.h	/^    std::vector<std::vector<int>> lp_var_ids;$/;"	m	class:potentials::PotentialOptimizer
lp_variables	search/landmarks/landmark_cost_assignment.h	/^    std::vector<lp::LPVariable> lp_variables;$/;"	m	class:landmarks::LandmarkEfficientOptimalSharedCostAssignment
lr_before_merging	search/merge_and_shrink/label_reduction.h	/^    bool lr_before_merging;$/;"	m	class:merge_and_shrink::LabelReduction
lr_before_shrinking	search/merge_and_shrink/label_reduction.h	/^    bool lr_before_shrinking;$/;"	m	class:merge_and_shrink::LabelReduction
lr_method	search/merge_and_shrink/label_reduction.h	/^    LabelReductionMethod lr_method;$/;"	m	class:merge_and_shrink::LabelReduction
lr_system_order	search/merge_and_shrink/label_reduction.h	/^    LabelReductionSystemOrder lr_system_order;$/;"	m	class:merge_and_shrink::LabelReduction
m	search/heuristics/hm_heuristic.h	/^    const int m;$/;"	m	class:hm_heuristic::HMHeuristic
m_	search/landmarks/landmark_factory_h_m.h	/^    const int m_;$/;"	m	class:landmarks::LandmarkFactoryHM
mach_absolute_difference	search/utils/timer.cc	/^void mach_absolute_difference(uint64_t end, uint64_t start, struct timespec *tp) {$/;"	f	namespace:utils
main	search/planner.cc	/^int main(int argc, const char **argv) {$/;"	f
main	translate/translate.py	/^def main():$/;"	f
make_disj_node_simple	search/landmarks/landmark_graph.cc	/^LandmarkNode &LandmarkGraph::make_disj_node_simple(const FactPair &lm) {$/;"	f	class:landmarks::LandmarkGraph
make_initial_equitable_partition	search/bliss/graph.cc	/^Digraph::make_initial_equitable_partition()$/;"	f	class:bliss::Digraph
make_initial_equitable_partition	search/bliss/graph.cc	/^void Graph::make_initial_equitable_partition()$/;"	f	class:bliss::Graph
make_unique_ptr	search/utils/memory.h	/^std::unique_ptr<T> make_unique_ptr(Args && ... args) {$/;"	f	namespace:utils
map_vector	search/utils/collections.h	/^std::vector<ElemTo> map_vector(const Collection &collection, MapFunc map_func) {$/;"	f	namespace:utils
mark_as_dead_end	search/search_space.cc	/^void SearchNode::mark_as_dead_end() {$/;"	f	class:SearchNode
mark_as_relevant	search/merge_and_shrink/fts_factory.cc	/^void FTSFactory::mark_as_relevant(int var_no, int label_no) {$/;"	f	class:merge_and_shrink::FTSFactory
mark_as_stubborn	search/pruning/stubborn_sets.cc	/^bool StubbornSets::mark_as_stubborn(int op_no) {$/;"	f	class:stubborn_sets::StubbornSets
mark_as_stubborn_and_remember_written_vars	search/pruning/stubborn_sets_ec.cc	/^void StubbornSetsEC::mark_as_stubborn_and_remember_written_vars($/;"	f	class:stubborn_sets_ec::StubbornSetsEC
mark_goal_plateau	search/heuristics/lm_cut_landmarks.cc	/^void LandmarkCutLandmarks::mark_goal_plateau(RelaxedProposition *subgoal) {$/;"	f	class:lm_cut_heuristic::LandmarkCutLandmarks
mark_helpful_transitions	search/heuristics/cea_heuristic.cc	/^void ContextEnhancedAdditiveHeuristic::mark_helpful_transitions($/;"	f	class:cea_heuristic::ContextEnhancedAdditiveHeuristic
mark_helpful_transitions	search/heuristics/cg_heuristic.cc	/^void CGHeuristic::mark_helpful_transitions(const State &state,$/;"	f	class:cg_heuristic::CGHeuristic
mark_preferred_operators	search/heuristics/additive_heuristic.cc	/^void AdditiveHeuristic::mark_preferred_operators($/;"	f	class:additive_heuristic::AdditiveHeuristic
mark_preferred_operators_and_relaxed_plan	search/heuristics/ff_heuristic.cc	/^void FFHeuristic::mark_preferred_operators_and_relaxed_plan($/;"	f	class:ff_heuristic::FFHeuristic
mark_used_variables	search/pdbs/pattern_collection_generator_genetic.cc	/^bool PatternCollectionGeneratorGenetic::mark_used_variables($/;"	f	class:pdbs::PatternCollectionGeneratorGenetic
marked	search/heuristics/relaxation_heuristic.h	/^    bool marked; \/\/ used when computing preferred operators for h^add and h^FF$/;"	m	struct:relaxation_heuristic::Proposition
marked	search/landmarks/exploration.h	/^    bool marked; \/\/ used when computing preferred operators$/;"	m	struct:landmarks::ExProposition
mas_representation	search/merge_and_shrink/merge_and_shrink_heuristic.h	/^    std::unique_ptr<MergeAndShrinkRepresentation> mas_representation;$/;"	m	class:merge_and_shrink::MergeAndShrinkHeuristic
mas_representations	search/merge_and_shrink/factored_transition_system.h	/^    std::vector<std::unique_ptr<MergeAndShrinkRepresentation>> mas_representations;$/;"	m	class:merge_and_shrink::FactoredTransitionSystem
master	search/landmarks/lama_ff_synergy.cc	/^    LamaMasterHeuristic *master;$/;"	m	class:landmarks::FFSlaveHeuristic	file:
matches	translate/invariants.py	/^    def matches(self, other, own_literal, other_literal):$/;"	m	class:InvariantPart
max	search/options/bounds.h	/^    std::string max;$/;"	m	struct:options::Bounds
max_additive_subsets	search/pdbs/canonical_pdbs.h	/^    std::shared_ptr<MaxAdditivePDBSubsets> max_additive_subsets;$/;"	m	class:pdbs::CanonicalPDBs
max_additive_subsets	search/pdbs/incremental_canonical_pdbs.h	/^    std::shared_ptr<MaxAdditivePDBSubsets> max_additive_subsets;$/;"	m	class:pdbs::IncrementalCanonicalPDBs
max_additive_subsets	search/pdbs/pattern_collection_information.h	/^    std::shared_ptr<MaxAdditivePDBSubsets> max_additive_subsets;$/;"	m	class:pdbs::PatternCollectionInformation
max_cliques	search/algorithms/max_cliques.cc	/^    vector<vector<int>> &max_cliques;$/;"	m	class:max_cliques::MaxCliqueComputer	file:
max_cliques	search/algorithms/max_cliques.cc	/^namespace max_cliques {$/;"	n	file:
max_cliques	search/algorithms/max_cliques.h	/^namespace max_cliques {$/;"	n
max_depth	search/ext/tree.hh	/^int tree<T, tree_node_allocator>::max_depth() const$/;"	f	class:tree
max_depth	search/ext/tree.hh	/^int tree<T, tree_node_allocator>::max_depth(const iterator_base& pos) const$/;"	f	class:tree
max_evaluator	search/evaluators/max_evaluator.cc	/^namespace max_evaluator {$/;"	n	file:
max_evaluator	search/evaluators/max_evaluator.h	/^namespace max_evaluator {$/;"	n
max_f	search/merge_and_shrink/distances.h	/^    int max_f;$/;"	m	class:merge_and_shrink::Distances
max_g	search/merge_and_shrink/distances.h	/^    int max_g;$/;"	m	class:merge_and_shrink::Distances
max_h	search/merge_and_shrink/distances.h	/^    int max_h;$/;"	m	class:merge_and_shrink::Distances
max_heuristic	search/heuristics/max_heuristic.cc	/^namespace max_heuristic {$/;"	n	file:
max_heuristic	search/heuristics/max_heuristic.h	/^namespace max_heuristic {$/;"	n
max_ival	search/bliss/partition.h	/^    unsigned int max_ival;$/;"	m	class:bliss::Partition::Cell
max_ival_count	search/bliss/partition.h	/^    unsigned int max_ival_count;$/;"	m	class:bliss::Partition::Cell
max_level	search/bliss/graph.h	/^  unsigned long int max_level;$/;"	m	class:bliss::Stats
max_non_looping_transitions	search/cegar/abstraction.h	/^    const int max_non_looping_transitions;$/;"	m	class:cegar::Abstraction
max_non_looping_transitions	search/cegar/cost_saturation.h	/^    const int max_non_looping_transitions;$/;"	m	class:cegar::CostSaturation
max_num_heuristics	search/potentials/diverse_potential_heuristics.h	/^    const int max_num_heuristics;$/;"	m	class:potentials::DiversePotentialHeuristics
max_pattern_size	search/pdbs/pattern_collection_generator_systematic.h	/^    const size_t max_pattern_size;$/;"	m	class:pdbs::PatternCollectionGeneratorSystematic
max_potential	search/potentials/potential_optimizer.h	/^    const double max_potential;$/;"	m	class:potentials::PotentialOptimizer
max_size	search/merge_and_shrink/labels.h	/^    int max_size; \/\/ the maximum number of labels that can be created$/;"	m	class:merge_and_shrink::Labels
max_states	search/cegar/abstraction.h	/^    const int max_states;$/;"	m	class:cegar::Abstraction
max_states	search/cegar/cost_saturation.h	/^    const int max_states;$/;"	m	class:cegar::CostSaturation
max_states	search/merge_and_shrink/merge_and_shrink_heuristic.h	/^    const int max_states;$/;"	m	class:merge_and_shrink::MergeAndShrinkHeuristic
max_states	search/pdbs/pattern_collection_generator_combo.h	/^    int max_states;$/;"	m	class:pdbs::PatternCollectionGeneratorCombo
max_states	search/pdbs/pattern_generator_greedy.h	/^    int max_states;$/;"	m	class:pdbs::PatternGeneratorGreedy
max_states_before_merge	search/merge_and_shrink/merge_and_shrink_heuristic.h	/^    const int max_states_before_merge;$/;"	m	class:merge_and_shrink::MergeAndShrinkHeuristic
max_time	search/cegar/cost_saturation.h	/^    const double max_time;$/;"	m	class:cegar::CostSaturation
max_time	search/pdbs/pattern_collection_generator_hillclimbing.h	/^    const double max_time;$/;"	m	class:pdbs::PatternCollectionGeneratorHillclimbing
max_time	search/search_engine.h	/^    double max_time;$/;"	m	class:SearchEngine
max_time	search/utils/countdown_timer.h	/^    double max_time;$/;"	m	class:utils::CountdownTimer
may_keep_refining	search/cegar/abstraction.cc	/^bool Abstraction::may_keep_refining() const {$/;"	f	class:cegar::Abstraction
memory_padding_in_mb	search/cegar/cost_saturation.cc	/^static const int memory_padding_in_mb = 75;$/;"	m	namespace:cegar	file:
merge	search/ext/tree.hh	/^void tree<T, tree_node_allocator>::merge(sibling_iterator to1,   sibling_iterator to2,$/;"	f	class:tree
merge	search/merge_and_shrink/factored_transition_system.cc	/^int FactoredTransitionSystem::merge($/;"	f	class:merge_and_shrink::FactoredTransitionSystem
merge	search/merge_and_shrink/transition_system.cc	/^unique_ptr<TransitionSystem> TransitionSystem::merge($/;"	f	class:merge_and_shrink::TransitionSystem
merge_and_shrink	search/merge_and_shrink/distances.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/distances.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/factored_transition_system.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/factored_transition_system.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/fts_factory.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/fts_factory.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/label_equivalence_relation.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/label_equivalence_relation.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/label_reduction.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/label_reduction.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/labels.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/labels.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/merge_and_shrink_heuristic.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/merge_and_shrink_heuristic.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/merge_and_shrink_representation.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/merge_and_shrink_representation.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/merge_scoring_function.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/merge_scoring_function.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/merge_scoring_function_dfp.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/merge_scoring_function_dfp.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/merge_scoring_function_goal_relevance.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/merge_scoring_function_goal_relevance.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/merge_scoring_function_single_random.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/merge_scoring_function_single_random.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/merge_scoring_function_total_order.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/merge_scoring_function_total_order.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/merge_selector.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/merge_selector.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/merge_selector_score_based_filtering.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/merge_selector_score_based_filtering.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/merge_strategy.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/merge_strategy.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/merge_strategy_aliases.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/merge_strategy_factory.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/merge_strategy_factory.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/merge_strategy_factory_precomputed.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/merge_strategy_factory_precomputed.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/merge_strategy_factory_stateless.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/merge_strategy_factory_stateless.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/merge_strategy_precomputed.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/merge_strategy_precomputed.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/merge_strategy_stateless.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/merge_strategy_stateless.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/merge_tree.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/merge_tree.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/merge_tree_factory.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/merge_tree_factory.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/merge_tree_factory_linear.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/merge_tree_factory_linear.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/shrink_bisimulation.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/shrink_bisimulation.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/shrink_bucket_based.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/shrink_bucket_based.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/shrink_fh.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/shrink_fh.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/shrink_random.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/shrink_random.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/shrink_strategy.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/shrink_strategy.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/transition_system.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/transition_system.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/types.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/types.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/merge_and_shrink/utils.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_and_shrink	search/merge_and_shrink/utils.h	/^namespace merge_and_shrink {$/;"	n
merge_and_shrink	search/options/option_parser.cc	/^namespace merge_and_shrink {$/;"	n	file:
merge_candidate_order	search/merge_and_shrink/merge_scoring_function_total_order.h	/^    std::vector<std::pair<int, int>> merge_candidate_order;$/;"	m	class:merge_and_shrink::MergeScoringFunctionTotalOrder
merge_orbits	search/bliss/orbit.cc	/^void Orbit::merge_orbits(OrbitEntry *orbit1, OrbitEntry *orbit2)$/;"	f	class:bliss::Orbit
merge_orbits	search/bliss/orbit.cc	/^void Orbit::merge_orbits(unsigned int e1, unsigned int e2)$/;"	f	class:bliss::Orbit
merge_scoring_functions	search/merge_and_shrink/merge_selector_score_based_filtering.h	/^    std::vector<std::shared_ptr<MergeScoringFunction>> merge_scoring_functions;$/;"	m	class:merge_and_shrink::MergeSelectorScoreBasedFiltering
merge_selector	search/merge_and_shrink/merge_strategy_factory_stateless.h	/^    std::shared_ptr<MergeSelector> merge_selector;$/;"	m	class:merge_and_shrink::MergeStrategyFactoryStateless
merge_selector	search/merge_and_shrink/merge_strategy_stateless.h	/^    const std::shared_ptr<MergeSelector> merge_selector;$/;"	m	class:merge_and_shrink::MergeStrategyStateless
merge_strategy_factory	search/merge_and_shrink/merge_and_shrink_heuristic.h	/^    std::shared_ptr<MergeStrategyFactory> merge_strategy_factory;$/;"	m	class:merge_and_shrink::MergeAndShrinkHeuristic
merge_tree	search/merge_and_shrink/merge_strategy_precomputed.h	/^    std::unique_ptr<MergeTree> merge_tree;$/;"	m	class:merge_and_shrink::MergeStrategyPrecomputed
merge_tree_factory	search/merge_and_shrink/merge_strategy_factory_precomputed.h	/^    std::shared_ptr<MergeTreeFactory> merge_tree_factory;$/;"	m	class:merge_and_shrink::MergeStrategyFactoryPrecomputed
min	search/options/bounds.h	/^    std::string min;$/;"	m	struct:options::Bounds
min_action_cost	search/heuristics/cea_heuristic.h	/^    int min_action_cost;$/;"	m	class:cea_heuristic::ContextEnhancedAdditiveHeuristic
min_action_cost	search/heuristics/cg_heuristic.h	/^    int min_action_cost;$/;"	m	class:cg_heuristic::CGHeuristic
min_cost	search/landmarks/landmark_graph.h	/^    int min_cost; \/\/ minimal cost of achieving operators$/;"	m	class:landmarks::EdgeType::LandmarkNode
min_cost_for_landmark	search/landmarks/landmark_factory_rpg_sasp.cc	/^int LandmarkFactoryRpgSasp::min_cost_for_landmark(const TaskProxy &task_proxy,$/;"	f	class:landmarks::LandmarkFactoryRpgSasp
min_improvement	search/pdbs/pattern_collection_generator_hillclimbing.h	/^    const int min_improvement;$/;"	m	class:pdbs::PatternCollectionGeneratorHillclimbing
min_operator_cost	search/heuristics/blind_search_heuristic.h	/^    int min_operator_cost;$/;"	m	class:blind_search_heuristic::BlindSearchHeuristic
minimal_covering_renamings	translate/invariants.py	/^    def minimal_covering_renamings(self, action, add_effect, inv_vars):$/;"	m	class:Invariant
mk_acyclic_graph	search/landmarks/landmark_factory.cc	/^void LandmarkFactory::mk_acyclic_graph() {$/;"	f	class:landmarks::LandmarkFactory
model	translate/build_model.py	/^    model = compute_model(prog)$/;"	v
move_after	search/ext/tree.hh	/^template <typename iter> iter tree<T, tree_node_allocator>::move_after(iter target, iter source)$/;"	f	class:tree
move_before	search/ext/tree.hh	/^template <typename iter> iter tree<T, tree_node_allocator>::move_before(iter target, iter source)$/;"	f	class:tree
move_before	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::sibling_iterator tree<T, tree_node_allocator>::move_before(sibling_iterator target, $/;"	f	class:tree
move_existential_quantifiers	translate/normalize.py	/^def move_existential_quantifiers(task):$/;"	f
move_group_into_group	search/merge_and_shrink/label_equivalence_relation.cc	/^void LabelEquivalenceRelation::move_group_into_group($/;"	f	class:merge_and_shrink::LabelEquivalenceRelation
move_ontop	search/ext/tree.hh	/^template <typename iter> iter tree<T, tree_node_allocator>::move_ontop(iter target, iter source)$/;"	f	class:tree
msg	search/options/errors.h	/^    std::string msg;$/;"	m	struct:options::ArgError
msg	search/options/errors.h	/^    std::string msg;$/;"	m	struct:options::ParseError
multiply	search/bliss/bignum.h	/^  void multiply(const int n) {mpz_mul_si(v, v, n); }$/;"	f	class:bliss::BigNum
multiply_out	search/pdbs/pattern_database.cc	/^void PatternDatabase::multiply_out($/;"	f	class:pdbs::PatternDatabase
multiply_out	translate/translate.py	/^        def multiply_out(condition):  # destroys the input$/;"	f	function:translate_strips_conditions_aux.number_of_values
mutate	search/pdbs/pattern_collection_generator_genetic.cc	/^void PatternCollectionGeneratorGenetic::mutate() {$/;"	f	class:pdbs::PatternCollectionGeneratorGenetic
mutation_probability	search/pdbs/pattern_collection_generator_genetic.h	/^    const double mutation_probability;$/;"	m	class:pdbs::PatternCollectionGeneratorGenetic
n	search/bliss/heap.h	/^  unsigned int n;$/;"	m	class:bliss::Heap
name	search/global_operator.h	/^    std::string name;$/;"	m	class:GlobalOperator
name	search/merge_and_shrink/merge_scoring_function_dfp.cc	/^string MergeScoringFunctionDFP::name() const {$/;"	f	class:merge_and_shrink::MergeScoringFunctionDFP
name	search/merge_and_shrink/merge_scoring_function_goal_relevance.cc	/^string MergeScoringFunctionGoalRelevance::name() const {$/;"	f	class:merge_and_shrink::MergeScoringFunctionGoalRelevance
name	search/merge_and_shrink/merge_scoring_function_single_random.cc	/^string MergeScoringFunctionSingleRandom::name() const {$/;"	f	class:merge_and_shrink::MergeScoringFunctionSingleRandom
name	search/merge_and_shrink/merge_scoring_function_total_order.cc	/^string MergeScoringFunctionTotalOrder::name() const {$/;"	f	class:merge_and_shrink::MergeScoringFunctionTotalOrder
name	search/merge_and_shrink/merge_selector_score_based_filtering.cc	/^string MergeSelectorScoreBasedFiltering::name() const {$/;"	f	class:merge_and_shrink::MergeSelectorScoreBasedFiltering
name	search/merge_and_shrink/merge_strategy_factory_precomputed.cc	/^string MergeStrategyFactoryPrecomputed::name() const {$/;"	f	class:merge_and_shrink::MergeStrategyFactoryPrecomputed
name	search/merge_and_shrink/merge_strategy_factory_stateless.cc	/^string MergeStrategyFactoryStateless::name() const {$/;"	f	class:merge_and_shrink::MergeStrategyFactoryStateless
name	search/merge_and_shrink/merge_tree_factory_linear.cc	/^string MergeTreeFactoryLinear::name() const {$/;"	f	class:merge_and_shrink::MergeTreeFactoryLinear
name	search/merge_and_shrink/shrink_bisimulation.cc	/^string ShrinkBisimulation::name() const {$/;"	f	class:merge_and_shrink::ShrinkBisimulation
name	search/merge_and_shrink/shrink_fh.cc	/^string ShrinkFH::name() const {$/;"	f	class:merge_and_shrink::ShrinkFH
name	search/merge_and_shrink/shrink_random.cc	/^string ShrinkRandom::name() const {$/;"	f	class:merge_and_shrink::ShrinkRandom
name	search/options/doc_store.h	/^    std::string name;$/;"	m	struct:options::NoteInfo
name	search/options/type_namer.h	/^    static std::string name() {$/;"	f	struct:options::TypeNamer
natural	search/landmarks/landmark_graph.h	/^    natural = 2,$/;"	m	class:landmarks::EdgeType
nbf_info_by_layer	search/axioms.h	/^    std::vector<std::vector<NegationByFailureInfo>> nbf_info_by_layer;$/;"	m	class:AxiomEvaluator
necessary	search/landmarks/landmark_factory_h_m.h	/^    std::list<int> necessary; \/\/ greedy necessary landmarks, disjoint from landmarks$/;"	m	struct:landmarks::HMEntry
necessary	search/landmarks/landmark_graph.h	/^    necessary = 4,$/;"	m	class:landmarks::EdgeType
needed_cost	search/landmarks/landmark_graph.h	/^    int needed_cost;$/;"	m	class:landmarks::EdgeType::LandmarkGraph
needs_long_prune	search/bliss/graph.cc	/^  bool needs_long_prune;$/;"	m	class:bliss::TreeNode	file:
negate	translate/axiom_rules.py	/^def negate(axioms):$/;"	f
negate	translate/pddl/conditions.py	/^    def negate(self):$/;"	m	class:Atom
negate	translate/pddl/conditions.py	/^    def negate(self):$/;"	m	class:Conjunction
negate	translate/pddl/conditions.py	/^    def negate(self):$/;"	m	class:Disjunction
negate	translate/pddl/conditions.py	/^    def negate(self):$/;"	m	class:ExistentialCondition
negate	translate/pddl/conditions.py	/^    def negate(self):$/;"	m	class:Falsity
negate	translate/pddl/conditions.py	/^    def negate(self):$/;"	m	class:NegatedAtom
negate	translate/pddl/conditions.py	/^    def negate(self):$/;"	m	class:Truth
negate	translate/pddl/conditions.py	/^    def negate(self):$/;"	m	class:UniversalCondition
negate_and_translate_condition	translate/translate.py	/^def negate_and_translate_condition(condition, dictionary, ranges, mutex_dict,$/;"	f
negated	translate/pddl/conditions.py	/^    negated = False$/;"	v	class:Atom
negated	translate/pddl/conditions.py	/^    negated = True$/;"	v	class:NegatedAtom
neighbour_heap	search/bliss/graph.h	/^  Heap neighbour_heap;$/;"	m	class:bliss::AbstractGraph
nes_computed	search/pruning/stubborn_sets_ec.h	/^    std::vector<std::vector<bool>> nes_computed;$/;"	m	class:stubborn_sets_ec::StubbornSetsEC
next	search/bliss/orbit.h	/^    OrbitEntry *next;$/;"	m	class:bliss::Orbit::OrbitEntry
next	search/bliss/partition.h	/^    CRCell* next;$/;"	m	class:bliss::Partition::CRCell
next	search/bliss/partition.h	/^    Cell* next;$/;"	m	class:bliss::Partition::Cell
next	search/variable_order_finder.cc	/^int VariableOrderFinder::next() {$/;"	f	class:VariableOrderFinder
next_at_same_depth	search/ext/tree.hh	/^iter tree<T, tree_node_allocator>::next_at_same_depth(iter position) const$/;"	f	class:tree
next_cep_index	search/bliss/graph.h	/^    unsigned int next_cep_index;$/;"	m	class:bliss::AbstractGraph::CR_CEP
next_condition_by_op	search/successor_generator.h	/^    std::vector<Condition::const_iterator> next_condition_by_op;$/;"	m	class:SuccessorGenerator
next_cr_level	search/bliss/graph.h	/^    unsigned int next_cr_level;$/;"	m	class:bliss::AbstractGraph::CR_CEP
next_id	search/open_lists/epsilon_greedy_open_list.cc	/^    int next_id;$/;"	m	class:EpsilonGreedyOpenList	file:
next_nonsingleton	search/bliss/partition.h	/^    Cell* next_nonsingleton;$/;"	m	class:bliss::Partition::Cell
next_nonsingleton_first	search/bliss/partition.h	/^    int next_nonsingleton_first;$/;"	m	class:bliss::Partition::RefInfo
next_sibling	search/ext/tree.hh	/^		tree_node_<T> *prev_sibling, *next_sibling;$/;"	m	class:tree_node_
next_sibling	search/ext/tree.hh	/^iter tree<T, tree_node_allocator>::next_sibling(iter position) const$/;"	f	class:tree
next_unparsed_argument	search/options/option_parser.h	/^    ParseTree::sibling_iterator next_unparsed_argument;$/;"	m	class:options::OptionParser
next_valid_index	search/merge_and_shrink/factored_transition_system.cc	/^void FTSConstIterator::next_valid_index() {$/;"	f	class:merge_and_shrink::FTSConstIterator
next_valid_index	search/merge_and_shrink/transition_system.cc	/^void TSConstIterator::next_valid_index() {$/;"	f	class:merge_and_shrink::TSConstIterator
no_fact	search/abstract_task.cc	/^const FactPair FactPair::no_fact = FactPair(-1, -1);$/;"	m	class:FactPair	file:
no_fact	search/abstract_task.h	/^    static const FactPair no_fact;$/;"	m	struct:FactPair
no_orders	search/landmarks/landmark_factory.h	/^    const bool no_orders;$/;"	m	class:landmarks::LandmarkFactory
no_state	search/state_id.cc	/^const StateID StateID::no_state = StateID(-1);$/;"	m	class:StateID	file:
no_state	search/state_id.h	/^    static const StateID no_state;$/;"	m	class:StateID
node	search/cegar/abstract_state.h	/^    Node *node;$/;"	m	class:cegar::AbstractState
node	search/ext/tree.hh	/^				tree_node *node;$/;"	m	class:tree::iterator_base
node_queue	search/heuristics/cea_heuristic.h	/^    priority_queues::AdaptiveQueue<LocalProblemNode *> node_queue;$/;"	m	class:cea_heuristic::ContextEnhancedAdditiveHeuristic
nodes	search/domain_transition_graph.h	/^    std::vector<ValueNode> nodes;$/;"	m	class:DomainTransitionGraph
nodes	search/heuristics/cea_heuristic.cc	/^    vector<LocalProblemNode> nodes;$/;"	m	struct:cea_heuristic::LocalProblem	file:
nodes	search/landmarks/landmark_graph.h	/^    std::set<LandmarkNode *> nodes;$/;"	m	class:landmarks::EdgeType::LandmarkGraph
nof_bad_nodes	search/bliss/graph.h	/^  long unsigned int nof_bad_nodes;$/;"	m	class:bliss::Stats
nof_canupdates	search/bliss/graph.h	/^  long unsigned int nof_canupdates;$/;"	m	class:bliss::Stats
nof_discrete_cells	search/bliss/partition.h	/^  unsigned int nof_discrete_cells() const {return(discrete_cell_count); }$/;"	f	class:bliss::Partition
nof_edges	search/bliss/graph.h	/^    unsigned int nof_edges() const {return edges.size(); }$/;"	f	class:bliss::Graph::Vertex
nof_edges_in	search/bliss/graph.h	/^    unsigned int nof_edges_in() const {return edges_in.size(); }$/;"	f	class:bliss::Digraph::Vertex
nof_edges_out	search/bliss/graph.h	/^    unsigned int nof_edges_out() const {return edges_out.size(); }$/;"	f	class:bliss::Digraph::Vertex
nof_elements	search/bliss/orbit.h	/^  unsigned int nof_elements;$/;"	m	class:bliss::Orbit
nof_generators	search/bliss/graph.h	/^  long unsigned int nof_generators;$/;"	m	class:bliss::Stats
nof_leaf_nodes	search/bliss/graph.h	/^  long unsigned int nof_leaf_nodes;$/;"	m	class:bliss::Stats
nof_nodes	search/bliss/graph.h	/^  long unsigned int nof_nodes;$/;"	m	class:bliss::Stats
nof_orbits	search/bliss/orbit.h	/^  unsigned int nof_orbits() const {return _nof_orbits; }$/;"	f	class:bliss::Orbit
non_empty_lp_constraints	search/landmarks/landmark_cost_assignment.h	/^    std::vector<lp::LPConstraint> non_empty_lp_constraints;$/;"	m	class:landmarks::LandmarkEfficientOptimalSharedCostAssignment
nondominated	search/open_lists/pareto_open_list.cc	/^    KeySet nondominated;$/;"	m	class:ParetoOpenList	file:
normalize	translate/normalize.py	/^def normalize(task):$/;"	f
normalize	translate/pddl/effects.py	/^    def normalize(self):$/;"	m	class:ConditionalEffect
normalize	translate/pddl/effects.py	/^    def normalize(self):$/;"	m	class:ConjunctiveEffect
normalize	translate/pddl/effects.py	/^    def normalize(self):$/;"	m	class:CostEffect
normalize	translate/pddl/effects.py	/^    def normalize(self):$/;"	m	class:SimpleEffect
normalize	translate/pddl/effects.py	/^    def normalize(self):$/;"	m	class:UniversalEffect
normalize	translate/pddl_to_prolog.py	/^    def normalize(self):$/;"	m	class:PrologProgram
normalize_given_transitions	search/merge_and_shrink/transition_system.cc	/^static void normalize_given_transitions(vector<Transition> &transitions) {$/;"	f	namespace:merge_and_shrink
notes	search/options/doc_store.h	/^    std::vector<NoteInfo> notes;$/;"	m	struct:options::DocStruct
notify_initial_state	search/heuristic.h	/^    virtual void notify_initial_state(const GlobalState & \/*initial_state*\/) {$/;"	f	class:Heuristic
notify_initial_state	search/landmarks/landmark_count_heuristic.cc	/^void LandmarkCountHeuristic::notify_initial_state(const GlobalState &initial_state) {$/;"	f	class:landmarks::LandmarkCountHeuristic
notify_state_transition	search/heuristic.cc	/^bool Heuristic::notify_state_transition($/;"	f	class:Heuristic
notify_state_transition	search/landmarks/landmark_count_heuristic.cc	/^bool LandmarkCountHeuristic::notify_state_transition($/;"	f	class:landmarks::LandmarkCountHeuristic
nucr_find_first_component	search/bliss/graph.cc	/^Digraph::nucr_find_first_component(const unsigned int level)$/;"	f	class:bliss::Digraph
nucr_find_first_component	search/bliss/graph.cc	/^Digraph::nucr_find_first_component(const unsigned int level,$/;"	f	class:bliss::Digraph
nucr_find_first_component	search/bliss/graph.cc	/^Graph::nucr_find_first_component(const unsigned int level)$/;"	f	class:bliss::Graph
nucr_find_first_component	search/bliss/graph.cc	/^Graph::nucr_find_first_component(const unsigned int level,$/;"	f	class:bliss::Graph
null_pruning_method	search/pruning/null_pruning_method.cc	/^namespace null_pruning_method {$/;"	n	file:
null_pruning_method	search/pruning/null_pruning_method.h	/^namespace null_pruning_method {$/;"	n
numTicksPerSec	search/bliss/timer.cc	/^static const double numTicksPerSec = (double)(sysconf(_SC_CLK_TCK));$/;"	m	namespace:bliss	file:
num_abstractions	search/cegar/cost_saturation.h	/^    int num_abstractions;$/;"	m	class:cegar::CostSaturation
num_active_entries	search/merge_and_shrink/factored_transition_system.h	/^    int num_active_entries;$/;"	m	class:merge_and_shrink::FactoredTransitionSystem
num_bins	search/algorithms/int_packer.h	/^    int num_bins;$/;"	m	class:int_packer::IntPacker
num_bits	search/algorithms/dynamic_bitset.h	/^    const std::size_t num_bits;$/;"	m	class:dynamic_bitset::DynamicBitset
num_collections	search/pdbs/pattern_collection_generator_genetic.h	/^    const int num_collections;$/;"	m	class:pdbs::PatternCollectionGeneratorGenetic
num_copies	search/cegar/subtask_generators.h	/^    int num_copies;$/;"	m	class:cegar::TaskDuplicator
num_ehc_phases	search/search_engines/enforced_hill_climbing_search.h	/^    int num_ehc_phases;$/;"	m	class:enforced_hill_climbing_search::EnforcedHillClimbingSearch
num_elements	search/algorithms/equivalence_relation.h	/^    int num_elements;$/;"	m	class:equivalence_relation::EquivalenceRelation
num_entries	search/algorithms/priority_queues.h	/^    int num_entries;$/;"	m	class:priority_queues::BucketQueue
num_episodes	search/pdbs/pattern_collection_generator_genetic.h	/^    const int num_episodes;$/;"	m	class:pdbs::PatternCollectionGeneratorGenetic
num_identity_generators	search/structural_symmetries/group.cc	/^int Group::num_identity_generators;$/;"	m	class:Group	file:
num_identity_generators	search/structural_symmetries/group.h	/^    static int num_identity_generators;$/;"	m	class:Group
num_loops	search/cegar/transition_updater.h	/^    int num_loops;$/;"	m	class:cegar::TransitionUpdater
num_lp_vars	search/potentials/potential_optimizer.h	/^    int num_lp_vars;$/;"	m	class:potentials::PotentialOptimizer
num_non_looping_transitions	search/cegar/cost_saturation.h	/^    int num_non_looping_transitions;$/;"	m	class:cegar::CostSaturation
num_non_loops	search/cegar/transition_updater.h	/^    int num_non_loops;$/;"	m	class:cegar::TransitionUpdater
num_operators	search/pruning/stubborn_sets.h	/^    int num_operators;$/;"	m	class:stubborn_sets::StubbornSets
num_permanent_constraints	search/lp/lp_solver.h	/^    int num_permanent_constraints;$/;"	m	class:lp::LPSolver
num_propositions	search/heuristics/lm_cut_landmarks.h	/^    int num_propositions;$/;"	m	class:lm_cut_heuristic::LandmarkCutLandmarks
num_pruned_successors_generated	search/pruning/stubborn_sets.h	/^    long num_pruned_successors_generated;$/;"	m	class:stubborn_sets::StubbornSets
num_pushes	search/algorithms/priority_queues.h	/^    int num_pushes;$/;"	m	class:priority_queues::BucketQueue
num_rejected	search/pdbs/pattern_collection_generator_hillclimbing.h	/^    int num_rejected;$/;"	m	class:pdbs::PatternCollectionGeneratorHillclimbing
num_samples	search/pdbs/pattern_collection_generator_hillclimbing.h	/^    const int num_samples;$/;"	m	class:pdbs::PatternCollectionGeneratorHillclimbing
num_samples	search/potentials/diverse_potential_heuristics.h	/^    const int num_samples;$/;"	m	class:potentials::DiversePotentialHeuristics
num_states	search/cegar/cost_saturation.h	/^    int num_states;$/;"	m	class:cegar::CostSaturation
num_states	search/merge_and_shrink/fts_factory.cc	/^        int num_states;$/;"	m	struct:merge_and_shrink::FTSFactory::TransitionSystemData	file:
num_states	search/merge_and_shrink/transition_system.h	/^    int num_states;$/;"	m	class:merge_and_shrink::TransitionSystem
num_states	search/pdbs/pattern_database.h	/^    std::size_t num_states;$/;"	m	class:pdbs::PatternDatabase
num_unpruned_successors_generated	search/pruning/stubborn_sets.h	/^    long num_unpruned_successors_generated;$/;"	m	class:stubborn_sets::StubbornSets
num_variables	search/merge_and_shrink/fts_factory.cc	/^        int num_variables;$/;"	m	struct:merge_and_shrink::FTSFactory::TransitionSystemData	file:
num_variables	search/merge_and_shrink/transition_system.h	/^    const int num_variables;$/;"	m	class:merge_and_shrink::TransitionSystem
num_variables	search/state_registry.h	/^    const int num_variables;$/;"	m	class:StateRegistry
num_vars	search/structural_symmetries/permutation.cc	/^int Permutation::num_vars;$/;"	m	class:Permutation	file:
num_vars	search/structural_symmetries/permutation.h	/^    static int num_vars;$/;"	m	class:Permutation
number_of_children	search/ext/tree.hh	/^unsigned int tree<T, tree_node_allocator>::iterator_base::number_of_children() const$/;"	f	class:tree::iterator_base
number_of_children	search/ext/tree.hh	/^unsigned int tree<T, tree_node_allocator>::number_of_children(const iterator_base& it) $/;"	f	class:tree
number_of_conj_landmarks	search/landmarks/landmark_graph.h	/^    int number_of_conj_landmarks() const {$/;"	f	class:landmarks::EdgeType::LandmarkGraph
number_of_disj_landmarks	search/landmarks/landmark_graph.h	/^    int number_of_disj_landmarks() const {$/;"	f	class:landmarks::EdgeType::LandmarkGraph
number_of_edges	search/landmarks/landmark_graph.cc	/^int LandmarkGraph::number_of_edges() const {$/;"	f	class:landmarks::LandmarkGraph
number_of_landmarks	search/landmarks/landmark_graph.h	/^    inline int number_of_landmarks() const {$/;"	f	class:landmarks::EdgeType::LandmarkGraph
number_of_plans	search/search_engines/top_k_eager_search.h	/^    const int number_of_plans;$/;"	m	class:top_k_eager_search::TopKEagerSearch
number_of_siblings	search/ext/tree.hh	/^unsigned int tree<T, tree_node_allocator>::number_of_siblings(const iterator_base& it) const$/;"	f	class:tree
number_of_values	translate/translate.py	/^    def number_of_values(var_vals_pair):$/;"	f	function:translate_strips_conditions_aux
obedient_reasonable	search/landmarks/landmark_graph.h	/^    obedient_reasonable = 0$/;"	m	class:landmarks::EdgeType
objective	search/lp/lp_solver.h	/^    std::vector<double> objective;$/;"	m	class:lp::LPSolver
objective_coefficient	search/lp/lp_solver.h	/^    double objective_coefficient;$/;"	m	struct:lp::LPVariable
on_plan	search/tasks/plan_forbid_reformulated_task.h	/^	std::vector<bool> on_plan;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
ones	search/algorithms/dynamic_bitset.h	/^    static const Block ones;$/;"	m	class:dynamic_bitset::DynamicBitset
ones	search/algorithms/dynamic_bitset.h	/^const Block DynamicBitset<Block>::ones = Block(~Block(0));$/;"	m	class:dynamic_bitset::DynamicBitset
only_causal_landmarks	search/landmarks/landmark_factory.h	/^    const bool only_causal_landmarks;$/;"	m	class:landmarks::LandmarkFactory
only_contains_preferred_entries	search/open_lists/open_list.h	/^bool OpenList<Entry>::only_contains_preferred_entries() const {$/;"	f	class:OpenList
only_interesting_patterns	search/pdbs/pattern_collection_generator_systematic.h	/^    const bool only_interesting_patterns;$/;"	m	class:pdbs::PatternCollectionGeneratorSystematic
only_preferred	search/open_lists/open_list.h	/^    bool only_preferred;$/;"	m	class:OpenList
op_id	search/cegar/transition.h	/^    int op_id;$/;"	m	struct:cegar::Transition
op_id	search/domain_transition_graph.h	/^    int op_id;$/;"	m	struct:ValueTransitionLabel
op_index	search/search_engines/top_k_eager_search.h	/^	int op_index = -1;$/;"	m	struct:top_k_eager_search::StateActionPair
op_index	search/task_proxy.h	/^    int op_index;$/;"	m	class:EffectConditionsProxy
op_index	search/task_proxy.h	/^    int op_index;$/;"	m	class:EffectProxy
op_index	search/task_proxy.h	/^    int op_index;$/;"	m	class:EffectsProxy
op_index	search/task_proxy.h	/^    int op_index;$/;"	m	class:PreconditionsProxy
op_or_axiom_id	search/landmarks/exploration.h	/^    int op_or_axiom_id;$/;"	m	struct:landmarks::ExUnaryOperator
op_preconditions_on_var	search/pruning/stubborn_sets_ec.h	/^    std::vector<std::vector<int>> op_preconditions_on_var;$/;"	m	class:stubborn_sets_ec::StubbornSetsEC
open	search/search_space.cc	/^void SearchNode::open(const SearchNode &parent_node,$/;"	f	class:SearchNode
open	translate/pddl_parser/pddl_file.py	/^def open(domain_filename=None, task_filename=None):$/;"	f
open_initial	search/search_space.cc	/^void SearchNode::open_initial() {$/;"	f	class:SearchNode
open_landmarks	search/landmarks/landmark_factory_rpg_sasp.h	/^    std::list<LandmarkNode *> open_landmarks;$/;"	m	class:landmarks::LandmarkFactoryRpgSasp
open_list	search/search_engines/eager_search.h	/^    std::unique_ptr<StateOpenList> open_list;$/;"	m	class:eager_search::EagerSearch
open_list	search/search_engines/enforced_hill_climbing_search.h	/^    std::unique_ptr<EdgeOpenList> open_list;$/;"	m	class:enforced_hill_climbing_search::EnforcedHillClimbingSearch
open_list	search/search_engines/lazy_search.h	/^    std::unique_ptr<EdgeOpenList> open_list;$/;"	m	class:lazy_search::LazySearch
open_list	search/search_engines/top_k_eager_search.h	/^    std::unique_ptr<StateOpenList> open_list;$/;"	m	class:top_k_eager_search::TopKEagerSearch
open_lists	search/open_lists/alternation_open_list.cc	/^    vector<unique_ptr<OpenList<Entry>>> open_lists;$/;"	m	class:AlternationOpenList	file:
open_queue	search/cegar/abstract_search.h	/^    priority_queues::AdaptiveQueue<AbstractState *> open_queue;$/;"	m	class:cegar::AbstractSearch
operator !=	search/abstract_task.h	/^    bool operator!=(const FactPair &other) const {$/;"	f	struct:FactPair
operator !=	search/ext/tree.hh	/^bool tree<T, tree_node_allocator>::breadth_first_queued_iterator::operator!=(const breadth_first_queued_iterator& other) const$/;"	f	class:tree::breadth_first_queued_iterator
operator !=	search/ext/tree.hh	/^bool tree<T, tree_node_allocator>::fixed_depth_iterator::operator!=(const fixed_depth_iterator& other) const$/;"	f	class:tree::fixed_depth_iterator
operator !=	search/ext/tree.hh	/^bool tree<T, tree_node_allocator>::leaf_iterator::operator!=(const leaf_iterator& other) const$/;"	f	class:tree::leaf_iterator
operator !=	search/ext/tree.hh	/^bool tree<T, tree_node_allocator>::post_order_iterator::operator!=(const post_order_iterator& other) const$/;"	f	class:tree::post_order_iterator
operator !=	search/ext/tree.hh	/^bool tree<T, tree_node_allocator>::pre_order_iterator::operator!=(const pre_order_iterator& other) const$/;"	f	class:tree::pre_order_iterator
operator !=	search/ext/tree.hh	/^bool tree<T, tree_node_allocator>::sibling_iterator::operator!=(const sibling_iterator& other) const$/;"	f	class:tree::sibling_iterator
operator !=	search/global_operator.h	/^    bool operator!=(const GlobalCondition &other) const {$/;"	f	struct:GlobalCondition
operator !=	search/merge_and_shrink/factored_transition_system.h	/^    bool operator!=(const FTSConstIterator &rhs) const {$/;"	f	class:merge_and_shrink::FTSConstIterator
operator !=	search/merge_and_shrink/transition_system.h	/^    bool operator!=(const TSConstIterator &rhs) const {$/;"	f	class:merge_and_shrink::TSConstIterator
operator !=	search/per_state_information.h	/^        bool operator!=(const const_iterator &rhs) {$/;"	f	class:PerStateInformation::const_iterator
operator !=	search/state_id.h	/^    bool operator!=(const StateID &other) const {$/;"	f	class:StateID
operator !=	search/task_proxy.h	/^    bool operator!=(const FactProxy &other) const {$/;"	f	class:FactProxy
operator !=	search/task_proxy.h	/^    bool operator!=(const FactsProxyIterator &other) const {$/;"	f	class:FactsProxyIterator
operator !=	search/task_proxy.h	/^    bool operator!=(const OperatorProxy &other) const {$/;"	f	class:OperatorProxy
operator !=	search/task_proxy.h	/^    bool operator!=(const ProxyIterator &other) const {$/;"	f	class:ProxyIterator
operator !=	search/task_proxy.h	/^    bool operator!=(const State &other) const {$/;"	f	class:State
operator !=	search/task_proxy.h	/^    bool operator!=(const VariableProxy &other) const {$/;"	f	class:VariableProxy
operator ()	search/abstract_task.h	/^    size_t operator()(const FactPair &fact) const {$/;"	f	struct:std::hash
operator ()	search/algorithms/priority_queues.h	/^        bool operator()(const Entry &lhs, const Entry &rhs) const {$/;"	f	struct:priority_queues::HeapQueue::compare_func
operator ()	search/cegar/subtask_generators.cc	/^    bool operator()(const FactPair &a, const FactPair &b) {$/;"	f	class:cegar::SortFactsByIncreasingHaddValues
operator ()	search/cegar/utils.h	/^    size_t operator()(const FactProxy &fact) const {$/;"	f	struct:std::hash
operator ()	search/ext/tree.hh	/^				bool operator()(const tree_node *a, const tree_node *b) $/;"	f	class:tree::compare_nodes
operator ()	search/ext/tree.hh	/^				bool operator()(const typename tree<T, tree_node_allocator>::iterator_base& one,$/;"	f	class:tree::iterator_base_less
operator ()	search/landmarks/landmark_factory_h_m.h	/^    bool operator()(const FluentSet &fs1, const FluentSet &fs2) const {$/;"	f	struct:landmarks::FluentSetComparer
operator ()	search/landmarks/landmark_graph.h	/^    bool operator()(LandmarkNode *a, LandmarkNode *b) const {$/;"	f	struct:landmarks::EdgeType::LandmarkNodeComparer
operator ()	search/state_id.h	/^    size_t operator()(StateID id) const {$/;"	f	struct:std::hash
operator ()	search/state_registry.h	/^        bool operator()(StateID lhs, StateID rhs) const {$/;"	f	struct:StateRegistry::StateIDSemanticEqual
operator ()	search/state_registry.h	/^        size_t operator()(StateID id) const {$/;"	f	struct:StateRegistry::StateIDSemanticHash
operator ()	search/task_proxy.h	/^    size_t operator()(const State &state) const {$/;"	f	struct:std::hash
operator ()	search/utils/hash.h	/^    size_t operator()(const std::pair<TA, TB> &pair) const {$/;"	f	struct:std::hash
operator ()	search/utils/hash.h	/^    size_t operator()(const std::vector<T> &vec) const {$/;"	f	struct:std::hash
operator ()	search/utils/rng.h	/^    double operator()() {$/;"	f	class:utils::RandomNumberGenerator
operator ()	search/utils/rng.h	/^    int operator()(int bound) {$/;"	f	class:utils::RandomNumberGenerator
operator ()	search/utils/timer.cc	/^double Timer::operator()() const {$/;"	f	class:utils::Timer
operator *	search/ext/tree.hh	/^T& tree<T, tree_node_allocator>::iterator_base::operator*() const$/;"	f	class:tree::iterator_base
operator *	search/merge_and_shrink/factored_transition_system.h	/^    int operator*() const {$/;"	f	class:merge_and_shrink::FTSConstIterator
operator *	search/merge_and_shrink/transition_system.cc	/^GroupAndTransitions TSConstIterator::operator*() const {$/;"	f	class:merge_and_shrink::TSConstIterator
operator *	search/per_state_information.h	/^        StateID operator*() {$/;"	f	class:PerStateInformation::const_iterator
operator *	search/task_proxy.h	/^    FactProxy operator*() const {$/;"	f	class:FactsProxyIterator
operator *	search/task_proxy.h	/^    reference operator*() const {$/;"	f	class:ProxyIterator
operator ++	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::breadth_first_queued_iterator tree<T, tree_node_allocator>::breadth_first_queued_iterator::operator++(int)$/;"	f	class:tree::breadth_first_queued_iterator
operator ++	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::breadth_first_queued_iterator& tree<T, tree_node_allocator>::breadth_first_queued_iterator::operator++()$/;"	f	class:tree::breadth_first_queued_iterator
operator ++	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::fixed_depth_iterator tree<T, tree_node_allocator>::fixed_depth_iterator::operator++(int)$/;"	f	class:tree::fixed_depth_iterator
operator ++	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::fixed_depth_iterator& tree<T, tree_node_allocator>::fixed_depth_iterator::operator++()$/;"	f	class:tree::fixed_depth_iterator
operator ++	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::leaf_iterator tree<T, tree_node_allocator>::leaf_iterator::operator++(int)$/;"	f	class:tree::leaf_iterator
operator ++	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::leaf_iterator& tree<T, tree_node_allocator>::leaf_iterator::operator++()$/;"	f	class:tree::leaf_iterator
operator ++	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::post_order_iterator tree<T, tree_node_allocator>::post_order_iterator::operator++(int)$/;"	f	class:tree::post_order_iterator
operator ++	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::post_order_iterator& tree<T, tree_node_allocator>::post_order_iterator::operator++()$/;"	f	class:tree::post_order_iterator
operator ++	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::pre_order_iterator tree<T, tree_node_allocator>::pre_order_iterator::operator++(int)$/;"	f	class:tree::pre_order_iterator
operator ++	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::pre_order_iterator& tree<T, tree_node_allocator>::pre_order_iterator::operator++()$/;"	f	class:tree::pre_order_iterator
operator ++	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::sibling_iterator tree<T, tree_node_allocator>::sibling_iterator::operator++(int)$/;"	f	class:tree::sibling_iterator
operator ++	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::sibling_iterator& tree<T, tree_node_allocator>::sibling_iterator::operator++()$/;"	f	class:tree::sibling_iterator
operator ++	search/merge_and_shrink/factored_transition_system.cc	/^void FTSConstIterator::operator++() {$/;"	f	class:merge_and_shrink::FTSConstIterator
operator ++	search/merge_and_shrink/transition_system.cc	/^void TSConstIterator::operator++() {$/;"	f	class:merge_and_shrink::TSConstIterator
operator ++	search/per_state_information.h	/^        const_iterator &operator++() {$/;"	f	class:PerStateInformation::const_iterator
operator ++	search/per_state_information.h	/^        const_iterator operator++(int) {$/;"	f	class:PerStateInformation::const_iterator
operator ++	search/task_proxy.h	/^    FactsProxyIterator &operator++() {$/;"	f	class:FactsProxyIterator
operator ++	search/task_proxy.h	/^    ProxyIterator &operator++() {$/;"	f	class:ProxyIterator
operator ++	search/task_proxy.h	/^    value_type operator++(int) {$/;"	f	class:ProxyIterator
operator +=	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::breadth_first_queued_iterator& tree<T, tree_node_allocator>::breadth_first_queued_iterator::operator+=(unsigned int num)$/;"	f	class:tree::breadth_first_queued_iterator
operator +=	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::fixed_depth_iterator& tree<T, tree_node_allocator>::fixed_depth_iterator::operator+=(unsigned int num)$/;"	f	class:tree::fixed_depth_iterator
operator +=	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::leaf_iterator& tree<T, tree_node_allocator>::leaf_iterator::operator+=(unsigned int num)$/;"	f	class:tree::leaf_iterator
operator +=	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::post_order_iterator& tree<T, tree_node_allocator>::post_order_iterator::operator+=(unsigned int num)$/;"	f	class:tree::post_order_iterator
operator +=	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::pre_order_iterator& tree<T, tree_node_allocator>::pre_order_iterator::operator+=(unsigned int num)$/;"	f	class:tree::pre_order_iterator
operator +=	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::sibling_iterator& tree<T, tree_node_allocator>::sibling_iterator::operator+=(unsigned int num)$/;"	f	class:tree::sibling_iterator
operator --	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::fixed_depth_iterator tree<T, tree_node_allocator>::fixed_depth_iterator::operator--(int)$/;"	f	class:tree::fixed_depth_iterator
operator --	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::fixed_depth_iterator& tree<T, tree_node_allocator>::fixed_depth_iterator::operator--()$/;"	f	class:tree::fixed_depth_iterator
operator --	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::leaf_iterator tree<T, tree_node_allocator>::leaf_iterator::operator--(int)$/;"	f	class:tree::leaf_iterator
operator --	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::leaf_iterator& tree<T, tree_node_allocator>::leaf_iterator::operator--()$/;"	f	class:tree::leaf_iterator
operator --	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::post_order_iterator tree<T, tree_node_allocator>::post_order_iterator::operator--(int)$/;"	f	class:tree::post_order_iterator
operator --	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::post_order_iterator& tree<T, tree_node_allocator>::post_order_iterator::operator--()$/;"	f	class:tree::post_order_iterator
operator --	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::pre_order_iterator tree<T, tree_node_allocator>::pre_order_iterator::operator--(int)$/;"	f	class:tree::pre_order_iterator
operator --	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::pre_order_iterator& tree<T, tree_node_allocator>::pre_order_iterator::operator--()$/;"	f	class:tree::pre_order_iterator
operator --	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::sibling_iterator tree<T, tree_node_allocator>::sibling_iterator::operator--(int)$/;"	f	class:tree::sibling_iterator
operator --	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::sibling_iterator& tree<T, tree_node_allocator>::sibling_iterator::operator--()$/;"	f	class:tree::sibling_iterator
operator -=	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::fixed_depth_iterator& tree<T, tree_node_allocator>::fixed_depth_iterator::operator-=(unsigned int num)$/;"	f	class:tree::fixed_depth_iterator
operator -=	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::leaf_iterator& tree<T, tree_node_allocator>::leaf_iterator::operator-=(unsigned int num)$/;"	f	class:tree::leaf_iterator
operator -=	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::post_order_iterator& tree<T, tree_node_allocator>::post_order_iterator::operator-=(unsigned int num)$/;"	f	class:tree::post_order_iterator
operator -=	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::pre_order_iterator& tree<T, tree_node_allocator>::pre_order_iterator::operator-=(unsigned int num)$/;"	f	class:tree::pre_order_iterator
operator -=	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::sibling_iterator& tree<T, tree_node_allocator>::sibling_iterator::operator-=(unsigned int num)$/;"	f	class:tree::sibling_iterator
operator ->	search/ext/tree.hh	/^T* tree<T, tree_node_allocator>::iterator_base::operator->() const$/;"	f	class:tree::iterator_base
operator ->	search/per_state_information.h	/^        StateID *operator->() {$/;"	f	class:PerStateInformation::const_iterator
operator <	search/abstract_task.h	/^    bool operator<(const FactPair &other) const {$/;"	f	struct:FactPair
operator <	search/landmarks/exploration.h	/^    bool operator<(const ExProposition &other) const {$/;"	f	struct:landmarks::ExProposition
operator <	search/landmarks/exploration.h	/^    bool operator<(const ExUnaryOperator &other) const {$/;"	f	struct:landmarks::ExUnaryOperator
operator <	search/merge_and_shrink/shrink_bisimulation.cc	/^    bool operator<(const Signature &other) const {$/;"	f	struct:merge_and_shrink::Signature
operator <	search/merge_and_shrink/transition_system.h	/^    bool operator<(const Transition &other) const {$/;"	f	struct:merge_and_shrink::Transition
operator <	search/search_engines/top_k_eager_search.h	/^	bool operator<(const StateActionPair &other) const {            $/;"	f	struct:top_k_eager_search::StateActionPair
operator <<	search/abstract_task.cc	/^ostream &operator<<(ostream &os, const FactPair &fact_pair) {$/;"	f
operator <<	search/abstract_task.cc	/^ostream &operator<<(ostream &os, const GlobalCondition &cond) {$/;"	f
operator <<	search/cegar/abstract_state.h	/^    friend std::ostream &operator<<(std::ostream &os, const AbstractState &state) {$/;"	f	class:cegar::AbstractState
operator <<	search/cegar/domains.cc	/^ostream &operator<<(ostream &os, const Domains &domains) {$/;"	f	namespace:cegar
operator <<	search/merge_and_shrink/transition_system.cc	/^ostream &operator<<(ostream &os, const Transition &trans) {$/;"	f	namespace:merge_and_shrink
operator <<	search/options/bounds.cc	/^ostream &operator<<(ostream &out, const Bounds &bounds) {$/;"	f	namespace:options
operator <<	search/options/errors.h	/^    friend std::ostream &operator<<(std::ostream &out, const ArgError &err) {$/;"	f	struct:options::ArgError
operator <<	search/options/errors.h	/^    friend std::ostream &operator<<(std::ostream &out, const ParseError &pe) {$/;"	f	struct:options::ParseError
operator <<	search/options/parse_tree.h	/^    friend std::ostream &operator<<(std::ostream &out, const ParseNode &pn) {$/;"	f	struct:options::ParseNode
operator <<	search/state_id.cc	/^ostream &operator<<(ostream &os, StateID id) {$/;"	f
operator <<	search/utils/countdown_timer.cc	/^ostream &operator<<(ostream &os, const CountdownTimer &cd_timer) {$/;"	f	namespace:utils
operator <<	search/utils/logging.h	/^    std::ostream &operator<<(const T &elem) {$/;"	f	struct:utils::Log
operator <<	search/utils/logging.h	/^ostream &operator<<(ostream &stream, const vector<T> &vec) {$/;"	f	namespace:std
operator <<	search/utils/timer.cc	/^ostream &operator<<(ostream &os, const Timer &timer) {$/;"	f	namespace:utils
operator =	search/bliss/uintseqhash.h	/^  UintSeqHash& operator=(const UintSeqHash &other) {h = other.h; return *this; }$/;"	f	class:bliss::UintSeqHash
operator =	search/ext/tree.hh	/^void tree<T, tree_node_allocator>::operator=(const tree<T, tree_node_allocator>& other)$/;"	f	class:tree
operator =	search/options/any.h	/^    Any &operator=(const Any &rhs) {$/;"	f	class:options::Any
operator =	search/options/any.h	/^    Any &operator=(const ValueType &rhs) {$/;"	f	class:options::Any
operator =	search/task_proxy.h	/^    State &operator=(const State &&other) {$/;"	f	class:State
operator ==	search/abstract_task.h	/^    bool operator==(const FactPair &other) const {$/;"	f	struct:FactPair
operator ==	search/cegar/transition.h	/^    bool operator==(const Transition &other) {$/;"	f	struct:cegar::Transition
operator ==	search/ext/tree.hh	/^bool tree<T, tree_node_allocator>::breadth_first_queued_iterator::operator==(const breadth_first_queued_iterator& other) const$/;"	f	class:tree::breadth_first_queued_iterator
operator ==	search/ext/tree.hh	/^bool tree<T, tree_node_allocator>::fixed_depth_iterator::operator==(const fixed_depth_iterator& other) const$/;"	f	class:tree::fixed_depth_iterator
operator ==	search/ext/tree.hh	/^bool tree<T, tree_node_allocator>::leaf_iterator::operator==(const leaf_iterator& other) const$/;"	f	class:tree::leaf_iterator
operator ==	search/ext/tree.hh	/^bool tree<T, tree_node_allocator>::post_order_iterator::operator==(const post_order_iterator& other) const$/;"	f	class:tree::post_order_iterator
operator ==	search/ext/tree.hh	/^bool tree<T, tree_node_allocator>::pre_order_iterator::operator==(const pre_order_iterator& other) const$/;"	f	class:tree::pre_order_iterator
operator ==	search/ext/tree.hh	/^bool tree<T, tree_node_allocator>::sibling_iterator::operator==(const sibling_iterator& other) const$/;"	f	class:tree::sibling_iterator
operator ==	search/global_operator.h	/^    bool operator==(const GlobalCondition &other) const {$/;"	f	struct:GlobalCondition
operator ==	search/merge_and_shrink/factored_transition_system.h	/^    bool operator==(const FTSConstIterator &rhs) const {$/;"	f	class:merge_and_shrink::FTSConstIterator
operator ==	search/merge_and_shrink/transition_system.h	/^    bool operator==(const TSConstIterator &rhs) const {$/;"	f	class:merge_and_shrink::TSConstIterator
operator ==	search/merge_and_shrink/transition_system.h	/^    bool operator==(const Transition &other) const {$/;"	f	struct:merge_and_shrink::Transition
operator ==	search/per_state_information.h	/^        bool operator==(const const_iterator &rhs) {$/;"	f	class:PerStateInformation::const_iterator
operator ==	search/state_id.h	/^    bool operator==(const StateID &other) const {$/;"	f	class:StateID
operator ==	search/task_proxy.h	/^    bool operator==(const FactProxy &other) const {$/;"	f	class:FactProxy
operator ==	search/task_proxy.h	/^    bool operator==(const FactsProxyIterator &other) const {$/;"	f	class:FactsProxyIterator
operator ==	search/task_proxy.h	/^    bool operator==(const OperatorProxy &other) const {$/;"	f	class:OperatorProxy
operator ==	search/task_proxy.h	/^    bool operator==(const ProxyIterator &other) const {$/;"	f	class:ProxyIterator
operator ==	search/task_proxy.h	/^    bool operator==(const State &other) const {$/;"	f	class:State
operator ==	search/task_proxy.h	/^    bool operator==(const VariableProxy &other) const {$/;"	f	class:VariableProxy
operator >	search/open_lists/epsilon_greedy_open_list.cc	/^        bool operator>(const HeapNode &other) const {$/;"	f	struct:EpsilonGreedyOpenList::HeapNode
operator >=	search/merge_and_shrink/transition_system.h	/^    bool operator>=(const Transition &other) const {$/;"	f	struct:merge_and_shrink::Transition
operator []	search/algorithms/dynamic_bitset.h	/^    bool operator[](std::size_t pos) const {$/;"	f	class:dynamic_bitset::DynamicBitset
operator []	search/algorithms/ordered_set.h	/^    const T &operator[](int pos) const {$/;"	f	class:ordered_set::OrderedSet
operator []	search/algorithms/segmented_vector.h	/^    Element *operator[](size_t index) {$/;"	f	class:segmented_vector::SegmentedArrayVector
operator []	search/algorithms/segmented_vector.h	/^    Entry &operator[](size_t index) {$/;"	f	class:segmented_vector::SegmentedVector
operator []	search/algorithms/segmented_vector.h	/^    const Element *operator[](size_t index) const {$/;"	f	class:segmented_vector::SegmentedArrayVector
operator []	search/algorithms/segmented_vector.h	/^    const Entry &operator[](size_t index) const {$/;"	f	class:segmented_vector::SegmentedVector
operator []	search/global_state.cc	/^int GlobalState::operator[](int var) const {$/;"	f	class:GlobalState
operator []	search/heuristic_cache.cc	/^EvaluationResult &HeuristicCache::operator[](ScalarEvaluator *heur) {$/;"	f	class:HeuristicCache
operator []	search/per_state_information.h	/^    Entry &operator[](const GlobalState &state) {$/;"	f	class:PerStateInformation
operator []	search/per_state_information.h	/^    const Entry &operator[](const GlobalState &state) const {$/;"	f	class:PerStateInformation
operator []	search/task_proxy.h	/^    EffectProxy operator[](std::size_t eff_index) const {$/;"	f	class:EffectsProxy
operator []	search/task_proxy.h	/^    FactProxy operator[](VariableProxy var) const {$/;"	f	class:State
operator []	search/task_proxy.h	/^    FactProxy operator[](std::size_t var_id) const {$/;"	f	class:State
operator []	search/task_proxy.h	/^    OperatorProxy operator[](std::size_t index) const {$/;"	f	class:AxiomsProxy
operator []	search/task_proxy.h	/^    OperatorProxy operator[](std::size_t index) const {$/;"	f	class:OperatorsProxy
operator []	search/task_proxy.h	/^    VariableProxy operator[](std::size_t index) const {$/;"	f	class:VariablesProxy
operator_achieves_fact	search/cegar/utils.cc	/^static bool operator_achieves_fact($/;"	f	namespace:cegar
operator_applicable	search/cegar/utils.cc	/^static bool operator_applicable($/;"	f	namespace:cegar
operator_applicable	search/landmarks/landmark_factory_zhu_givan.cc	/^bool LandmarkFactoryZhuGivan::operator_applicable(const OperatorProxy &op,$/;"	f	class:landmarks::LandmarkFactoryZhuGivan
operator_cond_effect_fires	search/landmarks/landmark_factory_zhu_givan.cc	/^bool LandmarkFactoryZhuGivan::operator_cond_effect_fires($/;"	f	class:landmarks::LandmarkFactoryZhuGivan
operator_costs	search/cegar/abstract_search.h	/^    const std::vector<int> operator_costs;$/;"	m	class:cegar::AbstractSearch
operator_costs	search/landmarks/landmark_cost_assignment.h	/^    const std::vector<int> operator_costs;$/;"	m	class:landmarks::LandmarkCostAssignment
operator_costs	search/tasks/modified_operator_costs_task.h	/^    const std::vector<int> operator_costs;$/;"	m	class:extra_tasks::ModifiedOperatorCostsTask
operator_counting	search/operator_counting/constraint_generator.cc	/^namespace operator_counting {$/;"	n	file:
operator_counting	search/operator_counting/constraint_generator.h	/^namespace operator_counting {$/;"	n
operator_counting	search/operator_counting/lm_cut_constraints.cc	/^namespace operator_counting {$/;"	n	file:
operator_counting	search/operator_counting/lm_cut_constraints.h	/^namespace operator_counting {$/;"	n
operator_counting	search/operator_counting/operator_counting_heuristic.cc	/^namespace operator_counting {$/;"	n	file:
operator_counting	search/operator_counting/operator_counting_heuristic.h	/^namespace operator_counting {$/;"	n
operator_counting	search/operator_counting/pho_constraints.cc	/^namespace operator_counting {$/;"	n	file:
operator_counting	search/operator_counting/pho_constraints.h	/^namespace operator_counting {$/;"	n
operator_counting	search/operator_counting/state_equation_constraints.cc	/^namespace operator_counting {$/;"	n	file:
operator_counting	search/operator_counting/state_equation_constraints.h	/^namespace operator_counting {$/;"	n
operator_counting	search/options/option_parser.cc	/^namespace operator_counting {$/;"	n	file:
operator_generators	search/structural_symmetries/group.h	/^    std::vector<const OperatorPermutation *> operator_generators;$/;"	m	class:Group
operator_no	search/heuristics/relaxation_heuristic.h	/^    int operator_no; \/\/ -1 for axioms; index into g_operators otherwise$/;"	m	struct:relaxation_heuristic::UnaryOperator
operator_too_heavy	translate/invariants.py	/^    def operator_too_heavy(self, h_action):$/;"	m	class:Invariant
operator_unbalanced	translate/invariants.py	/^    def operator_unbalanced(self, action, enqueue_func):$/;"	m	class:Invariant
operators_eff_lookup	search/landmarks/landmark_graph.h	/^    std::vector<std::vector<std::vector<int>>> operators_eff_lookup;$/;"	m	class:landmarks::EdgeType::LandmarkGraph
operators_on_plan	search/tasks/plan_forbid_reformulated_task.h	/^	int operators_on_plan;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
operators_without_preconditions	search/landmarks/landmark_factory_zhu_givan.h	/^    std::vector<int> operators_without_preconditions;$/;"	m	class:landmarks::LandmarkFactoryZhuGivan
ops_affected	search/structural_symmetries/operator_permutation.h	/^    std::vector<int> ops_affected;$/;"	m	class:OperatorPermutation
opt_use_comprec	search/bliss/graph.h	/^  bool opt_use_comprec;$/;"	m	class:bliss::AbstractGraph
opt_use_failure_recording	search/bliss/graph.h	/^  bool opt_use_failure_recording;$/;"	m	class:bliss::AbstractGraph
opt_use_long_prune	search/bliss/graph.h	/^  bool opt_use_long_prune;$/;"	m	class:bliss::AbstractGraph
optimal_solution_cost	search/search_engines/kstar.h	/^	int optimal_solution_cost;$/;"	m	class:kstar::KStar
optimize_for_all_states	search/potentials/potential_optimizer.cc	/^void PotentialOptimizer::optimize_for_all_states() {$/;"	f	class:potentials::PotentialOptimizer
optimize_for_samples	search/potentials/potential_optimizer.cc	/^void PotentialOptimizer::optimize_for_samples(const vector<State> &samples) {$/;"	f	class:potentials::PotentialOptimizer
optimize_for_samples	search/potentials/sample_based_potential_heuristics.cc	/^static void optimize_for_samples($/;"	f	namespace:potentials
optimize_for_state	search/potentials/potential_optimizer.cc	/^void PotentialOptimizer::optimize_for_state(const State &state) {$/;"	f	class:potentials::PotentialOptimizer
optimizer	search/potentials/diverse_potential_heuristics.h	/^    PotentialOptimizer optimizer;$/;"	m	class:potentials::DiversePotentialHeuristics
options	search/abstract_task.h	/^namespace options {$/;"	n
options	search/cegar/subtask_generators.h	/^namespace options {$/;"	n
options	search/evaluators/max_evaluator.h	/^namespace options {$/;"	n
options	search/evaluators/sum_evaluator.h	/^namespace options {$/;"	n
options	search/evaluators/weighted_evaluator.h	/^namespace options {$/;"	n
options	search/heuristic.h	/^namespace options {$/;"	n
options	search/heuristics/hm_heuristic.h	/^namespace options {$/;"	n
options	search/heuristics/lm_cut_heuristic.h	/^namespace options {$/;"	n
options	search/landmarks/landmark_factory.h	/^namespace options {$/;"	n
options	search/lp/lp_solver.h	/^namespace options {$/;"	n
options	search/merge_and_shrink/label_reduction.h	/^namespace options {$/;"	n
options	search/merge_and_shrink/merge_scoring_function_single_random.h	/^namespace options {$/;"	n
options	search/merge_and_shrink/merge_scoring_function_total_order.h	/^namespace options {$/;"	n
options	search/merge_and_shrink/merge_selector_score_based_filtering.h	/^namespace options {$/;"	n
options	search/merge_and_shrink/merge_strategy_factory_precomputed.h	/^namespace options {$/;"	n
options	search/merge_and_shrink/merge_strategy_factory_stateless.h	/^namespace options {$/;"	n
options	search/merge_and_shrink/merge_tree_factory.h	/^namespace options {$/;"	n
options	search/merge_and_shrink/shrink_bisimulation.h	/^namespace options {$/;"	n
options	search/merge_and_shrink/shrink_bucket_based.h	/^namespace options {$/;"	n
options	search/merge_and_shrink/shrink_fh.h	/^namespace options {$/;"	n
options	search/merge_and_shrink/shrink_random.h	/^namespace options {$/;"	n
options	search/open_lists/alternation_open_list.h	/^    Options options;$/;"	m	class:AlternationOpenListFactory
options	search/open_lists/epsilon_greedy_open_list.h	/^    Options options;$/;"	m	class:EpsilonGreedyOpenListFactory
options	search/open_lists/pareto_open_list.h	/^    Options options;$/;"	m	class:ParetoOpenListFactory
options	search/open_lists/standard_scalar_open_list.h	/^    Options options;$/;"	m	class:StandardScalarOpenListFactory
options	search/open_lists/tiebreaking_open_list.h	/^    Options options;$/;"	m	class:TieBreakingOpenListFactory
options	search/open_lists/type_based_open_list.h	/^    Options options;$/;"	m	class:TypeBasedOpenListFactory
options	search/operator_cost.h	/^namespace options {$/;"	n
options	search/operator_counting/operator_counting_heuristic.h	/^namespace options {$/;"	n
options	search/operator_counting/pho_constraints.h	/^namespace options {$/;"	n
options	search/options/any.h	/^namespace options {$/;"	n
options	search/options/bounds.cc	/^namespace options {$/;"	n	file:
options	search/options/bounds.h	/^namespace options {$/;"	n
options	search/options/doc_printer.cc	/^namespace options {$/;"	n	file:
options	search/options/doc_printer.h	/^namespace options {$/;"	n
options	search/options/doc_store.cc	/^namespace options {$/;"	n	file:
options	search/options/doc_store.h	/^namespace options {$/;"	n
options	search/options/errors.cc	/^namespace options {$/;"	n	file:
options	search/options/errors.h	/^namespace options {$/;"	n
options	search/options/option_parser.cc	/^namespace options {$/;"	n	file:
options	search/options/option_parser.h	/^namespace options {$/;"	n
options	search/options/options.h	/^namespace options {$/;"	n
options	search/options/parse_tree.h	/^namespace options {$/;"	n
options	search/options/plugin.cc	/^namespace options {$/;"	n	file:
options	search/options/plugin.h	/^namespace options {$/;"	n
options	search/options/predefinitions.h	/^namespace options {$/;"	n
options	search/options/registries.cc	/^namespace options {$/;"	n	file:
options	search/options/registries.h	/^namespace options {$/;"	n
options	search/options/synergy.h	/^namespace options {$/;"	n
options	search/options/token_parser.h	/^namespace options {$/;"	n
options	search/options/type_documenter.h	/^namespace options {$/;"	n
options	search/options/type_namer.h	/^namespace options {$/;"	n
options	search/pdbs/pattern_collection_generator_genetic.h	/^namespace options {$/;"	n
options	search/pdbs/pattern_collection_generator_hillclimbing.h	/^namespace options {$/;"	n
options	search/pdbs/pattern_collection_generator_manual.h	/^namespace options {$/;"	n
options	search/pdbs/pattern_collection_generator_systematic.h	/^namespace options {$/;"	n
options	search/pdbs/pattern_generator_greedy.h	/^namespace options {$/;"	n
options	search/pdbs/pattern_generator_manual.h	/^namespace options {$/;"	n
options	search/pdbs/pdb_heuristic.h	/^namespace options {$/;"	n
options	search/potentials/potential_optimizer.h	/^namespace options {$/;"	n
options	search/potentials/util.h	/^namespace options {$/;"	n
options	search/search_engine.h	/^namespace options {$/;"	n
options	search/search_engines/eager_search.h	/^namespace options {$/;"	n
options	search/search_engines/enforced_hill_climbing_search.h	/^namespace options {$/;"	n
options	search/search_engines/iterated_search.h	/^namespace options {$/;"	n
options	search/search_engines/lazy_search.h	/^namespace options {$/;"	n
options	search/search_engines/search_common.h	/^namespace options {$/;"	n
options	search/search_engines/top_k_eager_search.h	/^namespace options {$/;"	n
options	search/structural_symmetries/graph_creator.h	/^namespace options {$/;"	n
options	search/structural_symmetries/group.h	/^namespace options {$/;"	n
options	search/tasks/cost_adapted_task.h	/^namespace options {$/;"	n
options	search/utils/rng_options.h	/^namespace options {$/;"	n
opts	search/options/option_parser.h	/^    Options opts;$/;"	m	class:options::OptionParser
orbit_size	search/bliss/orbit.cc	/^unsigned int Orbit::orbit_size(unsigned int element) const$/;"	f	class:bliss::Orbit
orbits	search/bliss/orbit.h	/^  OrbitEntry *orbits;$/;"	m	class:bliss::Orbit
order	search/structural_symmetries/permutation.h	/^    int order;$/;"	m	class:Permutation
order_facts	search/cegar/subtask_generators.cc	/^static void order_facts($/;"	f	namespace:cegar
ordered_buckets_use_map	search/merge_and_shrink/shrink_fh.cc	/^void ShrinkFH::ordered_buckets_use_map($/;"	f	class:merge_and_shrink::ShrinkFH
ordered_buckets_use_vector	search/merge_and_shrink/shrink_fh.cc	/^void ShrinkFH::ordered_buckets_use_vector($/;"	f	class:merge_and_shrink::ShrinkFH
ordered_items	search/algorithms/ordered_set.h	/^    std::vector<T> ordered_items;$/;"	m	class:ordered_set::OrderedSet
ordered_nodes	search/landmarks/landmark_graph.h	/^    std::vector<LandmarkNode *> ordered_nodes;$/;"	m	class:landmarks::EdgeType::LandmarkGraph
ordered_set	search/algorithms/ordered_set.h	/^namespace ordered_set {$/;"	n
ordered_set	search/search_engine.h	/^namespace ordered_set {$/;"	n
original_op_id	search/heuristics/lm_cut_landmarks.h	/^    int original_op_id;$/;"	m	struct:lm_cut_heuristic::RelaxedOperator
os	search/options/doc_printer.h	/^    std::ostream &os;$/;"	m	class:options::DocPrinter
other	search/merge_and_shrink/fts_factory.cc	/^        TransitionSystemData &operator=(TransitionSystemData &other) = delete;$/;"	m	struct:merge_and_shrink::FTSFactory::TransitionSystemData	file:
other	search/merge_and_shrink/fts_factory.cc	/^        TransitionSystemData(TransitionSystemData &other) = delete;$/;"	m	struct:merge_and_shrink::FTSFactory::TransitionSystemData	file:
other	search/options/option_parser.h	/^    OptionParser &operator=(const OptionParser &other) = delete;$/;"	m	class:options::OptionParser
other	search/options/option_parser.h	/^    OptionParser(const OptionParser &other) = delete;$/;"	m	class:options::OptionParser
other	search/options/plugin.h	/^    Plugin(const Plugin<T> &other) = delete;$/;"	m	class:options::Plugin
other	search/options/plugin.h	/^    PluginShared(const PluginShared<T> &other) = delete;$/;"	m	class:options::PluginShared
other	search/options/plugin.h	/^    PluginTypePlugin(const PluginTypePlugin &other) = delete;$/;"	m	class:options::PluginTypePlugin
out_of_memory_handler	search/structural_symmetries/graph_creator.cc	/^static void out_of_memory_handler() {$/;"	f	file:
out_of_memory_handler	search/utils/system_unix.cc	/^void out_of_memory_handler() {$/;"	f	namespace:utils
out_of_memory_handler	search/utils/system_windows.cc	/^void out_of_memory_handler() {$/;"	f	namespace:utils
outdegree_invariant	search/bliss/graph.cc	/^Digraph::outdegree_invariant(const Digraph* const g, const unsigned int vnum)$/;"	f	class:bliss::Digraph
outgoing_transitions	search/cegar/abstract_state.h	/^    Transitions outgoing_transitions;$/;"	m	class:cegar::AbstractState
outgoing_transitions	search/heuristics/cea_heuristic.cc	/^    vector<LocalTransition> outgoing_transitions;$/;"	m	struct:cea_heuristic::LocalProblemNode	file:
output	translate/sas_tasks.py	/^    def output(self, stream):$/;"	m	class:SASAxiom
output	translate/sas_tasks.py	/^    def output(self, stream):$/;"	m	class:SASGoal
output	translate/sas_tasks.py	/^    def output(self, stream):$/;"	m	class:SASInit
output	translate/sas_tasks.py	/^    def output(self, stream):$/;"	m	class:SASMutexGroup
output	translate/sas_tasks.py	/^    def output(self, stream):$/;"	m	class:SASOperator
output	translate/sas_tasks.py	/^    def output(self, stream):$/;"	m	class:SASTask
output	translate/sas_tasks.py	/^    def output(self, stream):$/;"	m	class:SASVariables
output_plans	search/search_engines/top_k_eager_search.cc	/^void TopKEagerSearch::output_plans() {$/;"	f	class:top_k_eager_search::TopKEagerSearch
override	search/cegar/additive_cartesian_heuristic.h	/^    virtual int compute_heuristic(const GlobalState &global_state) override;$/;"	m	class:cegar::AdditiveCartesianHeuristic
override	search/cegar/subtask_generators.h	/^        const std::shared_ptr<AbstractTask> &task) const override;$/;"	m	class:cegar::GoalDecomposition
override	search/cegar/subtask_generators.h	/^        const std::shared_ptr<AbstractTask> &task) const override;$/;"	m	class:cegar::LandmarkDecomposition
override	search/cegar/subtask_generators.h	/^        const std::shared_ptr<AbstractTask> &task) const override;$/;"	m	class:cegar::TaskDuplicator
override	search/evaluators/combining_evaluator.h	/^        EvaluationContext &eval_context) override;$/;"	m	class:combining_evaluator::CombiningEvaluator
override	search/evaluators/combining_evaluator.h	/^    virtual bool dead_ends_are_reliable() const override;$/;"	m	class:combining_evaluator::CombiningEvaluator
override	search/evaluators/combining_evaluator.h	/^    virtual void get_involved_heuristics(std::set<Heuristic *> &hset) override;$/;"	m	class:combining_evaluator::CombiningEvaluator
override	search/evaluators/combining_evaluator.h	/^    virtual ~CombiningEvaluator() override;$/;"	m	class:combining_evaluator::CombiningEvaluator
override	search/evaluators/const_evaluator.h	/^    virtual int compute_heuristic(const GlobalState &) override;$/;"	m	class:const_evaluator::ConstEvaluator
override	search/evaluators/const_evaluator.h	/^    virtual ~ConstEvaluator() override = default;$/;"	m	class:const_evaluator::ConstEvaluator
override	search/evaluators/g_evaluator.h	/^        EvaluationContext &eval_context) override;$/;"	m	class:g_evaluator::GEvaluator
override	search/evaluators/g_evaluator.h	/^    virtual ~GEvaluator() override = default;$/;"	m	class:g_evaluator::GEvaluator
override	search/evaluators/max_evaluator.h	/^    virtual int combine_values(const std::vector<int> &values) override;$/;"	m	class:max_evaluator::MaxEvaluator
override	search/evaluators/max_evaluator.h	/^    virtual ~MaxEvaluator() override;$/;"	m	class:max_evaluator::MaxEvaluator
override	search/evaluators/pref_evaluator.h	/^        EvaluationContext &eval_context) override;$/;"	m	class:pref_evaluator::PrefEvaluator
override	search/evaluators/pref_evaluator.h	/^    virtual ~PrefEvaluator() override;$/;"	m	class:pref_evaluator::PrefEvaluator
override	search/evaluators/sum_evaluator.h	/^    virtual int combine_values(const std::vector<int> &values) override;$/;"	m	class:sum_evaluator::SumEvaluator
override	search/evaluators/sum_evaluator.h	/^    virtual ~SumEvaluator() override;$/;"	m	class:sum_evaluator::SumEvaluator
override	search/evaluators/weighted_evaluator.h	/^        EvaluationContext &eval_context) override;$/;"	m	class:weighted_evaluator::WeightedEvaluator
override	search/evaluators/weighted_evaluator.h	/^    virtual bool dead_ends_are_reliable() const override;$/;"	m	class:weighted_evaluator::WeightedEvaluator
override	search/evaluators/weighted_evaluator.h	/^    virtual void get_involved_heuristics(std::set<Heuristic *> &hset) override;$/;"	m	class:weighted_evaluator::WeightedEvaluator
override	search/evaluators/weighted_evaluator.h	/^    virtual ~WeightedEvaluator() override;$/;"	m	class:weighted_evaluator::WeightedEvaluator
override	search/heuristic.h	/^        EvaluationContext &eval_context) override;$/;"	m	class:Heuristic
override	search/heuristic.h	/^    virtual ~Heuristic() override;$/;"	m	class:Heuristic
override	search/heuristics/lm_cut_heuristic.h	/^    virtual int compute_heuristic(const GlobalState &global_state) override;$/;"	m	class:lm_cut_heuristic::LandmarkCutHeuristic
override	search/heuristics/lm_cut_heuristic.h	/^    virtual ~LandmarkCutHeuristic() override;$/;"	m	class:lm_cut_heuristic::LandmarkCutHeuristic
override	search/landmarks/exploration.h	/^    virtual int compute_heuristic(const GlobalState &state) override;$/;"	m	class:landmarks::Exploration
override	search/landmarks/lama_ff_synergy.cc	/^    virtual ~FFSlaveHeuristic() override = default;$/;"	m	class:landmarks::FFSlaveHeuristic	file:
override	search/landmarks/lama_ff_synergy.cc	/^    virtual ~LamaMasterHeuristic() override = default;$/;"	m	class:landmarks::LamaMasterHeuristic	file:
override	search/landmarks/landmark_cost_assignment.h	/^    virtual double cost_sharing_h_value() override;$/;"	m	class:landmarks::LandmarkEfficientOptimalSharedCostAssignment
override	search/landmarks/landmark_cost_assignment.h	/^    virtual double cost_sharing_h_value() override;$/;"	m	class:landmarks::LandmarkUniformSharedCostAssignment
override	search/landmarks/landmark_count_heuristic.h	/^                                         const GlobalState &state) override;$/;"	m	class:landmarks::LandmarkCountHeuristic
override	search/landmarks/landmark_count_heuristic.h	/^    virtual bool dead_ends_are_reliable() const override;$/;"	m	class:landmarks::LandmarkCountHeuristic
override	search/landmarks/landmark_count_heuristic.h	/^    virtual int compute_heuristic(const GlobalState &state) override;$/;"	m	class:landmarks::LandmarkCountHeuristic
override	search/landmarks/landmark_count_heuristic.h	/^    virtual void notify_initial_state(const GlobalState &initial_state) override;$/;"	m	class:landmarks::LandmarkCountHeuristic
override	search/landmarks/landmark_factory_h_m.h	/^                                    Exploration &exploration) override;$/;"	m	class:landmarks::LandmarkFactoryHM
override	search/landmarks/landmark_factory_h_m.h	/^    virtual bool supports_conditional_effects() const override;$/;"	m	class:landmarks::LandmarkFactoryHM
override	search/landmarks/landmark_factory_h_m.h	/^    virtual void calc_achievers(const TaskProxy &task_proxy, Exploration &exploration) override;$/;"	m	class:landmarks::LandmarkFactoryHM
override	search/landmarks/landmark_factory_merged.h	/^    virtual bool supports_conditional_effects() const override;$/;"	m	class:landmarks::LandmarkFactoryMerged
override	search/landmarks/landmark_factory_merged.h	/^    virtual void generate_landmarks(const std::shared_ptr<AbstractTask> &task, Exploration &exploration) override;$/;"	m	class:landmarks::LandmarkFactoryMerged
override	search/landmarks/landmark_factory_rpg_exhaust.h	/^                                    Exploration &exploration) override;$/;"	m	class:landmarks::LandmarkFactoryRpgExhaust
override	search/landmarks/landmark_factory_rpg_exhaust.h	/^    virtual bool supports_conditional_effects() const override;$/;"	m	class:landmarks::LandmarkFactoryRpgExhaust
override	search/landmarks/landmark_factory_rpg_sasp.h	/^                                    Exploration &exploration) override;$/;"	m	class:landmarks::LandmarkFactoryRpgSasp
override	search/landmarks/landmark_factory_rpg_sasp.h	/^    virtual bool supports_conditional_effects() const override;$/;"	m	class:landmarks::LandmarkFactoryRpgSasp
override	search/landmarks/landmark_factory_zhu_givan.h	/^                                    Exploration &exploration) override;$/;"	m	class:landmarks::LandmarkFactoryZhuGivan
override	search/landmarks/landmark_factory_zhu_givan.h	/^    virtual bool supports_conditional_effects() const override;$/;"	m	class:landmarks::LandmarkFactoryZhuGivan
override	search/merge_and_shrink/merge_and_shrink_heuristic.h	/^    virtual int compute_heuristic(const GlobalState &global_state) override;$/;"	m	class:merge_and_shrink::MergeAndShrinkHeuristic
override	search/merge_and_shrink/merge_and_shrink_heuristic.h	/^    virtual ~MergeAndShrinkHeuristic() override = default;$/;"	m	class:merge_and_shrink::MergeAndShrinkHeuristic
override	search/merge_and_shrink/merge_and_shrink_representation.h	/^        const std::vector<int> &abstraction_mapping) override;$/;"	m	class:merge_and_shrink::MergeAndShrinkRepresentationLeaf
override	search/merge_and_shrink/merge_and_shrink_representation.h	/^        const std::vector<int> &abstraction_mapping) override;$/;"	m	class:merge_and_shrink::MergeAndShrinkRepresentationMerge
override	search/merge_and_shrink/merge_and_shrink_representation.h	/^    virtual int get_value(const State &state) const override;$/;"	m	class:merge_and_shrink::MergeAndShrinkRepresentationLeaf
override	search/merge_and_shrink/merge_and_shrink_representation.h	/^    virtual int get_value(const State &state) const override;$/;"	m	class:merge_and_shrink::MergeAndShrinkRepresentationMerge
override	search/merge_and_shrink/merge_and_shrink_representation.h	/^    virtual void dump() const override;$/;"	m	class:merge_and_shrink::MergeAndShrinkRepresentationLeaf
override	search/merge_and_shrink/merge_and_shrink_representation.h	/^    virtual void dump() const override;$/;"	m	class:merge_and_shrink::MergeAndShrinkRepresentationMerge
override	search/merge_and_shrink/merge_and_shrink_representation.h	/^    virtual void set_distances(const Distances &) override;$/;"	m	class:merge_and_shrink::MergeAndShrinkRepresentationLeaf
override	search/merge_and_shrink/merge_and_shrink_representation.h	/^    virtual void set_distances(const Distances &distances) override;$/;"	m	class:merge_and_shrink::MergeAndShrinkRepresentationMerge
override	search/merge_and_shrink/merge_scoring_function_dfp.h	/^        const std::vector<std::pair<int, int>> &merge_candidates) override;$/;"	m	class:merge_and_shrink::MergeScoringFunctionDFP
override	search/merge_and_shrink/merge_scoring_function_dfp.h	/^    virtual std::string name() const override;$/;"	m	class:merge_and_shrink::MergeScoringFunctionDFP
override	search/merge_and_shrink/merge_scoring_function_dfp.h	/^    virtual ~MergeScoringFunctionDFP() override = default;$/;"	m	class:merge_and_shrink::MergeScoringFunctionDFP
override	search/merge_and_shrink/merge_scoring_function_goal_relevance.h	/^        const std::vector<std::pair<int, int>> &merge_candidates) override;$/;"	m	class:merge_and_shrink::MergeScoringFunctionGoalRelevance
override	search/merge_and_shrink/merge_scoring_function_goal_relevance.h	/^    virtual std::string name() const override;$/;"	m	class:merge_and_shrink::MergeScoringFunctionGoalRelevance
override	search/merge_and_shrink/merge_scoring_function_goal_relevance.h	/^    virtual ~MergeScoringFunctionGoalRelevance() override = default;$/;"	m	class:merge_and_shrink::MergeScoringFunctionGoalRelevance
override	search/merge_and_shrink/merge_scoring_function_single_random.h	/^        const std::vector<std::pair<int, int>> &merge_candidates) override;$/;"	m	class:merge_and_shrink::MergeScoringFunctionSingleRandom
override	search/merge_and_shrink/merge_scoring_function_single_random.h	/^    virtual std::string name() const override;$/;"	m	class:merge_and_shrink::MergeScoringFunctionSingleRandom
override	search/merge_and_shrink/merge_scoring_function_single_random.h	/^    virtual void dump_function_specific_options() const override;$/;"	m	class:merge_and_shrink::MergeScoringFunctionSingleRandom
override	search/merge_and_shrink/merge_scoring_function_single_random.h	/^    virtual ~MergeScoringFunctionSingleRandom() override = default;$/;"	m	class:merge_and_shrink::MergeScoringFunctionSingleRandom
override	search/merge_and_shrink/merge_scoring_function_total_order.h	/^        const std::vector<std::pair<int, int>> &merge_candidates) override;$/;"	m	class:merge_and_shrink::MergeScoringFunctionTotalOrder
override	search/merge_and_shrink/merge_scoring_function_total_order.h	/^    virtual std::string name() const override;$/;"	m	class:merge_and_shrink::MergeScoringFunctionTotalOrder
override	search/merge_and_shrink/merge_scoring_function_total_order.h	/^    virtual void dump_function_specific_options() const override;$/;"	m	class:merge_and_shrink::MergeScoringFunctionTotalOrder
override	search/merge_and_shrink/merge_scoring_function_total_order.h	/^    virtual void initialize(const TaskProxy &task_proxy) override;$/;"	m	class:merge_and_shrink::MergeScoringFunctionTotalOrder
override	search/merge_and_shrink/merge_scoring_function_total_order.h	/^    virtual ~MergeScoringFunctionTotalOrder() override = default;$/;"	m	class:merge_and_shrink::MergeScoringFunctionTotalOrder
override	search/merge_and_shrink/merge_selector_score_based_filtering.h	/^        const std::vector<int> &indices_subset = std::vector<int>()) const override;$/;"	m	class:merge_and_shrink::MergeSelectorScoreBasedFiltering
override	search/merge_and_shrink/merge_selector_score_based_filtering.h	/^    virtual std::string name() const override;$/;"	m	class:merge_and_shrink::MergeSelectorScoreBasedFiltering
override	search/merge_and_shrink/merge_selector_score_based_filtering.h	/^    virtual void dump_specific_options() const override;$/;"	m	class:merge_and_shrink::MergeSelectorScoreBasedFiltering
override	search/merge_and_shrink/merge_selector_score_based_filtering.h	/^    virtual void initialize(const TaskProxy &task_proxy) override;$/;"	m	class:merge_and_shrink::MergeSelectorScoreBasedFiltering
override	search/merge_and_shrink/merge_selector_score_based_filtering.h	/^    virtual ~MergeSelectorScoreBasedFiltering() override = default;$/;"	m	class:merge_and_shrink::MergeSelectorScoreBasedFiltering
override	search/merge_and_shrink/merge_strategy_factory_precomputed.h	/^        FactoredTransitionSystem &fts) override;$/;"	m	class:merge_and_shrink::MergeStrategyFactoryPrecomputed
override	search/merge_and_shrink/merge_strategy_factory_precomputed.h	/^    virtual std::string name() const override;$/;"	m	class:merge_and_shrink::MergeStrategyFactoryPrecomputed
override	search/merge_and_shrink/merge_strategy_factory_precomputed.h	/^    virtual void dump_strategy_specific_options() const override;$/;"	m	class:merge_and_shrink::MergeStrategyFactoryPrecomputed
override	search/merge_and_shrink/merge_strategy_factory_precomputed.h	/^    virtual ~MergeStrategyFactoryPrecomputed() override = default;$/;"	m	class:merge_and_shrink::MergeStrategyFactoryPrecomputed
override	search/merge_and_shrink/merge_strategy_factory_stateless.h	/^        FactoredTransitionSystem &fts) override;$/;"	m	class:merge_and_shrink::MergeStrategyFactoryStateless
override	search/merge_and_shrink/merge_strategy_factory_stateless.h	/^    virtual std::string name() const override;$/;"	m	class:merge_and_shrink::MergeStrategyFactoryStateless
override	search/merge_and_shrink/merge_strategy_factory_stateless.h	/^    virtual void dump_strategy_specific_options() const override;$/;"	m	class:merge_and_shrink::MergeStrategyFactoryStateless
override	search/merge_and_shrink/merge_strategy_factory_stateless.h	/^    virtual ~MergeStrategyFactoryStateless() override = default;$/;"	m	class:merge_and_shrink::MergeStrategyFactoryStateless
override	search/merge_and_shrink/merge_strategy_precomputed.h	/^    virtual std::pair<int, int> get_next() override;$/;"	m	class:merge_and_shrink::MergeStrategyPrecomputed
override	search/merge_and_shrink/merge_strategy_precomputed.h	/^    virtual ~MergeStrategyPrecomputed() override = default;$/;"	m	class:merge_and_shrink::MergeStrategyPrecomputed
override	search/merge_and_shrink/merge_strategy_stateless.h	/^    virtual std::pair<int, int> get_next() override;$/;"	m	class:merge_and_shrink::MergeStrategyStateless
override	search/merge_and_shrink/merge_strategy_stateless.h	/^    virtual ~MergeStrategyStateless() override = default;$/;"	m	class:merge_and_shrink::MergeStrategyStateless
override	search/merge_and_shrink/merge_tree_factory_linear.h	/^        const TaskProxy &task_proxy) override;$/;"	m	class:merge_and_shrink::MergeTreeFactoryLinear
override	search/merge_and_shrink/merge_tree_factory_linear.h	/^        const std::vector<int> &indices_subset) override;$/;"	m	class:merge_and_shrink::MergeTreeFactoryLinear
override	search/merge_and_shrink/merge_tree_factory_linear.h	/^    virtual std::string name() const override;$/;"	m	class:merge_and_shrink::MergeTreeFactoryLinear
override	search/merge_and_shrink/merge_tree_factory_linear.h	/^    virtual void dump_tree_specific_options() const override;$/;"	m	class:merge_and_shrink::MergeTreeFactoryLinear
override	search/merge_and_shrink/merge_tree_factory_linear.h	/^    virtual ~MergeTreeFactoryLinear() override = default;$/;"	m	class:merge_and_shrink::MergeTreeFactoryLinear
override	search/merge_and_shrink/shrink_bisimulation.h	/^        Verbosity verbosity) const override;$/;"	m	class:merge_and_shrink::ShrinkBisimulation
override	search/merge_and_shrink/shrink_bisimulation.h	/^    virtual std::string name() const override;$/;"	m	class:merge_and_shrink::ShrinkBisimulation
override	search/merge_and_shrink/shrink_bisimulation.h	/^    virtual void dump_strategy_specific_options() const override;$/;"	m	class:merge_and_shrink::ShrinkBisimulation
override	search/merge_and_shrink/shrink_bisimulation.h	/^    virtual ~ShrinkBisimulation() override = default;$/;"	m	class:merge_and_shrink::ShrinkBisimulation
override	search/merge_and_shrink/shrink_bucket_based.h	/^        Verbosity verbosity) const override;$/;"	m	class:merge_and_shrink::ShrinkBucketBased
override	search/merge_and_shrink/shrink_bucket_based.h	/^    virtual ~ShrinkBucketBased() override = default;$/;"	m	class:merge_and_shrink::ShrinkBucketBased
override	search/merge_and_shrink/shrink_fh.h	/^        std::vector<Bucket> &buckets) const override;$/;"	m	class:merge_and_shrink::ShrinkFH
override	search/merge_and_shrink/shrink_fh.h	/^    virtual std::string name() const override;$/;"	m	class:merge_and_shrink::ShrinkFH
override	search/merge_and_shrink/shrink_fh.h	/^    virtual void dump_strategy_specific_options() const override;$/;"	m	class:merge_and_shrink::ShrinkFH
override	search/merge_and_shrink/shrink_fh.h	/^    virtual ~ShrinkFH() override = default;$/;"	m	class:merge_and_shrink::ShrinkFH
override	search/merge_and_shrink/shrink_random.h	/^        std::vector<Bucket> &buckets) const override;$/;"	m	class:merge_and_shrink::ShrinkRandom
override	search/merge_and_shrink/shrink_random.h	/^    virtual std::string name() const override;$/;"	m	class:merge_and_shrink::ShrinkRandom
override	search/merge_and_shrink/shrink_random.h	/^    virtual ~ShrinkRandom() override = default;$/;"	m	class:merge_and_shrink::ShrinkRandom
override	search/open_lists/alternation_open_list.cc	/^                              const Entry &entry) override;$/;"	m	class:AlternationOpenList	file:
override	search/open_lists/alternation_open_list.cc	/^        EvaluationContext &eval_context) const override;$/;"	m	class:AlternationOpenList	file:
override	search/open_lists/alternation_open_list.cc	/^    virtual Entry remove_min(vector<int> *key = nullptr) override;$/;"	m	class:AlternationOpenList	file:
override	search/open_lists/alternation_open_list.cc	/^    virtual Entry top() override;$/;"	m	class:AlternationOpenList	file:
override	search/open_lists/alternation_open_list.cc	/^    virtual bool empty() const override;$/;"	m	class:AlternationOpenList	file:
override	search/open_lists/alternation_open_list.cc	/^    virtual void boost_preferred() override;$/;"	m	class:AlternationOpenList	file:
override	search/open_lists/alternation_open_list.cc	/^    virtual void clear() override;$/;"	m	class:AlternationOpenList	file:
override	search/open_lists/alternation_open_list.cc	/^    virtual void get_involved_heuristics(set<Heuristic *> &hset) override;$/;"	m	class:AlternationOpenList	file:
override	search/open_lists/alternation_open_list.cc	/^    virtual ~AlternationOpenList() override = default;$/;"	m	class:AlternationOpenList	file:
override	search/open_lists/alternation_open_list.h	/^    virtual std::unique_ptr<EdgeOpenList> create_edge_open_list() override;$/;"	m	class:AlternationOpenListFactory
override	search/open_lists/alternation_open_list.h	/^    virtual std::unique_ptr<StateOpenList> create_state_open_list() override;$/;"	m	class:AlternationOpenListFactory
override	search/open_lists/alternation_open_list.h	/^    virtual ~AlternationOpenListFactory() override = default;$/;"	m	class:AlternationOpenListFactory
override	search/open_lists/epsilon_greedy_open_list.cc	/^                              const Entry &entry) override;$/;"	m	class:EpsilonGreedyOpenList	file:
override	search/open_lists/epsilon_greedy_open_list.cc	/^        EvaluationContext &eval_context) const override;$/;"	m	class:EpsilonGreedyOpenList	file:
override	search/open_lists/epsilon_greedy_open_list.cc	/^    virtual Entry remove_min(vector<int> *key = nullptr) override;$/;"	m	class:EpsilonGreedyOpenList	file:
override	search/open_lists/epsilon_greedy_open_list.cc	/^    virtual Entry top() override;$/;"	m	class:EpsilonGreedyOpenList	file:
override	search/open_lists/epsilon_greedy_open_list.cc	/^    virtual bool empty() const override;$/;"	m	class:EpsilonGreedyOpenList	file:
override	search/open_lists/epsilon_greedy_open_list.cc	/^    virtual void clear() override;$/;"	m	class:EpsilonGreedyOpenList	file:
override	search/open_lists/epsilon_greedy_open_list.cc	/^    virtual void get_involved_heuristics(set<Heuristic *> &hset) override;$/;"	m	class:EpsilonGreedyOpenList	file:
override	search/open_lists/epsilon_greedy_open_list.cc	/^    virtual ~EpsilonGreedyOpenList() override = default;$/;"	m	class:EpsilonGreedyOpenList	file:
override	search/open_lists/epsilon_greedy_open_list.h	/^    virtual std::unique_ptr<EdgeOpenList> create_edge_open_list() override;$/;"	m	class:EpsilonGreedyOpenListFactory
override	search/open_lists/epsilon_greedy_open_list.h	/^    virtual std::unique_ptr<StateOpenList> create_state_open_list() override;$/;"	m	class:EpsilonGreedyOpenListFactory
override	search/open_lists/epsilon_greedy_open_list.h	/^    virtual ~EpsilonGreedyOpenListFactory() override = default;$/;"	m	class:EpsilonGreedyOpenListFactory
override	search/open_lists/pareto_open_list.cc	/^                              const Entry &entry) override;$/;"	m	class:ParetoOpenList	file:
override	search/open_lists/pareto_open_list.cc	/^        EvaluationContext &eval_context) const override;$/;"	m	class:ParetoOpenList	file:
override	search/open_lists/pareto_open_list.cc	/^    virtual Entry remove_min(vector<int> *key = nullptr) override;$/;"	m	class:ParetoOpenList	file:
override	search/open_lists/pareto_open_list.cc	/^    virtual Entry top() override;$/;"	m	class:ParetoOpenList	file:
override	search/open_lists/pareto_open_list.cc	/^    virtual bool empty() const override;$/;"	m	class:ParetoOpenList	file:
override	search/open_lists/pareto_open_list.cc	/^    virtual void clear() override;$/;"	m	class:ParetoOpenList	file:
override	search/open_lists/pareto_open_list.cc	/^    virtual void get_involved_heuristics(set<Heuristic *> &hset) override;$/;"	m	class:ParetoOpenList	file:
override	search/open_lists/pareto_open_list.cc	/^    virtual ~ParetoOpenList() override = default;$/;"	m	class:ParetoOpenList	file:
override	search/open_lists/pareto_open_list.h	/^    virtual std::unique_ptr<EdgeOpenList> create_edge_open_list() override;$/;"	m	class:ParetoOpenListFactory
override	search/open_lists/pareto_open_list.h	/^    virtual std::unique_ptr<StateOpenList> create_state_open_list() override;$/;"	m	class:ParetoOpenListFactory
override	search/open_lists/pareto_open_list.h	/^    virtual ~ParetoOpenListFactory() override = default;$/;"	m	class:ParetoOpenListFactory
override	search/open_lists/standard_scalar_open_list.cc	/^                              const Entry &entry) override;$/;"	m	class:StandardScalarOpenList	file:
override	search/open_lists/standard_scalar_open_list.cc	/^        EvaluationContext &eval_context) const override;$/;"	m	class:StandardScalarOpenList	file:
override	search/open_lists/standard_scalar_open_list.cc	/^    virtual Entry remove_min(vector<int> *key = nullptr) override;$/;"	m	class:StandardScalarOpenList	file:
override	search/open_lists/standard_scalar_open_list.cc	/^    virtual Entry top() override;$/;"	m	class:StandardScalarOpenList	file:
override	search/open_lists/standard_scalar_open_list.cc	/^    virtual bool empty() const override;$/;"	m	class:StandardScalarOpenList	file:
override	search/open_lists/standard_scalar_open_list.cc	/^    virtual void clear() override;$/;"	m	class:StandardScalarOpenList	file:
override	search/open_lists/standard_scalar_open_list.cc	/^    virtual void get_involved_heuristics(set<Heuristic *> &hset) override;$/;"	m	class:StandardScalarOpenList	file:
override	search/open_lists/standard_scalar_open_list.cc	/^    virtual ~StandardScalarOpenList() override = default;$/;"	m	class:StandardScalarOpenList	file:
override	search/open_lists/standard_scalar_open_list.h	/^    virtual std::unique_ptr<EdgeOpenList> create_edge_open_list() override;$/;"	m	class:StandardScalarOpenListFactory
override	search/open_lists/standard_scalar_open_list.h	/^    virtual std::unique_ptr<StateOpenList> create_state_open_list() override;$/;"	m	class:StandardScalarOpenListFactory
override	search/open_lists/standard_scalar_open_list.h	/^    virtual ~StandardScalarOpenListFactory() override = default;$/;"	m	class:StandardScalarOpenListFactory
override	search/open_lists/tiebreaking_open_list.cc	/^                              const Entry &entry) override;$/;"	m	class:TieBreakingOpenList	file:
override	search/open_lists/tiebreaking_open_list.cc	/^        EvaluationContext &eval_context) const override;$/;"	m	class:TieBreakingOpenList	file:
override	search/open_lists/tiebreaking_open_list.cc	/^    virtual Entry remove_min(vector<int> *key = nullptr) override;$/;"	m	class:TieBreakingOpenList	file:
override	search/open_lists/tiebreaking_open_list.cc	/^    virtual Entry top() override;$/;"	m	class:TieBreakingOpenList	file:
override	search/open_lists/tiebreaking_open_list.cc	/^    virtual bool empty() const override;$/;"	m	class:TieBreakingOpenList	file:
override	search/open_lists/tiebreaking_open_list.cc	/^    virtual void clear() override;$/;"	m	class:TieBreakingOpenList	file:
override	search/open_lists/tiebreaking_open_list.cc	/^    virtual void get_involved_heuristics(set<Heuristic *> &hset) override;$/;"	m	class:TieBreakingOpenList	file:
override	search/open_lists/tiebreaking_open_list.cc	/^    virtual ~TieBreakingOpenList() override = default;$/;"	m	class:TieBreakingOpenList	file:
override	search/open_lists/tiebreaking_open_list.h	/^    virtual std::unique_ptr<EdgeOpenList> create_edge_open_list() override;$/;"	m	class:TieBreakingOpenListFactory
override	search/open_lists/tiebreaking_open_list.h	/^    virtual std::unique_ptr<StateOpenList> create_state_open_list() override;$/;"	m	class:TieBreakingOpenListFactory
override	search/open_lists/tiebreaking_open_list.h	/^    virtual ~TieBreakingOpenListFactory() override = default;$/;"	m	class:TieBreakingOpenListFactory
override	search/open_lists/type_based_open_list.cc	/^        EvaluationContext &eval_context) const override;$/;"	m	class:TypeBasedOpenList	file:
override	search/open_lists/type_based_open_list.cc	/^        EvaluationContext &eval_context, const Entry &entry) override;$/;"	m	class:TypeBasedOpenList	file:
override	search/open_lists/type_based_open_list.cc	/^    virtual Entry remove_min(vector<int> *key = nullptr) override;$/;"	m	class:TypeBasedOpenList	file:
override	search/open_lists/type_based_open_list.cc	/^    virtual Entry top() override;$/;"	m	class:TypeBasedOpenList	file:
override	search/open_lists/type_based_open_list.cc	/^    virtual bool empty() const override;$/;"	m	class:TypeBasedOpenList	file:
override	search/open_lists/type_based_open_list.cc	/^    virtual bool is_dead_end(EvaluationContext &eval_context) const override;$/;"	m	class:TypeBasedOpenList	file:
override	search/open_lists/type_based_open_list.cc	/^    virtual void clear() override;$/;"	m	class:TypeBasedOpenList	file:
override	search/open_lists/type_based_open_list.cc	/^    virtual void get_involved_heuristics(set<Heuristic *> &hset) override;$/;"	m	class:TypeBasedOpenList	file:
override	search/open_lists/type_based_open_list.cc	/^    virtual ~TypeBasedOpenList() override = default;$/;"	m	class:TypeBasedOpenList	file:
override	search/open_lists/type_based_open_list.h	/^    virtual std::unique_ptr<EdgeOpenList> create_edge_open_list() override;$/;"	m	class:TypeBasedOpenListFactory
override	search/open_lists/type_based_open_list.h	/^    virtual std::unique_ptr<StateOpenList> create_state_open_list() override;$/;"	m	class:TypeBasedOpenListFactory
override	search/open_lists/type_based_open_list.h	/^    virtual ~TypeBasedOpenListFactory() override = default;$/;"	m	class:TypeBasedOpenListFactory
override	search/operator_counting/lm_cut_constraints.h	/^                                    lp::LPSolver &lp_solver) override;$/;"	m	class:operator_counting::LMCutConstraints
override	search/operator_counting/lm_cut_constraints.h	/^        double infinity) override;$/;"	m	class:operator_counting::LMCutConstraints
override	search/operator_counting/operator_counting_heuristic.h	/^    virtual int compute_heuristic(const GlobalState &global_state) override;$/;"	m	class:operator_counting::OperatorCountingHeuristic
override	search/operator_counting/pho_constraints.h	/^        const State &state, lp::LPSolver &lp_solver) override;$/;"	m	class:operator_counting::PhOConstraints
override	search/operator_counting/pho_constraints.h	/^        double infinity) override;$/;"	m	class:operator_counting::PhOConstraints
override	search/pdbs/canonical_pdbs_heuristic.h	/^    virtual int compute_heuristic(const GlobalState &state) override;$/;"	m	class:pdbs::CanonicalPDBsHeuristic
override	search/pdbs/pattern_collection_generator_combo.h	/^        const std::shared_ptr<AbstractTask> &task) override;$/;"	m	class:pdbs::PatternCollectionGeneratorCombo
override	search/pdbs/pattern_collection_generator_genetic.h	/^        const std::shared_ptr<AbstractTask> &task) override;$/;"	m	class:pdbs::PatternCollectionGeneratorGenetic
override	search/pdbs/pattern_collection_generator_hillclimbing.h	/^        const std::shared_ptr<AbstractTask> &task) override;$/;"	m	class:pdbs::PatternCollectionGeneratorHillclimbing
override	search/pdbs/pattern_collection_generator_manual.h	/^        const std::shared_ptr<AbstractTask> &task) override;$/;"	m	class:pdbs::PatternCollectionGeneratorManual
override	search/pdbs/pattern_collection_generator_systematic.h	/^        const std::shared_ptr<AbstractTask> &task) override;$/;"	m	class:pdbs::PatternCollectionGeneratorSystematic
override	search/pdbs/pattern_generator_greedy.h	/^    virtual Pattern generate(const std::shared_ptr<AbstractTask> &task) override;$/;"	m	class:pdbs::PatternGeneratorGreedy
override	search/pdbs/pattern_generator_manual.h	/^    virtual Pattern generate(const std::shared_ptr<AbstractTask> &task) override;$/;"	m	class:pdbs::PatternGeneratorManual
override	search/pdbs/pdb_heuristic.h	/^    virtual int compute_heuristic(const GlobalState &global_state) override;$/;"	m	class:pdbs::PDBHeuristic
override	search/pdbs/pdb_heuristic.h	/^    virtual ~PDBHeuristic() override = default;$/;"	m	class:pdbs::PDBHeuristic
override	search/potentials/potential_heuristic.h	/^    virtual int compute_heuristic(const GlobalState &global_state) override;$/;"	m	class:potentials::PotentialHeuristic
override	search/potentials/potential_max_heuristic.h	/^    virtual int compute_heuristic(const GlobalState &global_state) override;$/;"	m	class:potentials::PotentialMaxHeuristic
override	search/pruning/null_pruning_method.h	/^    virtual void initialize(const std::shared_ptr<AbstractTask> &) override;$/;"	m	class:null_pruning_method::NullPruningMethod
override	search/pruning/stubborn_sets.h	/^                                 std::vector<int> &op_ids) override;$/;"	m	class:stubborn_sets::StubbornSets
override	search/pruning/stubborn_sets.h	/^    virtual void initialize(const std::shared_ptr<AbstractTask> &task) override;$/;"	m	class:stubborn_sets::StubbornSets
override	search/pruning/stubborn_sets.h	/^    virtual void print_statistics() const override;$/;"	m	class:stubborn_sets::StubbornSets
override	search/pruning/stubborn_sets_ec.h	/^    virtual void handle_stubborn_operator(const State &state, int op_no) override;$/;"	m	class:stubborn_sets_ec::StubbornSetsEC
override	search/pruning/stubborn_sets_ec.h	/^    virtual void initialize(const std::shared_ptr<AbstractTask> &task) override;$/;"	m	class:stubborn_sets_ec::StubbornSetsEC
override	search/pruning/stubborn_sets_ec.h	/^    virtual void initialize_stubborn_set(const State &state) override;$/;"	m	class:stubborn_sets_ec::StubbornSetsEC
override	search/pruning/stubborn_sets_simple.h	/^                                          int op_no) override;$/;"	m	class:stubborn_sets_simple::StubbornSetsSimple
override	search/pruning/stubborn_sets_simple.h	/^    virtual void initialize(const std::shared_ptr<AbstractTask> &task) override;$/;"	m	class:stubborn_sets_simple::StubbornSetsSimple
override	search/pruning/stubborn_sets_simple.h	/^    virtual void initialize_stubborn_set(const State &state) override;$/;"	m	class:stubborn_sets_simple::StubbornSetsSimple
override	search/search_engines/eager_search.h	/^    virtual SearchStatus step() override;$/;"	m	class:eager_search::EagerSearch
override	search/search_engines/eager_search.h	/^    virtual void initialize() override;$/;"	m	class:eager_search::EagerSearch
override	search/search_engines/eager_search.h	/^    virtual void print_statistics() const override;$/;"	m	class:eager_search::EagerSearch
override	search/search_engines/enforced_hill_climbing_search.h	/^    virtual SearchStatus step() override;$/;"	m	class:enforced_hill_climbing_search::EnforcedHillClimbingSearch
override	search/search_engines/enforced_hill_climbing_search.h	/^    virtual void initialize() override;$/;"	m	class:enforced_hill_climbing_search::EnforcedHillClimbingSearch
override	search/search_engines/enforced_hill_climbing_search.h	/^    virtual void print_statistics() const override;$/;"	m	class:enforced_hill_climbing_search::EnforcedHillClimbingSearch
override	search/search_engines/enforced_hill_climbing_search.h	/^    virtual ~EnforcedHillClimbingSearch() override;$/;"	m	class:enforced_hill_climbing_search::EnforcedHillClimbingSearch
override	search/search_engines/iterated_search.h	/^    virtual SearchStatus step() override;$/;"	m	class:iterated_search::IteratedSearch
override	search/search_engines/iterated_search.h	/^    virtual void print_statistics() const override;$/;"	m	class:iterated_search::IteratedSearch
override	search/search_engines/iterated_search.h	/^    virtual void save_plan_if_necessary() const override;$/;"	m	class:iterated_search::IteratedSearch
override	search/search_engines/kstar.h	/^	void search() override;$/;"	m	class:kstar::KStar
override	search/search_engines/lazy_search.h	/^    virtual SearchStatus step() override;$/;"	m	class:lazy_search::LazySearch
override	search/search_engines/lazy_search.h	/^    virtual void initialize() override;$/;"	m	class:lazy_search::LazySearch
override	search/search_engines/lazy_search.h	/^    virtual void print_statistics() const override;$/;"	m	class:lazy_search::LazySearch
override	search/search_engines/top_k_eager_search.h	/^    virtual SearchStatus step() override;$/;"	m	class:top_k_eager_search::TopKEagerSearch
override	search/search_engines/top_k_eager_search.h	/^    virtual void initialize() override;$/;"	m	class:top_k_eager_search::TopKEagerSearch
override	search/search_engines/top_k_eager_search.h	/^    virtual void print_statistics() const override;$/;"	m	class:top_k_eager_search::TopKEagerSearch
override	search/tasks/cost_adapted_task.h	/^    virtual int get_operator_cost(int index, bool is_axiom) const override;$/;"	m	class:tasks::CostAdaptedTask
override	search/tasks/cost_adapted_task.h	/^    virtual ~CostAdaptedTask() override = default;$/;"	m	class:tasks::CostAdaptedTask
override	search/tasks/delegating_task.h	/^        const AbstractTask *ancestor_task) const final override;$/;"	m	class:tasks::DelegatingTask
override	search/tasks/delegating_task.h	/^        const FactPair &fact1, const FactPair &fact2) const override;$/;"	m	class:tasks::DelegatingTask
override	search/tasks/delegating_task.h	/^        int op_index, int eff_index, bool is_axiom) const override;$/;"	m	class:tasks::DelegatingTask
override	search/tasks/delegating_task.h	/^        int op_index, int eff_index, int cond_index, bool is_axiom) const override;$/;"	m	class:tasks::DelegatingTask
override	search/tasks/delegating_task.h	/^        int op_index, int fact_index, bool is_axiom) const override;$/;"	m	class:tasks::DelegatingTask
override	search/tasks/delegating_task.h	/^    virtual FactPair get_goal_fact(int index) const override;$/;"	m	class:tasks::DelegatingTask
override	search/tasks/delegating_task.h	/^    virtual const GlobalOperator *get_global_operator(int index, bool is_axiom) const override;$/;"	m	class:tasks::DelegatingTask
override	search/tasks/delegating_task.h	/^    virtual int get_num_axioms() const override;$/;"	m	class:tasks::DelegatingTask
override	search/tasks/delegating_task.h	/^    virtual int get_num_goals() const override;$/;"	m	class:tasks::DelegatingTask
override	search/tasks/delegating_task.h	/^    virtual int get_num_operator_effects(int op_index, bool is_axiom) const override;$/;"	m	class:tasks::DelegatingTask
override	search/tasks/delegating_task.h	/^    virtual int get_num_operator_preconditions(int index, bool is_axiom) const override;$/;"	m	class:tasks::DelegatingTask
override	search/tasks/delegating_task.h	/^    virtual int get_num_operators() const override;$/;"	m	class:tasks::DelegatingTask
override	search/tasks/delegating_task.h	/^    virtual int get_num_variables() const override;$/;"	m	class:tasks::DelegatingTask
override	search/tasks/delegating_task.h	/^    virtual int get_operator_cost(int index, bool is_axiom) const override;$/;"	m	class:tasks::DelegatingTask
override	search/tasks/delegating_task.h	/^    virtual int get_variable_axiom_layer(int var) const override;$/;"	m	class:tasks::DelegatingTask
override	search/tasks/delegating_task.h	/^    virtual int get_variable_default_axiom_value(int var) const override;$/;"	m	class:tasks::DelegatingTask
override	search/tasks/delegating_task.h	/^    virtual int get_variable_domain_size(int var) const override;$/;"	m	class:tasks::DelegatingTask
override	search/tasks/delegating_task.h	/^    virtual std::string get_fact_name(const FactPair &fact) const override;$/;"	m	class:tasks::DelegatingTask
override	search/tasks/delegating_task.h	/^    virtual std::string get_operator_name(int index, bool is_axiom) const override;$/;"	m	class:tasks::DelegatingTask
override	search/tasks/delegating_task.h	/^    virtual std::string get_variable_name(int var) const override;$/;"	m	class:tasks::DelegatingTask
override	search/tasks/delegating_task.h	/^    virtual std::vector<int> get_initial_state_values() const override;$/;"	m	class:tasks::DelegatingTask
override	search/tasks/delegating_task.h	/^    virtual ~DelegatingTask() override = default;$/;"	m	class:tasks::DelegatingTask
override	search/tasks/domain_abstracted_task.h	/^        const FactPair &fact1, const FactPair &fact2) const override;$/;"	m	class:extra_tasks::DomainAbstractedTask
override	search/tasks/domain_abstracted_task.h	/^        int op_index, int eff_index, bool is_axiom) const override;$/;"	m	class:extra_tasks::DomainAbstractedTask
override	search/tasks/domain_abstracted_task.h	/^        int op_index, int fact_index, bool is_axiom) const override;$/;"	m	class:extra_tasks::DomainAbstractedTask
override	search/tasks/domain_abstracted_task.h	/^        std::vector<int> &values) const override;$/;"	m	class:extra_tasks::DomainAbstractedTask
override	search/tasks/domain_abstracted_task.h	/^    virtual FactPair get_goal_fact(int index) const override;$/;"	m	class:extra_tasks::DomainAbstractedTask
override	search/tasks/domain_abstracted_task.h	/^    virtual int get_variable_domain_size(int var) const override;$/;"	m	class:extra_tasks::DomainAbstractedTask
override	search/tasks/domain_abstracted_task.h	/^    virtual std::string get_fact_name(const FactPair &fact) const override;$/;"	m	class:extra_tasks::DomainAbstractedTask
override	search/tasks/domain_abstracted_task.h	/^    virtual std::vector<int> get_initial_state_values() const override;$/;"	m	class:extra_tasks::DomainAbstractedTask
override	search/tasks/modified_goals_task.h	/^    virtual FactPair get_goal_fact(int index) const override;$/;"	m	class:extra_tasks::ModifiedGoalsTask
override	search/tasks/modified_goals_task.h	/^    virtual int get_num_goals() const override;$/;"	m	class:extra_tasks::ModifiedGoalsTask
override	search/tasks/modified_operator_costs_task.h	/^    virtual int get_operator_cost(int index, bool is_axiom) const override;$/;"	m	class:extra_tasks::ModifiedOperatorCostsTask
override	search/tasks/modified_operator_costs_task.h	/^    virtual ~ModifiedOperatorCostsTask() override = default;$/;"	m	class:extra_tasks::ModifiedOperatorCostsTask
override	search/tasks/plan_forbid_reformulated_task.h	/^        const FactPair &fact1, const FactPair &fact2) const override;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
override	search/tasks/plan_forbid_reformulated_task.h	/^        int op_index, int eff_index, bool is_axiom) const override;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
override	search/tasks/plan_forbid_reformulated_task.h	/^        int op_index, int eff_index, int cond_index, bool is_axiom) const override;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
override	search/tasks/plan_forbid_reformulated_task.h	/^        int op_index, int fact_index, bool is_axiom) const override;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
override	search/tasks/plan_forbid_reformulated_task.h	/^        std::vector<int> &values) const override;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
override	search/tasks/plan_forbid_reformulated_task.h	/^    virtual FactPair get_goal_fact(int index) const override;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
override	search/tasks/plan_forbid_reformulated_task.h	/^    virtual const GlobalOperator *get_global_operator(int index, bool is_axiom) const override;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
override	search/tasks/plan_forbid_reformulated_task.h	/^    virtual int get_num_goals() const override;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
override	search/tasks/plan_forbid_reformulated_task.h	/^    virtual int get_num_operator_effects(int op_index, bool is_axiom) const override;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
override	search/tasks/plan_forbid_reformulated_task.h	/^    virtual int get_num_operator_preconditions(int index, bool is_axiom) const override;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
override	search/tasks/plan_forbid_reformulated_task.h	/^    virtual int get_num_operators() const override;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
override	search/tasks/plan_forbid_reformulated_task.h	/^    virtual int get_num_variables() const override;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
override	search/tasks/plan_forbid_reformulated_task.h	/^    virtual int get_operator_cost(int index, bool is_axiom) const override;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
override	search/tasks/plan_forbid_reformulated_task.h	/^    virtual int get_variable_axiom_layer(int var) const override;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
override	search/tasks/plan_forbid_reformulated_task.h	/^    virtual int get_variable_default_axiom_value(int var) const override;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
override	search/tasks/plan_forbid_reformulated_task.h	/^    virtual int get_variable_domain_size(int var) const override;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
override	search/tasks/plan_forbid_reformulated_task.h	/^    virtual std::string get_fact_name(const FactPair &fact) const override;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
override	search/tasks/plan_forbid_reformulated_task.h	/^    virtual std::string get_operator_name(int index, bool is_axiom) const override;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
override	search/tasks/plan_forbid_reformulated_task.h	/^    virtual std::string get_variable_name(int var) const override;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
override	search/tasks/plan_forbid_reformulated_task.h	/^    virtual std::vector<int> get_initial_state_values() const override;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
override	search/tasks/plan_forbid_reformulated_task.h	/^    virtual ~PlanForbidReformulatedTask() override = default;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
override	search/tasks/root_task.h	/^        const AbstractTask *ancestor_task) const override;$/;"	m	class:tasks::RootTask
override	search/tasks/root_task.h	/^        const FactPair &fact1, const FactPair &fact2) const override;$/;"	m	class:tasks::RootTask
override	search/tasks/root_task.h	/^        int op_index, int eff_index, bool is_axiom) const override;$/;"	m	class:tasks::RootTask
override	search/tasks/root_task.h	/^        int op_index, int eff_index, int cond_index, bool is_axiom) const override;$/;"	m	class:tasks::RootTask
override	search/tasks/root_task.h	/^        int op_index, int fact_index, bool is_axiom) const override;$/;"	m	class:tasks::RootTask
override	search/tasks/root_task.h	/^    virtual FactPair get_goal_fact(int index) const override;$/;"	m	class:tasks::RootTask
override	search/tasks/root_task.h	/^    virtual const GlobalOperator *get_global_operator(int index, bool is_axiom) const override;$/;"	m	class:tasks::RootTask
override	search/tasks/root_task.h	/^    virtual int get_num_axioms() const override;$/;"	m	class:tasks::RootTask
override	search/tasks/root_task.h	/^    virtual int get_num_goals() const override;$/;"	m	class:tasks::RootTask
override	search/tasks/root_task.h	/^    virtual int get_num_operator_effects(int op_index, bool is_axiom) const override;$/;"	m	class:tasks::RootTask
override	search/tasks/root_task.h	/^    virtual int get_num_operator_preconditions(int index, bool is_axiom) const override;$/;"	m	class:tasks::RootTask
override	search/tasks/root_task.h	/^    virtual int get_num_operators() const override;$/;"	m	class:tasks::RootTask
override	search/tasks/root_task.h	/^    virtual int get_num_variables() const override;$/;"	m	class:tasks::RootTask
override	search/tasks/root_task.h	/^    virtual int get_operator_cost(int index, bool is_axiom) const override;$/;"	m	class:tasks::RootTask
override	search/tasks/root_task.h	/^    virtual int get_variable_axiom_layer(int var) const override;$/;"	m	class:tasks::RootTask
override	search/tasks/root_task.h	/^    virtual int get_variable_default_axiom_value(int var) const override;$/;"	m	class:tasks::RootTask
override	search/tasks/root_task.h	/^    virtual int get_variable_domain_size(int var) const override;$/;"	m	class:tasks::RootTask
override	search/tasks/root_task.h	/^    virtual std::string get_fact_name(const FactPair &fact) const override;$/;"	m	class:tasks::RootTask
override	search/tasks/root_task.h	/^    virtual std::string get_operator_name(int index, bool is_axiom) const override;$/;"	m	class:tasks::RootTask
override	search/tasks/root_task.h	/^    virtual std::string get_variable_name(int var) const override;$/;"	m	class:tasks::RootTask
override	search/tasks/root_task.h	/^    virtual std::vector<int> get_initial_state_values() const override;$/;"	m	class:tasks::RootTask
owner	search/heuristics/cea_heuristic.cc	/^    LocalProblem *owner;$/;"	m	struct:cea_heuristic::LocalProblemNode	file:
owner	search/per_state_information.h	/^        const PerStateInformation<Entry> &owner;$/;"	m	class:PerStateInformation::const_iterator
owns_right_child	search/cegar/refinement_hierarchy.h	/^    bool owns_right_child() const {$/;"	f	class:cegar::Node
p	search/bliss/graph.h	/^  Partition p;$/;"	m	class:bliss::AbstractGraph
pack_bins	search/algorithms/int_packer.cc	/^void IntPacker::pack_bins(const vector<int> &ranges) {$/;"	f	class:int_packer::IntPacker
pack_one_bin	search/algorithms/int_packer.cc	/^int IntPacker::pack_one_bin(const vector<int> &ranges,$/;"	f	class:int_packer::IntPacker
padding_bytes	search/search_node_info.cc	/^    sizeof(SearchNodeInfo) == info_bytes + padding_bytes,$/;"	v
padding_bytes	search/search_node_info.cc	/^static const int padding_bytes = info_bytes % pointer_bytes;$/;"	v	file:
parent	search/ext/tree.hh	/^		tree_node_<T> *parent;$/;"	m	class:tree_node_
parent	search/ext/tree.hh	/^iter tree<T, tree_node_allocator>::parent(iter position) $/;"	f	class:tree
parent	search/merge_and_shrink/merge_tree.h	/^    MergeTreeNode *parent;$/;"	m	struct:merge_and_shrink::MergeTreeNode
parent	search/tasks/delegating_task.h	/^    const std::shared_ptr<AbstractTask> parent;$/;"	m	class:tasks::DelegatingTask
parent_	search/ext/tree.hh	/^				tree_node *parent_;$/;"	m	class:tree::sibling_iterator
parent_graph	search/domain_transition_graph.h	/^    DomainTransitionGraph *parent_graph;$/;"	m	struct:ValueNode
parent_state_id	search/search_node_info.h	/^    StateID parent_state_id;$/;"	m	struct:SearchNodeInfo
parents	search/landmarks/landmark_graph.h	/^    std::unordered_map<LandmarkNode *, EdgeType> parents;$/;"	m	class:landmarks::EdgeType::LandmarkNode
parse	search/options/option_parser.cc	/^Options OptionParser::parse() {$/;"	f	class:options::OptionParser
parse	search/options/token_parser.h	/^inline ParseTree TokenParser<ParseTree>::parse(OptionParser &p) {$/;"	f	class:options::TokenParser
parse	search/options/token_parser.h	/^inline ScalarEvaluator *TokenParser<ScalarEvaluator *>::parse(OptionParser &p) {$/;"	f	class:options::TokenParser
parse	search/options/token_parser.h	/^inline T *TokenParser<T *>::parse(OptionParser &p) {$/;"	f	class:options::TokenParser
parse	search/options/token_parser.h	/^inline T TokenParser<T>::parse(OptionParser &p) {$/;"	f	class:options::TokenParser
parse	search/options/token_parser.h	/^inline double TokenParser<double>::parse(OptionParser &p) {$/;"	f	class:options::TokenParser
parse	search/options/token_parser.h	/^inline int TokenParser<int>::parse(OptionParser &p) {$/;"	f	class:options::TokenParser
parse	search/options/token_parser.h	/^inline std::shared_ptr<T> TokenParser<std::shared_ptr<T>>::parse(OptionParser &p) {$/;"	f	class:options::TokenParser
parse	search/options/token_parser.h	/^inline std::vector<T> TokenParser<std::vector<T>>::parse(OptionParser &p) {$/;"	f	class:options::TokenParser
parse_action	translate/pddl_parser/parsing_functions.py	/^def parse_action(alist, type_dict, predicate_dict):$/;"	f
parse_args	translate/options.py	/^def parse_args():$/;"	f
parse_assignment	translate/pddl_parser/parsing_functions.py	/^def parse_assignment(alist):$/;"	f
parse_axiom	translate/pddl_parser/parsing_functions.py	/^def parse_axiom(alist, type_dict, predicate_dict):$/;"	f
parse_cmd_line	search/options/option_parser.cc	/^SearchEngine *OptionParser::parse_cmd_line($/;"	f	class:options::OptionParser
parse_cmd_line_aux	search/options/option_parser.cc	/^SearchEngine *OptionParser::parse_cmd_line_aux($/;"	f	class:options::OptionParser
parse_condition	translate/pddl_parser/parsing_functions.py	/^def parse_condition(alist, type_dict, predicate_dict):$/;"	f
parse_condition_aux	translate/pddl_parser/parsing_functions.py	/^def parse_condition_aux(alist, negated, type_dict, predicate_dict):$/;"	f
parse_domain_pddl	translate/pddl_parser/parsing_functions.py	/^def parse_domain_pddl(domain_pddl):$/;"	f
parse_effect	translate/pddl_parser/parsing_functions.py	/^def parse_effect(alist, type_dict, predicate_dict):$/;"	f
parse_effects	translate/pddl_parser/parsing_functions.py	/^def parse_effects(alist, result, type_dict, predicate_dict):$/;"	f
parse_expression	translate/pddl_parser/parsing_functions.py	/^def parse_expression(exp):$/;"	f
parse_function	translate/pddl_parser/parsing_functions.py	/^def parse_function(alist, type_name):$/;"	f
parse_int_arg	search/options/option_parser.cc	/^int OptionParser::parse_int_arg(const string &name, const string &value) {$/;"	f	class:options::OptionParser
parse_list_aux	translate/pddl_parser/lisp_parser.py	/^def parse_list_aux(tokenstream):$/;"	f
parse_literal	translate/pddl_parser/parsing_functions.py	/^def parse_literal(alist, type_dict, predicate_dict, negated=False):$/;"	f
parse_nested_list	translate/pddl_parser/lisp_parser.py	/^def parse_nested_list(input_file):$/;"	f
parse_pddl_file	translate/pddl_parser/pddl_file.py	/^def parse_pddl_file(type, filename):$/;"	f
parse_predicate	translate/pddl_parser/parsing_functions.py	/^def parse_predicate(alist):$/;"	f
parse_rng_from_options	search/utils/rng_options.cc	/^shared_ptr<RandomNumberGenerator> parse_rng_from_options($/;"	f	namespace:utils
parse_task	translate/pddl_parser/parsing_functions.py	/^def parse_task(domain_pddl, task_pddl):$/;"	f
parse_task_pddl	translate/pddl_parser/parsing_functions.py	/^def parse_task_pddl(task_pddl, type_dict, predicate_dict):$/;"	f
parse_tree	search/options/errors.h	/^    ParseTree parse_tree;$/;"	m	struct:options::ParseError
parse_tree	search/options/option_parser.h	/^    const ParseTree parse_tree;$/;"	m	class:options::OptionParser
parse_typed_list	translate/pddl_parser/parsing_functions.py	/^def parse_typed_list(alist, only_variables=False,$/;"	f
partition_bt_point	search/bliss/graph.cc	/^  Partition::BacktrackPoint partition_bt_point;$/;"	m	class:bliss::TreeNode	file:
partition_into_buckets	search/merge_and_shrink/shrink_fh.cc	/^void ShrinkFH::partition_into_buckets($/;"	f	class:merge_and_shrink::ShrinkFH
partition_into_buckets	search/merge_and_shrink/shrink_random.cc	/^void ShrinkRandom::partition_into_buckets($/;"	f	class:merge_and_shrink::ShrinkRandom
parts	translate/pddl/conditions.py	/^    parts = ()$/;"	v	class:ConstantCondition
parts	translate/pddl/conditions.py	/^    parts = []$/;"	v	class:Literal
parts	translate/pddl/f_expression.py	/^    parts = ()$/;"	v	class:NumericConstant
parts	translate/pddl/f_expression.py	/^    parts = ()$/;"	v	class:PrimitiveNumericExpression
pass_bound	search/search_engines/iterated_search.h	/^    bool pass_bound;$/;"	m	class:iterated_search::IteratedSearch
pattern	search/pdbs/match_tree.h	/^    Pattern pattern;$/;"	m	class:pdbs::MatchTree
pattern	search/pdbs/pattern_database.h	/^    Pattern pattern;$/;"	m	class:pdbs::PatternDatabase
pattern	search/pdbs/pattern_generator_manual.h	/^    Pattern pattern;$/;"	m	class:pdbs::PatternGeneratorManual
pattern_collections	search/pdbs/pattern_collection_generator_genetic.h	/^    std::vector<std::vector<std::vector<bool>>> pattern_collections;$/;"	m	class:pdbs::PatternCollectionGeneratorGenetic
pattern_databases	search/pdbs/incremental_canonical_pdbs.h	/^    std::shared_ptr<PDBCollection> pattern_databases;$/;"	m	class:pdbs::IncrementalCanonicalPDBs
pattern_databases	search/pdbs/zero_one_pdbs.h	/^    PDBCollection pattern_databases;$/;"	m	class:pdbs::ZeroOnePDBs
pattern_generator	search/operator_counting/pho_constraints.h	/^    std::shared_ptr<pdbs::PatternCollectionGenerator> pattern_generator;$/;"	m	class:operator_counting::PhOConstraints
pattern_set	search/pdbs/pattern_collection_generator_systematic.h	/^    PatternSet pattern_set;  \/\/ Cleared after pattern computation.$/;"	m	class:pdbs::PatternCollectionGeneratorSystematic
patterns	search/pdbs/incremental_canonical_pdbs.h	/^    std::shared_ptr<PatternCollection> patterns;$/;"	m	class:pdbs::IncrementalCanonicalPDBs
patterns	search/pdbs/pattern_collection_generator_manual.h	/^    std::shared_ptr<PatternCollection> patterns;$/;"	m	class:pdbs::PatternCollectionGeneratorManual
patterns	search/pdbs/pattern_collection_generator_systematic.h	/^    std::shared_ptr<PatternCollection> patterns;$/;"	m	class:pdbs::PatternCollectionGeneratorSystematic
patterns	search/pdbs/pattern_collection_information.h	/^    std::shared_ptr<PatternCollection> patterns;$/;"	m	class:pdbs::PatternCollectionInformation
patterns_are_disjoint	search/pdbs/pattern_collection_generator_systematic.cc	/^static bool patterns_are_disjoint($/;"	f	namespace:pdbs
pc	search/landmarks/landmark_factory_h_m.h	/^    std::vector<int> pc;$/;"	m	struct:landmarks::PMOp
pc_for	search/landmarks/landmark_factory_h_m.h	/^    std::vector<FactPair> pc_for;$/;"	m	struct:landmarks::HMEntry
pdb	search/pdbs/pdb_heuristic.h	/^    PatternDatabase pdb;$/;"	m	class:pdbs::PDBHeuristic
pdb_max_size	search/pdbs/pattern_collection_generator_genetic.h	/^    const int pdb_max_size;$/;"	m	class:pdbs::PatternCollectionGeneratorGenetic
pdb_max_size	search/pdbs/pattern_collection_generator_hillclimbing.h	/^    const int pdb_max_size;$/;"	m	class:pdbs::PatternCollectionGeneratorHillclimbing
pdbs	search/operator_counting/pho_constraints.h	/^    std::shared_ptr<pdbs::PDBCollection> pdbs;$/;"	m	class:operator_counting::PhOConstraints
pdbs	search/operator_counting/pho_constraints.h	/^namespace pdbs {$/;"	n
pdbs	search/options/option_parser.cc	/^namespace pdbs {$/;"	n	file:
pdbs	search/pdbs/canonical_pdbs.cc	/^namespace pdbs {$/;"	n	file:
pdbs	search/pdbs/canonical_pdbs.h	/^namespace pdbs {$/;"	n
pdbs	search/pdbs/canonical_pdbs_heuristic.cc	/^namespace pdbs {$/;"	n	file:
pdbs	search/pdbs/canonical_pdbs_heuristic.h	/^namespace pdbs {$/;"	n
pdbs	search/pdbs/dominance_pruning.cc	/^namespace pdbs {$/;"	n	file:
pdbs	search/pdbs/dominance_pruning.h	/^namespace pdbs {$/;"	n
pdbs	search/pdbs/incremental_canonical_pdbs.cc	/^namespace pdbs {$/;"	n	file:
pdbs	search/pdbs/incremental_canonical_pdbs.h	/^namespace pdbs {$/;"	n
pdbs	search/pdbs/match_tree.cc	/^namespace pdbs {$/;"	n	file:
pdbs	search/pdbs/match_tree.h	/^namespace pdbs {$/;"	n
pdbs	search/pdbs/max_additive_pdb_sets.cc	/^namespace pdbs {$/;"	n	file:
pdbs	search/pdbs/max_additive_pdb_sets.h	/^namespace pdbs {$/;"	n
pdbs	search/pdbs/pattern_collection_generator_combo.cc	/^namespace pdbs {$/;"	n	file:
pdbs	search/pdbs/pattern_collection_generator_combo.h	/^namespace pdbs {$/;"	n
pdbs	search/pdbs/pattern_collection_generator_genetic.cc	/^namespace pdbs {$/;"	n	file:
pdbs	search/pdbs/pattern_collection_generator_genetic.h	/^namespace pdbs {$/;"	n
pdbs	search/pdbs/pattern_collection_generator_hillclimbing.cc	/^namespace pdbs {$/;"	n	file:
pdbs	search/pdbs/pattern_collection_generator_hillclimbing.h	/^namespace pdbs {$/;"	n
pdbs	search/pdbs/pattern_collection_generator_manual.cc	/^namespace pdbs {$/;"	n	file:
pdbs	search/pdbs/pattern_collection_generator_manual.h	/^namespace pdbs {$/;"	n
pdbs	search/pdbs/pattern_collection_generator_systematic.cc	/^namespace pdbs {$/;"	n	file:
pdbs	search/pdbs/pattern_collection_generator_systematic.h	/^namespace pdbs {$/;"	n
pdbs	search/pdbs/pattern_collection_information.cc	/^namespace pdbs {$/;"	n	file:
pdbs	search/pdbs/pattern_collection_information.h	/^    std::shared_ptr<PDBCollection> pdbs;$/;"	m	class:pdbs::PatternCollectionInformation
pdbs	search/pdbs/pattern_collection_information.h	/^namespace pdbs {$/;"	n
pdbs	search/pdbs/pattern_database.cc	/^namespace pdbs {$/;"	n	file:
pdbs	search/pdbs/pattern_database.h	/^namespace pdbs {$/;"	n
pdbs	search/pdbs/pattern_generator.cc	/^namespace pdbs {$/;"	n	file:
pdbs	search/pdbs/pattern_generator.h	/^namespace pdbs {$/;"	n
pdbs	search/pdbs/pattern_generator_greedy.cc	/^namespace pdbs {$/;"	n	file:
pdbs	search/pdbs/pattern_generator_greedy.h	/^namespace pdbs {$/;"	n
pdbs	search/pdbs/pattern_generator_manual.cc	/^namespace pdbs {$/;"	n	file:
pdbs	search/pdbs/pattern_generator_manual.h	/^namespace pdbs {$/;"	n
pdbs	search/pdbs/pdb_heuristic.cc	/^namespace pdbs {$/;"	n	file:
pdbs	search/pdbs/pdb_heuristic.h	/^namespace pdbs {$/;"	n
pdbs	search/pdbs/types.h	/^namespace pdbs {$/;"	n
pdbs	search/pdbs/validation.cc	/^namespace pdbs {$/;"	n	file:
pdbs	search/pdbs/validation.h	/^namespace pdbs {$/;"	n
pdbs	search/pdbs/zero_one_pdbs.cc	/^namespace pdbs {$/;"	n	file:
pdbs	search/pdbs/zero_one_pdbs.h	/^namespace pdbs {$/;"	n
pdbs	search/pdbs/zero_one_pdbs_heuristic.cc	/^namespace pdbs {$/;"	n	file:
pdbs	search/pdbs/zero_one_pdbs_heuristic.h	/^namespace pdbs {$/;"	n
pddl_to_sas	translate/translate.py	/^def pddl_to_sas(task):$/;"	f
permute	search/bliss/graph.cc	/^Digraph::permute(const std::vector<unsigned int>& perm) const$/;"	f	class:bliss::Digraph
permute	search/bliss/graph.cc	/^Digraph::permute(const unsigned int* const perm) const$/;"	f	class:bliss::Digraph
permute	search/bliss/graph.cc	/^Graph::permute(const std::vector<unsigned int>& perm) const$/;"	f	class:bliss::Graph
permute	search/bliss/graph.cc	/^Graph::permute(const unsigned int* perm) const$/;"	f	class:bliss::Graph
permute_state	search/state_registry.cc	/^GlobalState StateRegistry::permute_state(const GlobalState &state, const Permutation &permutation) {$/;"	f	class:StateRegistry
phase	search/search_engines/iterated_search.h	/^    int phase;$/;"	m	class:iterated_search::IteratedSearch
pick	search/cegar/split_selector.h	/^    const PickSplit pick;$/;"	m	class:cegar::SplitSelector
pick_split	search/cegar/cost_saturation.h	/^    const PickSplit pick_split;$/;"	m	class:cegar::CostSaturation
pick_split	search/cegar/split_selector.cc	/^const Split &SplitSelector::pick_split(const AbstractState &state,$/;"	f	class:cegar::SplitSelector
plan	search/search_engine.h	/^    Plan plan;$/;"	m	class:SearchEngine
plan_for_disj	search/landmarks/exploration.cc	/^bool Exploration::plan_for_disj($/;"	f	class:landmarks::Exploration
plan_graph_node	search/landmarks/landmark_factory_zhu_givan.h	/^    class plan_graph_node {$/;"	c	class:landmarks::LandmarkFactoryZhuGivan
plan_operators_indexes	search/tasks/plan_forbid_reformulated_task.h	/^	std::vector<int> plan_operators_indexes;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
plan_operators_indexes_by_parent_operator	search/tasks/plan_forbid_reformulated_task.h	/^	std::vector<std::vector<int>> plan_operators_indexes_by_parent_operator;$/;"	m	class:extra_tasks::PlanForbidReformulatedTask
pm_ops_	search/landmarks/landmark_factory_h_m.h	/^    std::vector<PMOp> pm_ops_;$/;"	m	class:landmarks::LandmarkFactoryHM
pointer	search/ext/tree.hh	/^				typedef T*                              pointer;$/;"	t	class:tree::iterator_base
pointer_bytes	search/search_node_info.cc	/^static const int pointer_bytes = sizeof(void *);$/;"	v	file:
pop	search/algorithms/priority_queues.h	/^    Entry pop() {$/;"	f	class:priority_queues::AdaptiveQueue
pop	search/algorithms/priority_queues.h	/^    virtual Entry pop() {$/;"	f	class:priority_queues::BucketQueue
pop	search/algorithms/priority_queues.h	/^    virtual Entry pop() {$/;"	f	class:priority_queues::HeapQueue
pop	search/bliss/kstack.h	/^  Type pop()$/;"	f	class:bliss::KStack
pop	translate/build_model.py	/^    def pop(self):$/;"	m	class:Queue
pop	translate/fact_groups.py	/^    def pop(self):$/;"	m	class:GroupCoverQueue
pop_as_vector	search/algorithms/ordered_set.h	/^    std::vector<T> pop_as_vector() {$/;"	f	class:ordered_set::OrderedSet
pop_back	search/algorithms/segmented_vector.h	/^    void pop_back() {$/;"	f	class:segmented_vector::SegmentedArrayVector
pop_back	search/algorithms/segmented_vector.h	/^    void pop_back() {$/;"	f	class:segmented_vector::SegmentedVector
pop_front	search/bliss/kqueue.h	/^Type KQueue<Type>::pop_front()$/;"	f	class:bliss::KQueue
popped_elements	translate/build_model.py	/^    def popped_elements(self):$/;"	m	class:Queue
pos	search/per_state_information.h	/^        StateID pos;$/;"	m	class:PerStateInformation::const_iterator
pos	search/task_proxy.h	/^    std::size_t pos;$/;"	m	class:ProxyIterator
positive	translate/pddl/conditions.py	/^    def positive(self):$/;"	m	class:Atom
positive	translate/pddl/conditions.py	/^    positive = negate$/;"	v	class:NegatedAtom
possible_achievers	search/landmarks/landmark_graph.h	/^    std::set<int> possible_achievers;$/;"	m	class:landmarks::EdgeType::LandmarkNode
possible_mappings	translate/invariants.py	/^    def possible_mappings(self, own_literal, other_literal):$/;"	m	class:InvariantPart
possible_matches	translate/invariants.py	/^    def possible_matches(self, own_literal, other_literal):$/;"	m	class:InvariantPart
possible_noop_set	search/landmarks/landmark_factory_h_m.cc	/^bool LandmarkFactoryHM::possible_noop_set(const VariablesProxy &variables,$/;"	f	class:landmarks::LandmarkFactoryHM
post_order_iterator	search/ext/tree.hh	/^		class post_order_iterator : public iterator_base {$/;"	c	class:tree
post_order_iterator	search/ext/tree.hh	/^tree<T, tree_node_allocator>::post_order_iterator::post_order_iterator() $/;"	f	class:tree::post_order_iterator
post_order_iterator	search/ext/tree.hh	/^tree<T, tree_node_allocator>::post_order_iterator::post_order_iterator(const iterator_base &other)$/;"	f	class:tree::post_order_iterator
post_order_iterator	search/ext/tree.hh	/^tree<T, tree_node_allocator>::post_order_iterator::post_order_iterator(const sibling_iterator& other)$/;"	f	class:tree::post_order_iterator
post_order_iterator	search/ext/tree.hh	/^tree<T, tree_node_allocator>::post_order_iterator::post_order_iterator(tree_node *tn)$/;"	f	class:tree::post_order_iterator
postconditions_by_operator	search/cegar/transition_updater.h	/^    std::vector<std::vector<FactPair>> postconditions_by_operator;$/;"	m	class:cegar::TransitionUpdater
potentials	search/potentials/diverse_potential_heuristics.cc	/^namespace potentials {$/;"	n	file:
potentials	search/potentials/diverse_potential_heuristics.h	/^namespace potentials {$/;"	n
potentials	search/potentials/potential_function.cc	/^namespace potentials {$/;"	n	file:
potentials	search/potentials/potential_function.h	/^namespace potentials {$/;"	n
potentials	search/potentials/potential_heuristic.cc	/^namespace potentials {$/;"	n	file:
potentials	search/potentials/potential_heuristic.h	/^namespace potentials {$/;"	n
potentials	search/potentials/potential_max_heuristic.cc	/^namespace potentials {$/;"	n	file:
potentials	search/potentials/potential_max_heuristic.h	/^namespace potentials {$/;"	n
potentials	search/potentials/potential_optimizer.cc	/^namespace potentials {$/;"	n	file:
potentials	search/potentials/potential_optimizer.h	/^namespace potentials {$/;"	n
potentials	search/potentials/sample_based_potential_heuristics.cc	/^namespace potentials {$/;"	n	file:
potentials	search/potentials/single_potential_heuristics.cc	/^namespace potentials {$/;"	n	file:
potentials	search/potentials/util.cc	/^namespace potentials {$/;"	n	file:
potentials	search/potentials/util.h	/^namespace potentials {$/;"	n
potentials_are_bounded	search/potentials/potential_optimizer.cc	/^bool PotentialOptimizer::potentials_are_bounded() const {$/;"	f	class:potentials::PotentialOptimizer
pre_eff_builder	search/causal_graph.cc	/^    IntRelationBuilder pre_eff_builder;$/;"	m	struct:CausalGraphBuilder	file:
pre_order_iterator	search/ext/tree.hh	/^		class pre_order_iterator : public iterator_base { $/;"	c	class:tree
pre_order_iterator	search/ext/tree.hh	/^tree<T, tree_node_allocator>::pre_order_iterator::pre_order_iterator() $/;"	f	class:tree::pre_order_iterator
pre_order_iterator	search/ext/tree.hh	/^tree<T, tree_node_allocator>::pre_order_iterator::pre_order_iterator(const iterator_base &other)$/;"	f	class:tree::pre_order_iterator
pre_order_iterator	search/ext/tree.hh	/^tree<T, tree_node_allocator>::pre_order_iterator::pre_order_iterator(const sibling_iterator& other)$/;"	f	class:tree::pre_order_iterator
pre_order_iterator	search/ext/tree.hh	/^tree<T, tree_node_allocator>::pre_order_iterator::pre_order_iterator(tree_node *tn)$/;"	f	class:tree::pre_order_iterator
pre_to_eff	search/causal_graph.h	/^    IntRelation pre_to_eff;$/;"	m	class:CausalGraph
precond	search/domain_transition_graph.h	/^    std::vector<LocalAssignment> precond;$/;"	m	struct:ValueTransitionLabel
precondition	search/heuristics/relaxation_heuristic.h	/^    std::vector<Proposition *> precondition;$/;"	m	struct:relaxation_heuristic::UnaryOperator
precondition	search/landmarks/exploration.h	/^    std::vector<ExProposition *> precondition;$/;"	m	struct:landmarks::ExUnaryOperator
precondition_of	search/heuristics/lm_cut_landmarks.h	/^    std::vector<RelaxedOperator *> precondition_of;$/;"	m	struct:lm_cut_heuristic::RelaxedProposition
precondition_of	search/heuristics/relaxation_heuristic.h	/^    std::vector<UnaryOperator *> precondition_of;$/;"	m	struct:relaxation_heuristic::Proposition
precondition_of	search/landmarks/exploration.h	/^    std::vector<ExUnaryOperator *> precondition_of;$/;"	m	struct:landmarks::ExProposition
preconditions	search/global_operator.h	/^    std::vector<GlobalCondition> preconditions;$/;"	m	class:GlobalOperator
preconditions	search/heuristics/lm_cut_landmarks.h	/^    std::vector<RelaxedProposition *> preconditions;$/;"	m	struct:lm_cut_heuristic::RelaxedOperator
preconditions_by_operator	search/cegar/transition_updater.h	/^    std::vector<std::vector<FactPair>> preconditions_by_operator;$/;"	m	class:cegar::TransitionUpdater
pred_builder	search/causal_graph.cc	/^    IntRelationBuilder pred_builder;$/;"	m	struct:CausalGraphBuilder	file:
predecessors	search/causal_graph.h	/^    IntRelation predecessors;$/;"	m	class:CausalGraph
predefine	search/options/predefinitions.h	/^    void predefine(std::string k, T obj) {$/;"	f	class:options::Predefinitions
predefine_heuristic	search/options/option_parser.cc	/^static void predefine_heuristic(string s, bool dry_run) {$/;"	f	namespace:options
predefine_lmgraph	search/options/option_parser.cc	/^static void predefine_lmgraph(string s, bool dry_run) {$/;"	f	namespace:options
predefine_symmetries	search/options/option_parser.cc	/^static void predefine_symmetries(std::string s, bool dry_run) {$/;"	f	namespace:options
predefined	search/options/predefinitions.h	/^    std::map<std::string, T> predefined;$/;"	m	class:options::Predefinitions
predicate_name_generator	translate/pddl_to_prolog.py	/^        def predicate_name_generator():$/;"	f	function:PrologProgram.__init__
pref_evaluator	search/evaluators/pref_evaluator.cc	/^namespace pref_evaluator {$/;"	n	file:
pref_evaluator	search/evaluators/pref_evaluator.h	/^namespace pref_evaluator {$/;"	n
preferred	search/evaluation_context.h	/^    bool preferred;$/;"	m	class:EvaluationContext
preferred_operator_heuristics	search/search_engines/eager_search.h	/^    std::vector<Heuristic *> preferred_operator_heuristics;$/;"	m	class:eager_search::EagerSearch
preferred_operator_heuristics	search/search_engines/enforced_hill_climbing_search.h	/^    std::vector<Heuristic *> preferred_operator_heuristics;$/;"	m	class:enforced_hill_climbing_search::EnforcedHillClimbingSearch
preferred_operator_heuristics	search/search_engines/lazy_search.h	/^    std::vector<Heuristic *> preferred_operator_heuristics;$/;"	m	class:lazy_search::LazySearch
preferred_operator_heuristics	search/search_engines/top_k_eager_search.h	/^    std::vector<Heuristic *> preferred_operator_heuristics;$/;"	m	class:top_k_eager_search::TopKEagerSearch
preferred_operators	search/evaluation_result.h	/^    std::vector<const GlobalOperator *> preferred_operators;$/;"	m	class:EvaluationResult
preferred_operators	search/heuristic.h	/^    ordered_set::OrderedSet<const GlobalOperator *> preferred_operators;$/;"	m	class:Heuristic
preferred_successors_first	search/search_engines/lazy_search.h	/^    bool preferred_successors_first;$/;"	m	class:lazy_search::LazySearch
preferred_usage	search/search_engines/enforced_hill_climbing_search.h	/^    PreferredUsage preferred_usage;$/;"	m	class:enforced_hill_climbing_search::EnforcedHillClimbingSearch
prepare_effect	translate/build_model.py	/^    def prepare_effect(self, new_atom, cond_index):$/;"	m	class:BuildRule
prepare_heuristic_computation	search/landmarks/exploration.cc	/^void Exploration::prepare_heuristic_computation(const State &state) {$/;"	f	class:landmarks::Exploration
prepare_parser_for_admissible_potentials	search/potentials/util.cc	/^void prepare_parser_for_admissible_potentials(OptionParser &parser) {$/;"	f	namespace:potentials
prepend_child	search/ext/tree.hh	/^iter tree<T, tree_node_allocator>::prepend_child(iter position)$/;"	f	class:tree
prepend_child	search/ext/tree.hh	/^iter tree<T, tree_node_allocator>::prepend_child(iter position, const T& x)$/;"	f	class:tree
prepend_child	search/ext/tree.hh	/^iter tree<T, tree_node_allocator>::prepend_child(iter position, iter other)$/;"	f	class:tree
prepend_children	search/ext/tree.hh	/^iter tree<T, tree_node_allocator>::prepend_children(iter position, sibling_iterator from, sibling_iterator to)$/;"	f	class:tree
prev	search/bliss/partition.h	/^    Cell* prev;$/;"	m	class:bliss::Partition::Cell
prev_next_ptr	search/bliss/partition.h	/^    CRCell** prev_next_ptr;$/;"	m	class:bliss::Partition::CRCell
prev_nonsingleton	search/bliss/partition.h	/^    Cell* prev_nonsingleton;$/;"	m	class:bliss::Partition::Cell
prev_nonsingleton_first	search/bliss/partition.h	/^    int prev_nonsingleton_first;$/;"	m	class:bliss::Partition::RefInfo
prev_sibling	search/ext/tree.hh	/^		tree_node_<T> *prev_sibling, *next_sibling;$/;"	m	class:tree_node_
previous_sibling	search/ext/tree.hh	/^iter tree<T, tree_node_allocator>::previous_sibling(iter position) const$/;"	f	class:tree
print	search/bliss/bignum.h	/^  size_t print(FILE* const fp) const {return mpz_out_str(fp, 10, v); }$/;"	f	class:bliss::BigNum
print	search/bliss/graph.h	/^  size_t print(FILE* const fp) const$/;"	f	class:bliss::Stats
print	search/bliss/partition.cc	/^Partition::print(FILE* const fp, const bool add_newline) const$/;"	f	class:bliss::Partition
print_affected_variables_by_cycles	search/structural_symmetries/permutation.cc	/^void Permutation::print_affected_variables_by_cycles() const {$/;"	f	class:Permutation
print_all	search/options/doc_printer.cc	/^void DocPrinter::print_all() {$/;"	f	class:options::DocPrinter
print_all	search/options/doc_printer.h	/^    bool print_all; \/\/if this is false, notes, properties and language_features are omitted$/;"	m	class:options::PlainPrinter
print_arguments	search/options/doc_printer.cc	/^void PlainPrinter::print_arguments(const DocStruct &info) {$/;"	f	class:options::PlainPrinter
print_arguments	search/options/doc_printer.cc	/^void Txt2TagsPrinter::print_arguments(const DocStruct &info) {$/;"	f	class:options::Txt2TagsPrinter
print_basic_statistics	search/search_statistics.cc	/^void SearchStatistics::print_basic_statistics() const {$/;"	f	class:SearchStatistics
print_category	search/options/doc_printer.cc	/^void DocPrinter::print_category(string category_name) {$/;"	f	class:options::DocPrinter
print_category_footer	search/options/doc_printer.cc	/^void PlainPrinter::print_category_footer() {$/;"	f	class:options::PlainPrinter
print_category_footer	search/options/doc_printer.cc	/^void Txt2TagsPrinter::print_category_footer() {$/;"	f	class:options::Txt2TagsPrinter
print_category_header	search/options/doc_printer.cc	/^void PlainPrinter::print_category_header(string category_name) {$/;"	f	class:options::PlainPrinter
print_category_header	search/options/doc_printer.cc	/^void Txt2TagsPrinter::print_category_header(string category_name) {$/;"	f	class:options::Txt2TagsPrinter
print_checkpoint_line	search/search_engines/eager_search.cc	/^void EagerSearch::print_checkpoint_line(int g) const {$/;"	f	class:eager_search::EagerSearch
print_checkpoint_line	search/search_engines/lazy_search.cc	/^void LazySearch::print_checkpoint_line(int g) const {$/;"	f	class:lazy_search::LazySearch
print_checkpoint_line	search/search_engines/top_k_eager_search.cc	/^void TopKEagerSearch::print_checkpoint_line(int g) const {$/;"	f	class:top_k_eager_search::TopKEagerSearch
print_cycle_notation	search/structural_symmetries/permutation.cc	/^void Permutation::print_cycle_notation() const {$/;"	f	class:Permutation
print_detailed_statistics	search/search_statistics.cc	/^void SearchStatistics::print_detailed_statistics() const {$/;"	f	class:SearchStatistics
print_element	search/options/doc_printer.cc	/^void DocPrinter::print_element(string call_name, const DocStruct &info) {$/;"	f	class:options::DocPrinter
print_f_line	search/search_statistics.cc	/^void SearchStatistics::print_f_line() const {$/;"	f	class:SearchStatistics
print_fluentset	search/landmarks/landmark_factory_h_m.cc	/^void LandmarkFactoryHM::print_fluentset(const VariablesProxy &variables, const FluentSet &fs) {$/;"	f	class:landmarks::LandmarkFactoryHM
print_goal	search/utils/util.h	/^inline void print_goal()$/;"	f
print_in_blue	search/utils/util.h	/^inline void print_in_blue(string str)$/;"	f
print_in_green	search/utils/util.h	/^inline void print_in_green(string str)$/;"	f
print_in_red	search/utils/util.h	/^inline void print_in_red(string str) $/;"	f
print_initial_h_values	search/search_engine.cc	/^void print_initial_h_values(const EvaluationContext &eval_context) {$/;"	f
print_language_features	search/options/doc_printer.cc	/^void PlainPrinter::print_language_features(const DocStruct &info) {$/;"	f	class:options::PlainPrinter
print_language_features	search/options/doc_printer.cc	/^void Txt2TagsPrinter::print_language_features(const DocStruct &info) {$/;"	f	class:options::Txt2TagsPrinter
print_nested_list	translate/pddl_parser/pretty_print.py	/^def print_nested_list(nested_list):$/;"	f
print_notes	search/options/doc_printer.cc	/^void PlainPrinter::print_notes(const DocStruct &info) {$/;"	f	class:options::PlainPrinter
print_notes	search/options/doc_printer.cc	/^void Txt2TagsPrinter::print_notes(const DocStruct &info) {$/;"	f	class:options::Txt2TagsPrinter
print_peak_memory_reentrant	search/utils/system_unix.cc	/^void print_peak_memory_reentrant() {$/;"	f	namespace:utils
print_permutation	search/bliss/utils.cc	/^print_permutation(FILE* const fp,$/;"	f	namespace:bliss
print_plan	search/search_engines/top_k_eager_search.cc	/^void TopKEagerSearch::print_plan(Plan plan,$/;"	f	class:top_k_eager_search::TopKEagerSearch
print_pm_op	search/landmarks/landmark_factory_h_m.cc	/^void LandmarkFactoryHM::print_pm_op(const VariablesProxy &variables, const PMOp &op) {$/;"	f	class:landmarks::LandmarkFactoryHM
print_properties	search/options/doc_printer.cc	/^void PlainPrinter::print_properties(const DocStruct &info) {$/;"	f	class:options::PlainPrinter
print_properties	search/options/doc_printer.cc	/^void Txt2TagsPrinter::print_properties(const DocStruct &info) {$/;"	f	class:options::Txt2TagsPrinter
print_proposition	search/landmarks/landmark_factory_h_m.cc	/^void LandmarkFactoryHM::print_proposition(const VariablesProxy &variables, const FactPair &fluent) const {$/;"	f	class:landmarks::LandmarkFactoryHM
print_set	search/utils/util.h	/^void print_set(std::set<T> set)$/;"	f
print_set_of_operators	search/utils/util.h	/^inline void print_set_of_operators(vector<GlobalOperator>& ops, string description)$/;"	f
print_set_of_operators	search/utils/util.h	/^inline void print_set_of_operators(vector<const GlobalOperator*>& ops, string description)$/;"	f
print_signature	search/bliss/partition.cc	/^Partition::print_signature(FILE* const fp, const bool add_newline) const$/;"	f	class:bliss::Partition
print_state	search/utils/util.h	/^inline void print_state(const GlobalState& s, std::string description)$/;"	f
print_statistics	search/cegar/abstraction.cc	/^void Abstraction::print_statistics() {$/;"	f	class:cegar::Abstraction
print_statistics	search/cegar/cost_saturation.cc	/^void CostSaturation::print_statistics() const {$/;"	f	class:cegar::CostSaturation
print_statistics	search/lp/lp_solver.cc	/^void LPSolver::print_statistics() const {$/;"	f	class:lp::LPSolver
print_statistics	search/pruning/stubborn_sets.cc	/^void StubbornSets::print_statistics() const {$/;"	f	class:stubborn_sets::StubbornSets
print_statistics	search/search_engine.cc	/^void SearchEngine::print_statistics() const {$/;"	f	class:SearchEngine
print_statistics	search/search_engines/eager_search.cc	/^void EagerSearch::print_statistics() const {$/;"	f	class:eager_search::EagerSearch
print_statistics	search/search_engines/enforced_hill_climbing_search.cc	/^void EnforcedHillClimbingSearch::print_statistics() const {$/;"	f	class:enforced_hill_climbing_search::EnforcedHillClimbingSearch
print_statistics	search/search_engines/iterated_search.cc	/^void IteratedSearch::print_statistics() const {$/;"	f	class:iterated_search::IteratedSearch
print_statistics	search/search_engines/lazy_search.cc	/^void LazySearch::print_statistics() const {$/;"	f	class:lazy_search::LazySearch
print_statistics	search/search_engines/top_k_eager_search.cc	/^void TopKEagerSearch::print_statistics() const {$/;"	f	class:top_k_eager_search::TopKEagerSearch
print_statistics	search/search_space.cc	/^void SearchSpace::print_statistics() const {$/;"	f	class:SearchSpace
print_subtree_bracketed	search/ext/tree_util.hh	/^void print_subtree_bracketed(const tree<T>& t, typename tree<T>::iterator iRoot, std::ostream& str) $/;"	f	namespace:kptree
print_synopsis	search/options/doc_printer.cc	/^void PlainPrinter::print_synopsis(const DocStruct &info) {$/;"	f	class:options::PlainPrinter
print_synopsis	search/options/doc_printer.cc	/^void Txt2TagsPrinter::print_synopsis(const DocStruct &info) {$/;"	f	class:options::Txt2TagsPrinter
print_time	search/merge_and_shrink/merge_and_shrink_heuristic.cc	/^static void print_time(const utils::Timer &timer, string text) {$/;"	f	namespace:merge_and_shrink
print_trace_message	search/utils/logging.cc	/^void MemoryTracer::print_trace_message(const string &msg) {$/;"	f	class:utils::MemoryTracer
print_tree_bracketed	search/ext/tree_util.hh	/^void print_tree_bracketed(const tree<T>& t, std::ostream& str) $/;"	f	namespace:kptree
print_usage	search/options/doc_printer.cc	/^void PlainPrinter::print_usage(string call_name, const DocStruct &info) {$/;"	f	class:options::PlainPrinter
print_usage	search/options/doc_printer.cc	/^void Txt2TagsPrinter::print_usage(string call_name, const DocStruct &info) {$/;"	f	class:options::Txt2TagsPrinter
print_value	search/utils/util.h	/^void print_value(T var, string s , const char* func, int line) {$/;"	f
prio_queues	search/heuristics/cg_heuristic.h	/^    std::vector<priority_queues::AdaptiveQueue<ValueNode *> *> prio_queues;$/;"	m	class:cg_heuristic::CGHeuristic
priorities	search/open_lists/alternation_open_list.cc	/^    vector<int> priorities;$/;"	m	class:AlternationOpenList	file:
priority_queue	search/heuristics/lm_cut_landmarks.h	/^    priority_queues::AdaptiveQueue<RelaxedProposition *> priority_queue;$/;"	m	class:lm_cut_heuristic::LandmarkCutLandmarks
priority_queues	search/algorithms/priority_queues.h	/^namespace priority_queues {$/;"	n
process_effect	search/domain_transition_graph.cc	/^void DTGFactory::process_effect(const EffectProxy &eff, const OperatorProxy &op,$/;"	f	class:DTGFactory
process_heuristic_value	search/search_progress.cc	/^bool SearchProgress::process_heuristic_value(const Heuristic *heuristic, int h) {$/;"	f	class:SearchProgress
product_ts_order	search/merge_and_shrink/merge_scoring_function_total_order.h	/^    ProductTSOrder product_ts_order;$/;"	m	class:merge_and_shrink::MergeScoringFunctionTotalOrder
prog	translate/build_model.py	/^    prog = pddl_to_prolog.translate(task)$/;"	v
prog	translate/pddl_to_prolog.py	/^    prog = translate(task)$/;"	v
project_rule	translate/split_rules.py	/^def project_rule(rule, conditions, name_generator):$/;"	f
prop_queue	search/landmarks/exploration.h	/^    priority_queues::AdaptiveQueue<ExProposition *> prop_queue;$/;"	m	class:landmarks::Exploration
propagate_pm_fact	search/landmarks/landmark_factory_h_m.cc	/^void LandmarkFactoryHM::propagate_pm_fact(int factindex, bool newly_discovered,$/;"	f	class:landmarks::LandmarkFactoryHM
property	search/options/doc_store.h	/^    std::string property;$/;"	m	struct:options::PropertyInfo
property_help	search/options/doc_store.h	/^    std::vector<PropertyInfo> property_help;$/;"	m	struct:options::DocStruct
propositions	search/heuristics/lm_cut_landmarks.h	/^    std::vector<std::vector<RelaxedProposition>> propositions;$/;"	m	class:lm_cut_heuristic::LandmarkCutLandmarks
propositions	search/heuristics/relaxation_heuristic.h	/^    std::vector<std::vector<Proposition>> propositions;$/;"	m	class:relaxation_heuristic::RelaxationHeuristic
propositions	search/landmarks/exploration.h	/^    std::vector<std::vector<ExProposition>> propositions;$/;"	m	class:landmarks::Exploration
propositions	search/operator_counting/state_equation_constraints.h	/^    std::vector<std::vector<Proposition>> propositions;$/;"	m	class:operator_counting::StateEquationConstraints
prune_dominated_subsets	search/pdbs/dominance_pruning.cc	/^shared_ptr<MaxAdditivePDBSubsets> prune_dominated_subsets($/;"	f	namespace:pdbs
prune_operators	search/pruning/stubborn_sets.cc	/^void StubbornSets::prune_operators($/;"	f	class:stubborn_sets::StubbornSets
prune_operators	search/pruning_method.cc	/^void PruningMethod::prune_operators(const GlobalState &global_state,$/;"	f	class:PruningMethod
prune_stupid_effect_conditions	translate/translate.py	/^def prune_stupid_effect_conditions(var, val, conditions):$/;"	f
pruning_condition	search/domain_transition_graph.h	/^    std::function<bool(int, int)> pruning_condition;$/;"	m	class:DTGFactory
pruning_method	search/search_engines/eager_search.h	/^    std::shared_ptr<PruningMethod> pruning_method;$/;"	m	class:eager_search::EagerSearch
pruning_method	search/search_engines/top_k_eager_search.h	/^    std::shared_ptr<PruningMethod> pruning_method;$/;"	m	class:top_k_eager_search::TopKEagerSearch
push	search/algorithms/priority_queues.h	/^    virtual void push(int key, const Value &value) {$/;"	f	class:priority_queues::BucketQueue
push	search/algorithms/priority_queues.h	/^    virtual void push(int key, const Value &value) {$/;"	f	class:priority_queues::HeapQueue
push	search/algorithms/priority_queues.h	/^    void push(int key, const Value &value) {$/;"	f	class:priority_queues::AdaptiveQueue
push	search/bliss/kstack.h	/^  void push(Type e)$/;"	f	class:bliss::KStack
push	translate/build_model.py	/^    def push(self, predicate, args):$/;"	m	class:Queue
push_back	search/algorithms/segmented_vector.h	/^    void push_back(const Element *entry) {$/;"	f	class:segmented_vector::SegmentedArrayVector
push_back	search/algorithms/segmented_vector.h	/^    void push_back(const Entry &entry) {$/;"	f	class:segmented_vector::SegmentedVector
push_back	search/bliss/kqueue.h	/^void KQueue<Type>::push_back(Type e)$/;"	f	class:bliss::KQueue
push_front	search/bliss/kqueue.h	/^void KQueue<Type>::push_front(Type e)$/;"	f	class:bliss::KQueue
python_version_supported	translate/translate.py	/^def python_version_supported():$/;"	f
queue	search/axioms.h	/^    std::vector<AxiomLiteral *> queue;$/;"	m	class:AxiomEvaluator
queue	search/heuristics/additive_heuristic.h	/^    priority_queues::AdaptiveQueue<Proposition *> queue;$/;"	m	class:additive_heuristic::AdditiveHeuristic
queue	search/heuristics/max_heuristic.h	/^    priority_queues::AdaptiveQueue<Proposition *> queue;$/;"	m	class:max_heuristic::HSPMaxHeuristic
queue_djkstra	search/search_engines/kstar.h	/^	priority_queues::AdaptiveQueue<top_k_eager_search::StateActionPair> queue_djkstra;$/;"	m	class:kstar::KStar
random_seed	search/merge_and_shrink/merge_scoring_function_single_random.h	/^    int random_seed; \/\/ only for dump options$/;"	m	class:merge_and_shrink::MergeScoringFunctionSingleRandom
random_seed	search/merge_and_shrink/merge_scoring_function_total_order.h	/^    int random_seed; \/\/ only for dump options$/;"	m	class:merge_and_shrink::MergeScoringFunctionTotalOrder
randomize_successors	search/search_engines/lazy_search.h	/^    bool randomize_successors;$/;"	m	class:lazy_search::LazySearch
range	search/algorithms/int_packer.cc	/^    int range;$/;"	m	class:int_packer::IntPacker::VariableInfo	file:
range_first	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::tree_node *tree<T, tree_node_allocator>::sibling_iterator::range_first() const$/;"	f	class:tree::sibling_iterator
range_last	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::tree_node *tree<T, tree_node_allocator>::sibling_iterator::range_last() const$/;"	f	class:tree::sibling_iterator
rate_split	search/cegar/split_selector.cc	/^double SplitSelector::rate_split(const AbstractState &state, const Split &split) const {$/;"	f	class:cegar::SplitSelector
reach_state	search/search_engines/enforced_hill_climbing_search.cc	/^void EnforcedHillClimbingSearch::reach_state($/;"	f	class:enforced_hill_climbing_search::EnforcedHillClimbingSearch
reachability_map	search/pruning/stubborn_sets_ec.h	/^    std::vector<std::vector<std::vector<bool>>> reachability_map;$/;"	m	class:stubborn_sets_ec::StubbornSetsEC
reachable	translate/simplify.py	/^    def reachable(self):$/;"	m	class:DomainTransitionGraph
reached	search/landmarks/landmark_factory_zhu_givan.h	/^        inline bool reached() const {$/;"	f	class:landmarks::LandmarkFactoryZhuGivan::plan_graph_node
reached_by	search/domain_transition_graph.h	/^    ValueTransitionLabel *reached_by;$/;"	m	struct:ValueNode
reached_by	search/heuristics/cea_heuristic.cc	/^    LocalTransition *reached_by;$/;"	m	struct:cea_heuristic::LocalProblemNode	file:
reached_by	search/heuristics/relaxation_heuristic.h	/^    UnaryOperator *reached_by;$/;"	m	struct:relaxation_heuristic::Proposition
reached_by	search/landmarks/exploration.h	/^    ExUnaryOperator *reached_by;$/;"	m	struct:landmarks::ExProposition
reached_cost	search/landmarks/landmark_graph.h	/^    int reached_cost;$/;"	m	class:landmarks::EdgeType::LandmarkGraph
reached_from	search/domain_transition_graph.h	/^    ValueNode *reached_from;$/;"	m	struct:ValueNode
reached_lms	search/landmarks/landmark_status_manager.h	/^    PerStateInformation<std::vector<bool>> reached_lms;$/;"	m	class:landmarks::LandmarkStatusManager
read_and_verify_version	search/globals.cc	/^void read_and_verify_version(istream &in) {$/;"	f
read_axioms	search/globals.cc	/^void read_axioms(istream &in) {$/;"	f
read_char_reentrant	search/utils/system_unix.cc	/^bool read_char_reentrant(int filedescr, char *c) {$/;"	f	namespace:utils
read_dimacs	search/bliss/graph.cc	/^Digraph::read_dimacs(FILE* const fp, FILE* const errstr)$/;"	f	class:bliss::Digraph
read_dimacs	search/bliss/graph.cc	/^Graph::read_dimacs(FILE* const fp, FILE* const errstr)$/;"	f	class:bliss::Graph
read_everything	search/globals.cc	/^void read_everything(istream &in) {$/;"	f
read_goal	search/globals.cc	/^void read_goal(istream &in) {$/;"	f
read_mask	search/algorithms/int_packer.cc	/^    Bin read_mask;$/;"	m	class:int_packer::IntPacker::VariableInfo	file:
read_metric	search/globals.cc	/^void read_metric(istream &in) {$/;"	f
read_mutexes	search/globals.cc	/^void read_mutexes(istream &in) {$/;"	f
read_operators	search/globals.cc	/^void read_operators(istream &in) {$/;"	f
read_pre_post	search/global_operator.cc	/^void GlobalOperator::read_pre_post(istream &in) {$/;"	f	class:GlobalOperator
read_variables	search/globals.cc	/^void read_variables(istream &in) {$/;"	f
real_g	search/search_node_info.h	/^    int real_g;$/;"	m	struct:SearchNodeInfo
reasonable	search/landmarks/landmark_graph.h	/^    reasonable = 1,$/;"	m	class:landmarks::EdgeType
reasonable_orders	search/landmarks/landmark_factory.h	/^    const bool reasonable_orders;$/;"	m	class:landmarks::LandmarkFactory
recompute_max_additive_subsets	search/pdbs/incremental_canonical_pdbs.cc	/^void IncrementalCanonicalPDBs::recompute_max_additive_subsets() {$/;"	f	class:pdbs::IncrementalCanonicalPDBs
recurse	translate/normalize.py	/^    def recurse(condition):$/;"	f	function:build_DNF
recurse	translate/normalize.py	/^    def recurse(condition):$/;"	f	function:move_existential_quantifiers
recurse	translate/normalize.py	/^    def recurse(condition):$/;"	f	function:remove_universal_quantifiers
recurse_forwards	search/pruning/stubborn_sets_ec.cc	/^void recurse_forwards(const StubbornDTG &dtg,$/;"	f	namespace:stubborn_sets_ec
reduce	search/merge_and_shrink/label_reduction.cc	/^bool LabelReduction::reduce($/;"	f	class:merge_and_shrink::LabelReduction
reduce_before_merging	search/merge_and_shrink/label_reduction.h	/^    bool reduce_before_merging() const {$/;"	f	class:merge_and_shrink::LabelReduction
reduce_before_shrinking	search/merge_and_shrink/label_reduction.h	/^    bool reduce_before_shrinking() const {$/;"	f	class:merge_and_shrink::LabelReduction
reduce_labels	search/merge_and_shrink/labels.cc	/^void Labels::reduce_labels(const vector<int> &old_label_nos) {$/;"	f	class:merge_and_shrink::Labels
reduce_remaining_costs	search/cegar/cost_saturation.cc	/^void CostSaturation::reduce_remaining_costs($/;"	f	class:cegar::CostSaturation
reference	search/ext/tree.hh	/^				typedef T&                              reference;$/;"	t	class:tree::iterator_base
refine	search/algorithms/equivalence_relation.cc	/^void EquivalenceRelation::refine(ElementListConstIter block_X_begin,$/;"	f	class:equivalence_relation::EquivalenceRelation
refine	search/algorithms/equivalence_relation.cc	/^void EquivalenceRelation::refine(const Block &block_X) {$/;"	f	class:equivalence_relation::EquivalenceRelation
refine	search/algorithms/equivalence_relation.cc	/^void EquivalenceRelation::refine(const EquivalenceRelation &other) {$/;"	f	class:equivalence_relation::EquivalenceRelation
refine	search/cegar/abstraction.cc	/^void Abstraction::refine(AbstractState *state, int var, const vector<int> &wanted) {$/;"	f	class:cegar::Abstraction
refine_according_to_invariant	search/bliss/graph.cc	/^Digraph::refine_according_to_invariant(unsigned int (*inv)(const Digraph* const g,$/;"	f	class:bliss::Digraph
refine_according_to_invariant	search/bliss/graph.cc	/^Graph::refine_according_to_invariant(unsigned int (*inv)(const Graph* const g,$/;"	f	class:bliss::Graph
refine_best_path_subcertificate_end	search/bliss/graph.h	/^  unsigned int refine_best_path_subcertificate_end;$/;"	m	class:bliss::AbstractGraph
refine_candidate	translate/invariants.py	/^    def refine_candidate(self, add_effect, action, enqueue_func):$/;"	m	class:Invariant
refine_cmp_to_best	search/bliss/graph.h	/^  int refine_cmp_to_best;$/;"	m	class:bliss::AbstractGraph
refine_compare_certificate	search/bliss/graph.h	/^  bool refine_compare_certificate;$/;"	m	class:bliss::AbstractGraph
refine_current_path_certificate_index	search/bliss/graph.h	/^  unsigned int refine_current_path_certificate_index;$/;"	m	class:bliss::AbstractGraph
refine_equal_to_first	search/bliss/graph.h	/^  bool refine_equal_to_first;$/;"	m	class:bliss::AbstractGraph
refine_first_path_subcertificate_end	search/bliss/graph.h	/^  unsigned int refine_first_path_subcertificate_end;$/;"	m	class:bliss::AbstractGraph
refine_to_equitable	search/bliss/graph.cc	/^AbstractGraph::refine_to_equitable()$/;"	f	class:bliss::AbstractGraph
refine_to_equitable	search/bliss/graph.cc	/^AbstractGraph::refine_to_equitable(Partition::Cell* const unit_cell)$/;"	f	class:bliss::AbstractGraph
refine_to_equitable	search/bliss/graph.cc	/^AbstractGraph::refine_to_equitable(Partition::Cell* const unit_cell1,$/;"	f	class:bliss::AbstractGraph
refinement_hierarchy	search/cegar/abstraction.h	/^    RefinementHierarchy refinement_hierarchy;$/;"	m	class:cegar::Abstraction
refinement_hierarchy	search/cegar/cartesian_heuristic_function.h	/^    RefinementHierarchy refinement_hierarchy;$/;"	m	class:cegar::CartesianHeuristicFunction
refinement_stack	search/bliss/partition.h	/^  KStack<RefInfo> refinement_stack;$/;"	m	class:bliss::Partition
refinement_stack_size	search/bliss/partition.h	/^    unsigned int refinement_stack_size;$/;"	m	class:bliss::Partition::BacktrackInfo
register_event_handlers	search/utils/system_unix.cc	/^void register_event_handlers() {$/;"	f	namespace:utils
register_event_handlers	search/utils/system_windows.cc	/^void register_event_handlers() {$/;"	f	namespace:utils
register_literals	translate/axiom_rules.py	/^    def register_literals(literals, negated):$/;"	f	function:compute_necessary_axiom_literals
register_object	search/options/doc_store.cc	/^void DocStore::register_object(string k, string type) {$/;"	f	class:options::DocStore
register_owner	translate/normalize.py	/^    def register_owner(self, task):$/;"	m	class:AxiomConditionProxy
register_owner	translate/normalize.py	/^    def register_owner(self, task):$/;"	m	class:EffectConditionProxy
register_owner	translate/normalize.py	/^    def register_owner(self, task):$/;"	m	class:GoalConditionProxy
register_owner	translate/normalize.py	/^    def register_owner(self, task):$/;"	m	class:PreconditionProxy
register_plugin_type_plugin	search/options/plugin.cc	/^void register_plugin_type_plugin($/;"	f	namespace:options
register_state_buffer	search/state_registry.cc	/^GlobalState StateRegistry::register_state_buffer(const int *state) {$/;"	f	class:StateRegistry
register_variable	translate/simplify.py	/^    def register_variable(self, old_domain_size, init_value, new_domain):$/;"	m	class:VarValueRenaming
registered	search/options/doc_store.h	/^    std::map<std::string, DocStruct> registered;$/;"	m	class:options::DocStore
registered	search/options/registries.h	/^    std::map<std::string, Factory> registered;$/;"	m	class:options::Registry
registered_states	search/state_registry.h	/^    StateIDSet registered_states;$/;"	m	class:StateRegistry
registry	search/global_state.h	/^    const StateRegistry *registry;$/;"	m	class:GlobalState
registry	search/options/registries.h	/^    Map registry;$/;"	m	class:options::PluginTypeRegistry
registry	search/per_state_information.h	/^        const StateRegistry *registry;$/;"	m	class:PerStateInformation::const_iterator
regress	search/cegar/abstract_state.cc	/^AbstractState AbstractState::regress(OperatorProxy op) const {$/;"	f	class:cegar::AbstractState
regression_preconditions	search/pdbs/pattern_database.h	/^    std::vector<FactPair> regression_preconditions;$/;"	m	class:pdbs::AbstractOperator
relaxation_heuristic	search/heuristics/relaxation_heuristic.cc	/^namespace relaxation_heuristic {$/;"	n	file:
relaxation_heuristic	search/heuristics/relaxation_heuristic.h	/^namespace relaxation_heuristic {$/;"	n
relaxed	translate/pddl/actions.py	/^    def relaxed(self):$/;"	m	class:Action
relaxed	translate/pddl/conditions.py	/^    def relaxed(self):$/;"	m	class:Condition
relaxed	translate/pddl/effects.py	/^    def relaxed(self):$/;"	m	class:Effect
relaxed_exploration	search/heuristics/additive_heuristic.cc	/^void AdditiveHeuristic::relaxed_exploration() {$/;"	f	class:additive_heuristic::AdditiveHeuristic
relaxed_exploration	search/heuristics/max_heuristic.cc	/^void HSPMaxHeuristic::relaxed_exploration() {$/;"	f	class:max_heuristic::HSPMaxHeuristic
relaxed_exploration	search/landmarks/exploration.cc	/^void Exploration::relaxed_exploration(bool use_h_max, bool level_out) {$/;"	f	class:landmarks::Exploration
relaxed_operators	search/heuristics/lm_cut_landmarks.h	/^    std::vector<RelaxedOperator> relaxed_operators;$/;"	m	class:lm_cut_heuristic::LandmarkCutLandmarks
relaxed_plan	search/heuristics/ff_heuristic.h	/^    RelaxedPlan relaxed_plan;$/;"	m	class:ff_heuristic::FFHeuristic
relaxed_task_solvable	search/landmarks/landmark_factory.cc	/^bool LandmarkFactory::relaxed_task_solvable(const TaskProxy &task_proxy,$/;"	f	class:landmarks::LandmarkFactory
relaxed_task_solvable	search/landmarks/landmark_factory.h	/^    inline bool relaxed_task_solvable(const TaskProxy &task_proxy, Exploration &exploration,$/;"	f	class:landmarks::LandmarkFactory
release_extra_memory_padding	search/utils/memory.cc	/^void release_extra_memory_padding() {$/;"	f	namespace:utils
release_vector_memory	search/utils/collections.h	/^void release_vector_memory(std::vector<T> &vec) {$/;"	f	namespace:utils
relevant_labels	search/merge_and_shrink/fts_factory.cc	/^        vector<bool> relevant_labels;$/;"	m	struct:merge_and_shrink::FTSFactory::TransitionSystemData	file:
remaining_costs	search/cegar/cost_saturation.h	/^    std::vector<int> remaining_costs;$/;"	m	class:cegar::CostSaturation
remaining_vars	search/variable_order_finder.h	/^    std::vector<int> remaining_vars;$/;"	m	class:VariableOrderFinder
remove	search/bliss/heap.cc	/^unsigned int Heap::remove()$/;"	f	class:bliss::Heap
remove	search/cegar/domains.cc	/^void Domains::remove(int var, int value) {$/;"	f	class:cegar::Domains
remove_all	search/cegar/domains.cc	/^void Domains::remove_all(int var) {$/;"	f	class:cegar::Domains
remove_covered_samples	search/potentials/diverse_potential_heuristics.cc	/^void DiversePotentialHeuristics::remove_covered_samples($/;"	f	class:potentials::DiversePotentialHeuristics
remove_duplicate_edges	search/bliss/graph.cc	/^Digraph::Vertex::remove_duplicate_edges(std::vector<bool>& tmp)$/;"	f	class:bliss::Digraph::Vertex
remove_duplicate_edges	search/bliss/graph.cc	/^Digraph::remove_duplicate_edges()$/;"	f	class:bliss::Digraph
remove_duplicate_edges	search/bliss/graph.cc	/^Graph::Vertex::remove_duplicate_edges(std::vector<bool>& tmp)$/;"	f	class:bliss::Graph::Vertex
remove_duplicate_edges	search/bliss/graph.cc	/^Graph::remove_duplicate_edges()$/;"	f	class:bliss::Graph
remove_duplicates	translate/axiom_rules.py	/^def remove_duplicates(alist):$/;"	f
remove_first_weakest_cycle_edge	search/landmarks/landmark_factory.cc	/^bool LandmarkFactory::remove_first_weakest_cycle_edge(LandmarkNode *cur,$/;"	f	class:landmarks::LandmarkFactory
remove_free_effect_variables	translate/pddl_to_prolog.py	/^    def remove_free_effect_variables(self):$/;"	m	class:PrologProgram
remove_incoming_transition	search/cegar/abstract_state.cc	/^void AbstractState::remove_incoming_transition(int op_id, AbstractState *other) {$/;"	f	class:cegar::AbstractState
remove_incoming_transition	search/cegar/transition_updater.cc	/^void TransitionUpdater::remove_incoming_transition($/;"	f	class:cegar::TransitionUpdater
remove_initial_state_facts	search/cegar/subtask_generators.cc	/^static void remove_initial_state_facts($/;"	f	namespace:cegar
remove_irrelevant_variables	search/pdbs/pattern_collection_generator_genetic.cc	/^void PatternCollectionGeneratorGenetic::remove_irrelevant_variables($/;"	f	class:pdbs::PatternCollectionGeneratorGenetic
remove_key	search/open_lists/pareto_open_list.cc	/^void ParetoOpenList<Entry>::remove_key(const KeyType &key) {$/;"	f	class:ParetoOpenList
remove_min	search/open_lists/alternation_open_list.cc	/^Entry AlternationOpenList<Entry>::remove_min(vector<int> *key) {$/;"	f	class:AlternationOpenList
remove_min	search/open_lists/epsilon_greedy_open_list.cc	/^Entry EpsilonGreedyOpenList<Entry>::remove_min(vector<int> *key) {$/;"	f	class:EpsilonGreedyOpenList
remove_min	search/open_lists/pareto_open_list.cc	/^Entry ParetoOpenList<Entry>::remove_min(vector<int> *key) {$/;"	f	class:ParetoOpenList
remove_min	search/open_lists/standard_scalar_open_list.cc	/^Entry StandardScalarOpenList<Entry>::remove_min(vector<int> *key) {$/;"	f	class:StandardScalarOpenList
remove_min	search/open_lists/tiebreaking_open_list.cc	/^Entry TieBreakingOpenList<Entry>::remove_min(vector<int> *key) {$/;"	f	class:TieBreakingOpenList
remove_min	search/open_lists/type_based_open_list.cc	/^Entry TypeBasedOpenList<Entry>::remove_min(vector<int> *key) {$/;"	f	class:TypeBasedOpenList
remove_min_pair	translate/greedy_join.py	/^    def remove_min_pair(self):$/;"	m	class:CostMatrix
remove_non_looping_transition	search/cegar/abstract_state.cc	/^void AbstractState::remove_non_looping_transition($/;"	f	class:cegar::AbstractState
remove_outgoing_transition	search/cegar/abstract_state.cc	/^void AbstractState::remove_outgoing_transition(int op_id, AbstractState *other) {$/;"	f	class:cegar::AbstractState
remove_outgoing_transition	search/cegar/transition_updater.cc	/^void TransitionUpdater::remove_outgoing_transition($/;"	f	class:cegar::TransitionUpdater
remove_state_registry	search/per_state_information.h	/^    void remove_state_registry(StateRegistry *registry) {$/;"	f	class:PerStateInformation
remove_universal_quantifiers	translate/normalize.py	/^def remove_universal_quantifiers(task):$/;"	f
rename_duplicate_variables	translate/pddl_to_prolog.py	/^    def rename_duplicate_variables(self):$/;"	m	class:Rule
rename_variables	translate/pddl/conditions.py	/^    def rename_variables(self, renamings):$/;"	m	class:Literal
reopen	search/search_space.cc	/^void SearchNode::reopen(const SearchNode &parent_node,$/;"	f	class:SearchNode
reopen_closed_nodes	search/search_engines/eager_search.h	/^    const bool reopen_closed_nodes;$/;"	m	class:eager_search::EagerSearch
reopen_closed_nodes	search/search_engines/lazy_search.h	/^    bool reopen_closed_nodes; \/\/ whether to reopen closed nodes upon finding lower g paths$/;"	m	class:lazy_search::LazySearch
reopen_closed_nodes	search/search_engines/top_k_eager_search.h	/^    const bool reopen_closed_nodes;$/;"	m	class:top_k_eager_search::TopKEagerSearch
reopened_states	search/search_statistics.h	/^    int reopened_states;  \/\/ no of *closed* states which we reopened$/;"	m	class:SearchStatistics
reparent	search/ext/tree.hh	/^iter tree<T, tree_node_allocator>::reparent(iter position, sibling_iterator begin, sibling_iterator end)$/;"	f	class:tree
reparent	search/ext/tree.hh	/^template <typename iter> iter tree<T, tree_node_allocator>::reparent(iter position, iter from)$/;"	f	class:tree
repeat_last_phase	search/search_engines/iterated_search.h	/^    bool repeat_last_phase;$/;"	m	class:iterated_search::IteratedSearch
replace	search/ext/tree.hh	/^iter tree<T, tree_node_allocator>::replace(iter position, const T& x)$/;"	f	class:tree
replace	search/ext/tree.hh	/^iter tree<T, tree_node_allocator>::replace(iter position, const iterator_base& from)$/;"	f	class:tree
replace	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::sibling_iterator tree<T, tree_node_allocator>::replace($/;"	f	class:tree
replace_argument	translate/pddl/conditions.py	/^    def replace_argument(self, position, new_arg):$/;"	m	class:Literal
replace_if_less	search/structural_symmetries/permutation.cc	/^bool Permutation::replace_if_less(int* state) const {$/;"	f	class:Permutation
report_exit_code_reentrant	search/utils/system_unix.cc	/^void report_exit_code_reentrant(ExitCode exitcode) {$/;"	f	namespace:utils
report_exit_code_reentrant	search/utils/system_windows.cc	/^void report_exit_code_reentrant(ExitCode exitcode) {$/;"	f	namespace:utils
report_f_value_progress	search/search_statistics.cc	/^void SearchStatistics::report_f_value_progress(int f) {$/;"	f	class:SearchStatistics
report_hook	search/bliss/graph.h	/^  void (*report_hook)(void *user_param,$/;"	m	class:bliss::AbstractGraph
report_peak_memory_delta	search/merge_and_shrink/merge_and_shrink_heuristic.cc	/^void MergeAndShrinkHeuristic::report_peak_memory_delta(bool final) const {$/;"	f	class:merge_and_shrink::MergeAndShrinkHeuristic
report_user_param	search/bliss/graph.h	/^  void *report_user_param;$/;"	m	class:bliss::AbstractGraph
reserve_extra_memory_padding	search/utils/memory.cc	/^void reserve_extra_memory_padding(int memory_in_mb) {$/;"	f	namespace:utils
reset	search/algorithms/dynamic_bitset.h	/^    void reset() {$/;"	f	class:dynamic_bitset::DynamicBitset
reset	search/algorithms/dynamic_bitset.h	/^    void reset(std::size_t pos) {$/;"	f	class:dynamic_bitset::DynamicBitset
reset	search/bliss/graph.h	/^  void reset()$/;"	f	class:bliss::Stats
reset	search/bliss/orbit.cc	/^void Orbit::reset()$/;"	f	class:bliss::Orbit
reset	search/bliss/timer.cc	/^void Timer::reset()$/;"	f	class:bliss::Timer
reset	search/bliss/uintseqhash.h	/^  void reset() {h = 0; }$/;"	f	class:bliss::UintSeqHash
reset	search/cegar/abstract_search.cc	/^void AbstractSearch::reset() {$/;"	f	class:cegar::AbstractSearch
reset	search/cegar/abstract_state.h	/^    void reset() {$/;"	f	class:cegar::AbstractSearchInfo
reset	search/cegar/cost_saturation.cc	/^void CostSaturation::reset(const TaskProxy &task_proxy) {$/;"	f	class:cegar::CostSaturation
reset	search/utils/timer.cc	/^double Timer::reset() {$/;"	f	class:utils::Timer
reset_permutation	search/bliss/graph.cc	/^AbstractGraph::reset_permutation(unsigned int* perm)$/;"	f	class:bliss::AbstractGraph
resize	search/algorithms/segmented_vector.h	/^    void resize(size_t new_size, Entry entry = Entry()) {$/;"	f	class:segmented_vector::SegmentedVector
resize	search/algorithms/segmented_vector.h	/^    void resize(size_t new_size, const Element *entry) {$/;"	f	class:segmented_vector::SegmentedArrayVector
resume	search/search_engines/top_k_eager_search.cc	/^void TopKEagerSearch::resume(SearchControl& search_control) {$/;"	f	class:top_k_eager_search::TopKEagerSearch
resume	search/utils/timer.cc	/^void Timer::resume() {$/;"	f	class:utils::Timer
revert_new_local_vars	search/domain_transition_graph.cc	/^void DTGFactory::revert_new_local_vars(DomainTransitionGraph *dtg,$/;"	f	class:DTGFactory
reward_progress	search/search_engines/eager_search.cc	/^void EagerSearch::reward_progress() {$/;"	f	class:eager_search::EagerSearch
reward_progress	search/search_engines/lazy_search.cc	/^void LazySearch::reward_progress() {$/;"	f	class:lazy_search::LazySearch
reward_progress	search/search_engines/top_k_eager_search.cc	/^void TopKEagerSearch::reward_progress() {$/;"	f	class:top_k_eager_search::TopKEagerSearch
rewire	search/cegar/transition_updater.cc	/^void TransitionUpdater::rewire($/;"	f	class:cegar::TransitionUpdater
rewire_incoming_transitions	search/cegar/transition_updater.cc	/^void TransitionUpdater::rewire_incoming_transitions($/;"	f	class:cegar::TransitionUpdater
rewire_loops	search/cegar/transition_updater.cc	/^void TransitionUpdater::rewire_loops($/;"	f	class:cegar::TransitionUpdater
rewire_outgoing_transitions	search/cegar/transition_updater.cc	/^void TransitionUpdater::rewire_outgoing_transitions($/;"	f	class:cegar::TransitionUpdater
right_child	search/cegar/refinement_hierarchy.h	/^    Node *right_child;$/;"	m	class:cegar::Node
right_child	search/merge_and_shrink/merge_and_shrink_representation.h	/^    std::unique_ptr<MergeAndShrinkRepresentation> right_child;$/;"	m	class:merge_and_shrink::MergeAndShrinkRepresentationMerge
right_child	search/merge_and_shrink/merge_tree.h	/^    MergeTreeNode *right_child;$/;"	m	struct:merge_and_shrink::MergeTreeNode
rm_landmark_node	search/landmarks/landmark_graph.cc	/^void LandmarkGraph::rm_landmark_node(LandmarkNode *node) {$/;"	f	class:landmarks::LandmarkGraph
rng	search/cegar/cost_saturation.h	/^    utils::RandomNumberGenerator &rng;$/;"	m	class:cegar::CostSaturation
rng	search/cegar/subtask_generators.h	/^    std::shared_ptr<utils::RandomNumberGenerator> rng;$/;"	m	class:cegar::GoalDecomposition
rng	search/cegar/subtask_generators.h	/^    std::shared_ptr<utils::RandomNumberGenerator> rng;$/;"	m	class:cegar::LandmarkDecomposition
rng	search/merge_and_shrink/label_reduction.h	/^    std::shared_ptr<utils::RandomNumberGenerator> rng;$/;"	m	class:merge_and_shrink::LabelReduction
rng	search/merge_and_shrink/merge_scoring_function_single_random.h	/^    std::shared_ptr<utils::RandomNumberGenerator> rng;$/;"	m	class:merge_and_shrink::MergeScoringFunctionSingleRandom
rng	search/merge_and_shrink/merge_scoring_function_total_order.h	/^    std::shared_ptr<utils::RandomNumberGenerator> rng;$/;"	m	class:merge_and_shrink::MergeScoringFunctionTotalOrder
rng	search/merge_and_shrink/merge_tree.h	/^    std::shared_ptr<utils::RandomNumberGenerator> rng;$/;"	m	class:merge_and_shrink::MergeTree
rng	search/merge_and_shrink/merge_tree_factory.h	/^    std::shared_ptr<utils::RandomNumberGenerator> rng;$/;"	m	class:merge_and_shrink::MergeTreeFactory
rng	search/merge_and_shrink/shrink_bucket_based.h	/^    std::shared_ptr<utils::RandomNumberGenerator> rng;$/;"	m	class:merge_and_shrink::ShrinkBucketBased
rng	search/open_lists/epsilon_greedy_open_list.cc	/^    shared_ptr<utils::RandomNumberGenerator> rng;$/;"	m	class:EpsilonGreedyOpenList	file:
rng	search/open_lists/pareto_open_list.cc	/^    shared_ptr<utils::RandomNumberGenerator> rng;$/;"	m	class:ParetoOpenList	file:
rng	search/open_lists/type_based_open_list.cc	/^    shared_ptr<utils::RandomNumberGenerator> rng;$/;"	m	class:TypeBasedOpenList	file:
rng	search/pdbs/pattern_collection_generator_genetic.h	/^    std::shared_ptr<utils::RandomNumberGenerator> rng;$/;"	m	class:pdbs::PatternCollectionGeneratorGenetic
rng	search/pdbs/pattern_collection_generator_hillclimbing.h	/^    std::shared_ptr<utils::RandomNumberGenerator> rng;$/;"	m	class:pdbs::PatternCollectionGeneratorHillclimbing
rng	search/potentials/diverse_potential_heuristics.h	/^    std::shared_ptr<utils::RandomNumberGenerator> rng;$/;"	m	class:potentials::DiversePotentialHeuristics
rng	search/search_engines/lazy_search.h	/^    std::shared_ptr<utils::RandomNumberGenerator> rng;$/;"	m	class:lazy_search::LazySearch
rng	search/structural_symmetries/group.h	/^    const std::shared_ptr<utils::RandomNumberGenerator> rng;$/;"	m	class:Group
rng	search/utils/rng.h	/^    std::mt19937 rng;$/;"	m	class:utils::RandomNumberGenerator
root	search/cegar/refinement_hierarchy.h	/^    std::unique_ptr<Node> root;$/;"	m	class:cegar::RefinementHierarchy
root	search/merge_and_shrink/merge_tree.h	/^    MergeTreeNode *root;$/;"	m	class:merge_and_shrink::MergeTree
root	search/pdbs/match_tree.h	/^    Node *root;$/;"	m	class:pdbs::MatchTree
root	search/successor_generator.h	/^    std::unique_ptr<GeneratorBase> root;$/;"	m	class:SuccessorGenerator
row_lb	search/lp/lp_solver.h	/^    std::vector<double> row_lb;$/;"	m	class:lp::LPSolver
row_ub	search/lp/lp_solver.h	/^    std::vector<double> row_ub;$/;"	m	class:lp::LPSolver
rows	search/lp/lp_solver.h	/^    std::vector<CoinPackedVectorBase *> rows;$/;"	m	class:lp::LPSolver
rtab	search/bliss/uintseqhash.cc	/^static unsigned int rtab[256] = {$/;"	m	namespace:bliss	file:
rules	search/axioms.h	/^    std::vector<AxiomRule> rules;$/;"	m	class:AxiomEvaluator
rw_length_or_number_symmetric_states	search/structural_symmetries/group.h	/^    int rw_length_or_number_symmetric_states;$/;"	m	class:Group
sample_states	search/pdbs/pattern_collection_generator_hillclimbing.cc	/^void PatternCollectionGeneratorHillclimbing::sample_states($/;"	f	class:pdbs::PatternCollectionGeneratorHillclimbing
sample_states_with_random_walks	search/sampling.cc	/^vector<State> sample_states_with_random_walks($/;"	f
sample_without_dead_end_detection	search/potentials/util.cc	/^vector<State> sample_without_dead_end_detection($/;"	f	namespace:potentials
satisfies_goal_conditions	search/landmarks/landmark_factory_zhu_givan.cc	/^bool LandmarkFactoryZhuGivan::satisfies_goal_conditions($/;"	f	class:landmarks::LandmarkFactoryZhuGivan
save_plan	search/globals.cc	/^void save_plan(const vector<const GlobalOperator *> &plan,$/;"	f
save_plan_if_necessary	search/search_engine.cc	/^void SearchEngine::save_plan_if_necessary() const {$/;"	f	class:SearchEngine
save_plan_if_necessary	search/search_engines/iterated_search.cc	/^void IteratedSearch::save_plan_if_necessary() const {$/;"	f	class:iterated_search::IteratedSearch
search	search/bliss/graph.cc	/^AbstractGraph::search(const bool canonical, Stats& stats)$/;"	f	class:bliss::AbstractGraph
search	search/search_engine.cc	/^void SearchEngine::search() {$/;"	f	class:SearchEngine
search	search/search_engines/kstar.cc	/^void KStar::search() {$/;"	f	class:kstar::KStar
search_common	search/search_engines/search_common.cc	/^namespace search_common {$/;"	n	file:
search_common	search/search_engines/search_common.h	/^namespace search_common {$/;"	n
search_info	search/cegar/abstract_state.h	/^    AbstractSearchInfo search_info;$/;"	m	class:cegar::AbstractState
search_node_infos	search/search_space.h	/^    PerStateInformation<SearchNodeInfo> search_node_infos;$/;"	m	class:SearchSpace
search_progress	search/search_engine.h	/^    SearchProgress search_progress;$/;"	m	class:SearchEngine
search_space	search/search_engine.h	/^    SearchSpace search_space;$/;"	m	class:SearchEngine
search_symmetries	search/structural_symmetries/group.h	/^    SearchSymmetries search_symmetries;$/;"	m	class:Group
second_exploration	search/heuristics/lm_cut_landmarks.cc	/^void LandmarkCutLandmarks::second_exploration($/;"	f	class:lm_cut_heuristic::LandmarkCutLandmarks
seed	search/utils/rng.cc	/^void RandomNumberGenerator::seed(int seed) {$/;"	f	class:utils::RandomNumberGenerator
segmented_vector	search/algorithms/segmented_vector.h	/^namespace segmented_vector {$/;"	n
segments	search/algorithms/segmented_vector.h	/^    std::vector<Element *> segments;$/;"	m	class:segmented_vector::SegmentedArrayVector
segments	search/algorithms/segmented_vector.h	/^    std::vector<Entry *> segments;$/;"	m	class:segmented_vector::SegmentedVector
select	search/pdbs/pattern_collection_generator_genetic.cc	/^void PatternCollectionGeneratorGenetic::select($/;"	f	class:pdbs::PatternCollectionGeneratorGenetic
select_merge	search/merge_and_shrink/merge_selector_score_based_filtering.cc	/^pair<int, int> MergeSelectorScoreBasedFiltering::select_merge($/;"	f	class:merge_and_shrink::MergeSelectorScoreBasedFiltering
select_next	search/variable_order_finder.cc	/^void VariableOrderFinder::select_next(int position, int var_no) {$/;"	f	class:VariableOrderFinder
selected_vars	search/variable_order_finder.h	/^    std::vector<int> selected_vars;$/;"	m	class:VariableOrderFinder
selfloop_invariant	search/bliss/graph.cc	/^Digraph::selfloop_invariant(const Digraph* const g, const unsigned int vnum)$/;"	f	class:bliss::Digraph
selfloop_invariant	search/bliss/graph.cc	/^Graph::selfloop_invariant(const Graph* const g, const unsigned int v)$/;"	f	class:bliss::Graph
separate_facts_unreachable_before_goal	search/cegar/abstraction.cc	/^void Abstraction::separate_facts_unreachable_before_goal() {$/;"	f	class:cegar::Abstraction
set	search/algorithms/dynamic_bitset.h	/^    void set() {$/;"	f	class:dynamic_bitset::DynamicBitset
set	search/algorithms/dynamic_bitset.h	/^    void set(std::size_t pos) {$/;"	f	class:dynamic_bitset::DynamicBitset
set	search/algorithms/int_packer.cc	/^    void set(Bin *buffer, int value) const {$/;"	f	class:int_packer::IntPacker::VariableInfo
set	search/algorithms/int_packer.cc	/^void IntPacker::set(Bin *buffer, int var, int value) const {$/;"	f	class:int_packer::IntPacker
set	search/options/options.h	/^    void set(std::string key, T value) {$/;"	f	class:options::Options
set	translate/normalize.py	/^    def set(self, new_condition):$/;"	m	class:AxiomConditionProxy
set	translate/normalize.py	/^    def set(self, new_condition):$/;"	m	class:EffectConditionProxy
set	translate/normalize.py	/^    def set(self, new_condition):$/;"	m	class:GoalConditionProxy
set	translate/normalize.py	/^    def set(self, new_condition):$/;"	m	class:PreconditionProxy
set_additional_goals	search/landmarks/exploration.cc	/^void Exploration::set_additional_goals(const vector<FactPair> &add_goals) {$/;"	f	class:landmarks::Exploration
set_affected	search/structural_symmetries/permutation.cc	/^void Permutation::set_affected(int ind, int val) {$/;"	f	class:Permutation
set_backtrack_point	search/bliss/partition.cc	/^Partition::set_backtrack_point()$/;"	f	class:bliss::Partition
set_bound	search/search_engine.h	/^    void set_bound(int b) {bound = b; }$/;"	f	class:SearchEngine
set_component_recursion	search/bliss/graph.h	/^  void set_component_recursion(const bool active) {assert(!in_search); opt_use_comprec = active;}$/;"	f	class:bliss::AbstractGraph
set_constraint_lower_bound	search/lp/lp_solver.cc	/^void LPSolver::set_constraint_lower_bound(int index, double bound) {$/;"	f	class:lp::LPSolver
set_constraint_upper_bound	search/lp/lp_solver.cc	/^void LPSolver::set_constraint_upper_bound(int index, double bound) {$/;"	f	class:lp::LPSolver
set_cost	search/merge_and_shrink/label_equivalence_relation.h	/^    void set_cost(int cost_) {$/;"	f	class:merge_and_shrink::LabelGroup
set_count_evaluation	search/evaluation_result.cc	/^void EvaluationResult::set_count_evaluation(bool count_eval) {$/;"	f	class:EvaluationResult
set_distances	search/merge_and_shrink/merge_and_shrink_representation.cc	/^void MergeAndShrinkRepresentationLeaf::set_distances($/;"	f	class:merge_and_shrink::MergeAndShrinkRepresentationLeaf
set_distances	search/merge_and_shrink/merge_and_shrink_representation.cc	/^void MergeAndShrinkRepresentationMerge::set_distances($/;"	f	class:merge_and_shrink::MergeAndShrinkRepresentationMerge
set_exploration_goals	search/landmarks/landmark_count_heuristic.cc	/^void LandmarkCountHeuristic::set_exploration_goals(const GlobalState &global_state) {$/;"	f	class:landmarks::LandmarkCountHeuristic
set_failure_recording	search/bliss/graph.h	/^  void set_failure_recording(const bool active) {assert(!in_search); opt_use_failure_recording = active;}$/;"	f	class:bliss::AbstractGraph
set_group	search/state_registry.h	/^    void set_group(const std::shared_ptr<Group> &group_) {$/;"	f	class:StateRegistry
set_h_value	search/cegar/abstract_state.cc	/^void AbstractState::set_h_value(int new_h) {$/;"	f	class:cegar::AbstractState
set_h_value	search/evaluation_result.cc	/^void EvaluationResult::set_h_value(int value) {$/;"	f	class:EvaluationResult
set_head	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::pre_order_iterator tree<T, tree_node_allocator>::set_head(const T& x)$/;"	f	class:tree
set_help_mode	search/options/option_parser.cc	/^void OptionParser::set_help_mode(bool m) {$/;"	f	class:options::OptionParser
set_help_mode	search/options/options.h	/^    void set_help_mode(bool hm) {$/;"	f	class:options::Options
set_incoming_transition	search/cegar/abstract_state.h	/^    void set_incoming_transition(const Transition &transition) {$/;"	f	class:cegar::AbstractSearchInfo
set_indices_	search/landmarks/landmark_factory_h_m.h	/^    FluentSetToIntMap set_indices_;$/;"	m	class:landmarks::LandmarkFactoryHM
set_landmark_cost	search/landmarks/landmark_graph.h	/^    void set_landmark_cost(int cost) {$/;"	f	class:landmarks::EdgeType::LandmarkGraph
set_landmark_ids	search/landmarks/landmark_graph.cc	/^void LandmarkGraph::set_landmark_ids() {$/;"	f	class:landmarks::LandmarkGraph
set_landmarks_for_initial_state	search/landmarks/landmark_status_manager.cc	/^void LandmarkStatusManager::set_landmarks_for_initial_state($/;"	f	class:landmarks::LandmarkStatusManager
set_long_prune_activity	search/bliss/graph.h	/^  void set_long_prune_activity(const bool active) {$/;"	f	class:bliss::AbstractGraph
set_lower_bound	search/lp/lp_solver.h	/^    void set_lower_bound(double lb) {lower_bound = lb; }$/;"	f	class:lp::LPConstraint
set_max_additive_subsets	search/pdbs/pattern_collection_information.cc	/^void PatternCollectionInformation::set_max_additive_subsets($/;"	f	class:pdbs::PatternCollectionInformation
set_minus	search/landmarks/landmark_factory_h_m.cc	/^void set_minus(list<T> &alist, const list<T> &other) {$/;"	f	namespace:landmarks
set_objective_coefficient	search/lp/lp_solver.cc	/^void LPSolver::set_objective_coefficient(int index, double coefficient) {$/;"	f	class:lp::LPSolver
set_objective_coefficients	search/lp/lp_solver.cc	/^void LPSolver::set_objective_coefficients(const vector<double> &coefficients) {$/;"	f	class:lp::LPSolver
set_parent_	search/ext/tree.hh	/^void tree<T, tree_node_allocator>::sibling_iterator::set_parent_()$/;"	f	class:tree::sibling_iterator
set_pdbs	search/pdbs/pattern_collection_information.cc	/^void PatternCollectionInformation::set_pdbs(const shared_ptr<PDBCollection> &pdbs_) {$/;"	f	class:pdbs::PatternCollectionInformation
set_plan	search/search_engine.cc	/^void SearchEngine::set_plan(const Plan &p) {$/;"	f	class:SearchEngine
set_pref_operator_heuristics	search/search_engines/lazy_search.cc	/^void LazySearch::set_pref_operator_heuristics($/;"	f	class:lazy_search::LazySearch
set_preferred	search/heuristic.cc	/^void Heuristic::set_preferred(const GlobalOperator *op) {$/;"	f	class:Heuristic
set_preferred	search/heuristic.cc	/^void Heuristic::set_preferred(const OperatorProxy &op) {$/;"	f	class:Heuristic
set_preferred_operators	search/evaluation_result.cc	/^void EvaluationResult::set_preferred_operators($/;"	f	class:EvaluationResult
set_recompute_heuristic	search/landmarks/exploration.h	/^    void set_recompute_heuristic() {heuristic_recomputation_needed = true; }$/;"	f	class:landmarks::Exploration
set_single_value	search/cegar/domains.cc	/^void Domains::set_single_value(int var, int value) {$/;"	f	class:cegar::Domains
set_splitting_heuristic	search/bliss/graph.h	/^  void set_splitting_heuristic(SplittingHeuristic shs) {sh = shs; }$/;"	f	class:bliss::Digraph
set_splitting_heuristic	search/bliss/graph.h	/^  void set_splitting_heuristic(const SplittingHeuristic shs) {sh = shs; }$/;"	f	class:bliss::Graph
set_supertypes	translate/pddl_parser/parsing_functions.py	/^def set_supertypes(type_list):$/;"	f
set_synopsis	search/options/doc_store.cc	/^void DocStore::set_synopsis(string k,$/;"	f	class:options::DocStore
set_time_limit	search/bliss/graph.h	/^  void set_time_limit(double time_limit_) {time_limit = time_limit_; }$/;"	f	class:bliss::AbstractGraph
set_unparsed_config	search/options/option_parser.cc	/^void OptionParser::set_unparsed_config() {$/;"	f	class:options::OptionParser
set_unparsed_config	search/options/options.h	/^    void set_unparsed_config(const std::string &config) {$/;"	f	class:options::Options
set_up_local_problem	search/heuristics/cea_heuristic.cc	/^void ContextEnhancedAdditiveHeuristic::set_up_local_problem($/;"	f	class:cea_heuristic::ContextEnhancedAdditiveHeuristic
set_upper_bound	search/lp/lp_solver.h	/^    void set_upper_bound(double ub) {upper_bound = ub; }$/;"	f	class:lp::LPConstraint
set_value	search/structural_symmetries/operator_permutation.cc	/^void OperatorPermutation::set_value(int op_no, int to_op_no) {$/;"	f	class:OperatorPermutation
set_value	search/structural_symmetries/permutation.cc	/^void Permutation::set_value(int ind, int val) {$/;"	f	class:Permutation
set_variable_lower_bound	search/lp/lp_solver.cc	/^void LPSolver::set_variable_lower_bound(int index, double bound) {$/;"	f	class:lp::LPSolver
set_variable_upper_bound	search/lp/lp_solver.cc	/^void LPSolver::set_variable_upper_bound(int index, double bound) {$/;"	f	class:lp::LPSolver
set_verbose_file	search/bliss/graph.cc	/^AbstractGraph::set_verbose_file(FILE* const fp)$/;"	f	class:bliss::AbstractGraph
set_verbose_level	search/bliss/graph.cc	/^AbstractGraph::set_verbose_level(const unsigned int level)$/;"	f	class:bliss::AbstractGraph
setup	translate/options.py	/^def setup():$/;"	f
setup_domain_transition_graphs	search/heuristics/cg_heuristic.cc	/^void CGHeuristic::setup_domain_transition_graphs() {$/;"	f	class:cg_heuristic::CGHeuristic
setup_exploration_queue	search/heuristics/additive_heuristic.cc	/^void AdditiveHeuristic::setup_exploration_queue() {$/;"	f	class:additive_heuristic::AdditiveHeuristic
setup_exploration_queue	search/heuristics/lm_cut_landmarks.cc	/^void LandmarkCutLandmarks::setup_exploration_queue() {$/;"	f	class:lm_cut_heuristic::LandmarkCutLandmarks
setup_exploration_queue	search/heuristics/max_heuristic.cc	/^void HSPMaxHeuristic::setup_exploration_queue() {$/;"	f	class:max_heuristic::HSPMaxHeuristic
setup_exploration_queue	search/landmarks/exploration.cc	/^void Exploration::setup_exploration_queue(const State &state,$/;"	f	class:landmarks::Exploration
setup_exploration_queue	search/landmarks/exploration.h	/^    void setup_exploration_queue(const State &state, bool h_max) {$/;"	f	class:landmarks::Exploration
setup_exploration_queue_state	search/heuristics/additive_heuristic.cc	/^void AdditiveHeuristic::setup_exploration_queue_state(const State &state) {$/;"	f	class:additive_heuristic::AdditiveHeuristic
setup_exploration_queue_state	search/heuristics/lm_cut_landmarks.cc	/^void LandmarkCutLandmarks::setup_exploration_queue_state(const State &state) {$/;"	f	class:lm_cut_heuristic::LandmarkCutLandmarks
setup_exploration_queue_state	search/heuristics/max_heuristic.cc	/^void HSPMaxHeuristic::setup_exploration_queue_state(const State &state) {$/;"	f	class:max_heuristic::HSPMaxHeuristic
sh	search/bliss/graph.h	/^  SplittingHeuristic sh;$/;"	m	class:bliss::Digraph
sh	search/bliss/graph.h	/^  SplittingHeuristic sh;$/;"	m	class:bliss::Graph
sh_first	search/bliss/graph.cc	/^Digraph::sh_first()$/;"	f	class:bliss::Digraph
sh_first	search/bliss/graph.cc	/^Graph::sh_first()$/;"	f	class:bliss::Graph
sh_first_largest	search/bliss/graph.cc	/^Digraph::sh_first_largest()$/;"	f	class:bliss::Digraph
sh_first_largest	search/bliss/graph.cc	/^Graph::sh_first_largest()$/;"	f	class:bliss::Graph
sh_first_largest_max_neighbours	search/bliss/graph.cc	/^Digraph::sh_first_largest_max_neighbours()$/;"	f	class:bliss::Digraph
sh_first_largest_max_neighbours	search/bliss/graph.cc	/^Graph::sh_first_largest_max_neighbours()$/;"	f	class:bliss::Graph
sh_first_max_neighbours	search/bliss/graph.cc	/^Digraph::sh_first_max_neighbours()$/;"	f	class:bliss::Digraph
sh_first_max_neighbours	search/bliss/graph.cc	/^Graph::sh_first_max_neighbours()$/;"	f	class:bliss::Graph
sh_first_smallest	search/bliss/graph.cc	/^Digraph::sh_first_smallest()$/;"	f	class:bliss::Digraph
sh_first_smallest	search/bliss/graph.cc	/^Graph::sh_first_smallest()$/;"	f	class:bliss::Graph
sh_first_smallest_max_neighbours	search/bliss/graph.cc	/^Digraph::sh_first_smallest_max_neighbours()$/;"	f	class:bliss::Digraph
sh_first_smallest_max_neighbours	search/bliss/graph.cc	/^Graph::sh_first_smallest_max_neighbours()$/;"	f	class:bliss::Graph
shared_cost	search/landmarks/landmark_graph.h	/^    double shared_cost;$/;"	m	class:landmarks::EdgeType::LandmarkNode
shellsort_cell	search/bliss/partition.cc	/^Partition::shellsort_cell(Partition::Cell* const cell)$/;"	f	class:bliss::Partition
shift	search/algorithms/int_packer.cc	/^    int shift;$/;"	m	class:int_packer::IntPacker::VariableInfo	file:
shrink	search/merge_and_shrink/shrink_bisimulation.cc	/^bool ShrinkBisimulation::shrink($/;"	f	class:merge_and_shrink::ShrinkBisimulation
shrink	search/merge_and_shrink/shrink_bucket_based.cc	/^bool ShrinkBucketBased::shrink($/;"	f	class:merge_and_shrink::ShrinkBucketBased
shrink_before_merge	search/merge_and_shrink/merge_and_shrink_heuristic.cc	/^pair<bool, bool> MergeAndShrinkHeuristic::shrink_before_merge($/;"	f	class:merge_and_shrink::MergeAndShrinkHeuristic
shrink_fts	search/merge_and_shrink/shrink_strategy.cc	/^bool ShrinkStrategy::shrink_fts($/;"	f	class:merge_and_shrink::ShrinkStrategy
shrink_strategy	search/merge_and_shrink/merge_and_shrink_heuristic.h	/^    std::shared_ptr<ShrinkStrategy> shrink_strategy;$/;"	m	class:merge_and_shrink::MergeAndShrinkHeuristic
shrink_threshold_before_merge	search/merge_and_shrink/merge_and_shrink_heuristic.h	/^    const int shrink_threshold_before_merge;$/;"	m	class:merge_and_shrink::MergeAndShrinkHeuristic
shrink_transition_system	search/merge_and_shrink/utils.cc	/^bool shrink_transition_system($/;"	f	namespace:merge_and_shrink
shs_f	search/bliss/graph.h	/^    shs_f = 0,$/;"	e	enum:bliss::Digraph::__anon2
shs_f	search/bliss/graph.h	/^    shs_f = 0,$/;"	e	enum:bliss::Graph::__anon1
shs_fl	search/bliss/graph.h	/^    shs_fl,$/;"	e	enum:bliss::Digraph::__anon2
shs_fl	search/bliss/graph.h	/^    shs_fl,$/;"	e	enum:bliss::Graph::__anon1
shs_flm	search/bliss/graph.h	/^    shs_flm$/;"	e	enum:bliss::Digraph::__anon2
shs_flm	search/bliss/graph.h	/^    shs_flm$/;"	e	enum:bliss::Graph::__anon1
shs_fm	search/bliss/graph.h	/^    shs_fm,$/;"	e	enum:bliss::Digraph::__anon2
shs_fm	search/bliss/graph.h	/^    shs_fm,$/;"	e	enum:bliss::Graph::__anon1
shs_fs	search/bliss/graph.h	/^    shs_fs,$/;"	e	enum:bliss::Digraph::__anon2
shs_fs	search/bliss/graph.h	/^    shs_fs,$/;"	e	enum:bliss::Graph::__anon1
shs_fsm	search/bliss/graph.h	/^    shs_fsm,$/;"	e	enum:bliss::Digraph::__anon2
shs_fsm	search/bliss/graph.h	/^    shs_fsm,$/;"	e	enum:bliss::Graph::__anon1
shuffle	search/algorithms/ordered_set.h	/^    void shuffle(utils::RandomNumberGenerator &rng) {$/;"	f	class:ordered_set::OrderedSet
shuffle	search/utils/rng.h	/^    void shuffle(std::vector<T> &vec) {$/;"	f	class:utils::RandomNumberGenerator
sibling	search/ext/tree.hh	/^typename tree<T, tree_node_allocator>::sibling_iterator tree<T, tree_node_allocator>::sibling(const iterator_base& it, unsigned int num)$/;"	f	class:tree
sibling_iterator	search/ext/tree.hh	/^		class sibling_iterator : public iterator_base {$/;"	c	class:tree
sibling_iterator	search/ext/tree.hh	/^tree<T, tree_node_allocator>::sibling_iterator::sibling_iterator() $/;"	f	class:tree::sibling_iterator
sibling_iterator	search/ext/tree.hh	/^tree<T, tree_node_allocator>::sibling_iterator::sibling_iterator(const iterator_base& other)$/;"	f	class:tree::sibling_iterator
sibling_iterator	search/ext/tree.hh	/^tree<T, tree_node_allocator>::sibling_iterator::sibling_iterator(const sibling_iterator& other)$/;"	f	class:tree::sibling_iterator
sibling_iterator	search/ext/tree.hh	/^tree<T, tree_node_allocator>::sibling_iterator::sibling_iterator(tree_node *tn)$/;"	f	class:tree::sibling_iterator
signal_handler	search/utils/system_unix.cc	/^void signal_handler(int signal_number) {$/;"	f	namespace:utils
signal_handler	search/utils/system_windows.cc	/^void signal_handler(int signal_number) {$/;"	f	namespace:utils
simple_landmark_exists	search/landmarks/landmark_graph.cc	/^bool LandmarkGraph::simple_landmark_exists(const FactPair &lm) const {$/;"	f	class:landmarks::LandmarkGraph
simple_lms_to_nodes	search/landmarks/landmark_graph.h	/^    std::unordered_map<FactPair, LandmarkNode *> simple_lms_to_nodes;$/;"	m	class:landmarks::EdgeType::LandmarkGraph
simplified	translate/pddl/conditions.py	/^    def simplified(self):$/;"	m	class:Condition
simplified	translate/pddl/effects.py	/^    def simplified(self):$/;"	m	class:Effect
simplified_effect_condition_counter	translate/translate.py	/^simplified_effect_condition_counter = 0$/;"	v
simplify	search/heuristics/relaxation_heuristic.cc	/^void RelaxationHeuristic::simplify() {$/;"	f	class:relaxation_heuristic::RelaxationHeuristic
simplify	translate/axiom_rules.py	/^def simplify(axioms):$/;"	f
simplify_axioms	translate/axiom_rules.py	/^def simplify_axioms(axioms_by_atom, necessary_literals):$/;"	f
simplify_labels	search/domain_transition_graph.cc	/^void DTGFactory::simplify_labels(vector<ValueTransitionLabel> &labels) {$/;"	f	class:DTGFactory
simplify_transitions	search/domain_transition_graph.cc	/^void DTGFactory::simplify_transitions(vector<DomainTransitionGraph *> &dtgs) {$/;"	f	class:DTGFactory
size	search/algorithms/dynamic_bitset.h	/^    std::size_t size() const {$/;"	f	class:dynamic_bitset::DynamicBitset
size	search/algorithms/ordered_set.h	/^    int size() const {$/;"	f	class:ordered_set::OrderedSet
size	search/algorithms/segmented_vector.h	/^    size_t size() const {$/;"	f	class:segmented_vector::SegmentedArrayVector
size	search/algorithms/segmented_vector.h	/^    size_t size() const {$/;"	f	class:segmented_vector::SegmentedVector
size	search/bliss/heap.h	/^  unsigned int size() const {return n; }$/;"	f	class:bliss::Heap
size	search/bliss/kqueue.h	/^unsigned int KQueue<Type>::size() const$/;"	f	class:bliss::KQueue
size	search/bliss/kstack.h	/^  unsigned int size() const {return(cursor - entries); }$/;"	f	class:bliss::KStack
size	search/bliss/orbit.h	/^    unsigned int size;$/;"	m	class:bliss::Orbit::OrbitEntry
size	search/ext/tree.hh	/^size_t tree<T, tree_node_allocator>::size() const$/;"	f	class:tree
size	search/ext/tree.hh	/^size_t tree<T, tree_node_allocator>::size(const iterator_base& top) const$/;"	f	class:tree
size	search/open_lists/epsilon_greedy_open_list.cc	/^    int size;$/;"	m	class:EpsilonGreedyOpenList	file:
size	search/open_lists/standard_scalar_open_list.cc	/^    int size;$/;"	m	class:StandardScalarOpenList	file:
size	search/open_lists/tiebreaking_open_list.cc	/^    int size;$/;"	m	class:TieBreakingOpenList	file:
size	search/pdbs/incremental_canonical_pdbs.h	/^    int size;$/;"	m	class:pdbs::IncrementalCanonicalPDBs
size	search/state_registry.h	/^    size_t size() const {$/;"	f	class:StateRegistry
size	search/task_proxy.h	/^    std::size_t size() const {$/;"	f	class:AxiomsProxy
size	search/task_proxy.h	/^    std::size_t size() const {$/;"	f	class:EffectsProxy
size	search/task_proxy.h	/^    std::size_t size() const {$/;"	f	class:OperatorsProxy
size	search/task_proxy.h	/^    std::size_t size() const {$/;"	f	class:State
size	search/task_proxy.h	/^    std::size_t size() const {$/;"	f	class:VariablesProxy
size_type	search/ext/tree.hh	/^				typedef size_t                          size_type;$/;"	t	class:tree::iterator_base
skip_children	search/ext/tree.hh	/^void tree<T, tree_node_allocator>::iterator_base::skip_children()$/;"	f	class:tree::iterator_base
skip_children	search/ext/tree.hh	/^void tree<T, tree_node_allocator>::iterator_base::skip_children(bool skip)$/;"	f	class:tree::iterator_base
skip_current_children_	search/ext/tree.hh	/^				bool skip_current_children_;$/;"	m	class:tree::iterator_base
smaller_variable_id	search/successor_generator.cc	/^bool smaller_variable_id(const FactProxy &f1, const FactProxy &f2) {$/;"	f
solution	search/cegar/abstract_search.h	/^    Solution solution;$/;"	m	class:cegar::AbstractSearch
solution_found	search/search_engine.h	/^    bool solution_found;$/;"	m	class:SearchEngine
solvable_sas_task	translate/translate.py	/^def solvable_sas_task(msg):$/;"	f
solve	search/lp/lp_solver.cc	/^void LPSolver::solve() {$/;"	f	class:lp::LPSolver
solve_and_extract	search/potentials/potential_optimizer.cc	/^void PotentialOptimizer::solve_and_extract() {$/;"	f	class:potentials::PotentialOptimizer
sometimes_produced_by	search/operator_counting/state_equation_constraints.h	/^    std::set<int> sometimes_produced_by;$/;"	m	struct:operator_counting::Proposition
sort	search/ext/tree.hh	/^void tree<T, tree_node_allocator>::sort(sibling_iterator from, sibling_iterator to, $/;"	f	class:tree
sort	search/ext/tree.hh	/^void tree<T, tree_node_allocator>::sort(sibling_iterator from, sibling_iterator to, bool deep)$/;"	f	class:tree
sort_and_split_cell1	search/bliss/partition.cc	/^Partition::sort_and_split_cell1(Partition::Cell* const cell)$/;"	f	class:bliss::Partition
sort_and_split_cell255	search/bliss/partition.cc	/^Partition::sort_and_split_cell255(Partition::Cell* const cell,$/;"	f	class:bliss::Partition
sort_edges	search/bliss/graph.cc	/^Digraph::Vertex::sort_edges()$/;"	f	class:bliss::Digraph::Vertex
sort_edges	search/bliss/graph.cc	/^Digraph::sort_edges()$/;"	f	class:bliss::Digraph
sort_edges	search/bliss/graph.cc	/^Graph::Vertex::sort_edges()$/;"	f	class:bliss::Graph::Vertex
sort_edges	search/bliss/graph.cc	/^Graph::sort_edges()$/;"	f	class:bliss::Graph
sort_groups	translate/fact_groups.py	/^def sort_groups(groups):$/;"	f
sorted	search/utils/collections.h	/^std::vector<T> sorted(Collection &&collection) {$/;"	f	namespace:utils
sorted_goals	search/pruning/stubborn_sets.h	/^    std::vector<FactPair> sorted_goals;$/;"	m	class:stubborn_sets::StubbornSets
sorted_op_effects	search/pruning/stubborn_sets.h	/^    std::vector<std::vector<FactPair>> sorted_op_effects;$/;"	m	class:stubborn_sets::StubbornSets
sorted_op_preconditions	search/pruning/stubborn_sets.h	/^    std::vector<std::vector<FactPair>> sorted_op_preconditions;$/;"	m	class:stubborn_sets::StubbornSets
source	search/heuristics/cea_heuristic.cc	/^    LocalProblemNode *source;$/;"	m	struct:cea_heuristic::LocalTransition	file:
split	search/cegar/abstract_state.cc	/^pair<AbstractState *, AbstractState *> AbstractState::split($/;"	f	class:cegar::AbstractState
split	search/cegar/refinement_hierarchy.cc	/^pair<Node *, Node *> Node::split(int var, const vector<int> &values) {$/;"	f	class:cegar::Node
split_cell	search/bliss/partition.cc	/^Partition::split_cell(Partition::Cell* const original_cell)$/;"	f	class:bliss::Partition
split_cell_first	search/bliss/graph.cc	/^  unsigned int split_cell_first;$/;"	m	class:bliss::TreeNode	file:
split_cell_first	search/bliss/partition.h	/^    unsigned int split_cell_first;$/;"	m	class:bliss::Partition::RefInfo
split_disjunctions	translate/normalize.py	/^def split_disjunctions(task):$/;"	f
split_duplicate_arguments	translate/pddl_to_prolog.py	/^    def split_duplicate_arguments(self):$/;"	m	class:PrologProgram
split_element	search/bliss/graph.cc	/^  int split_element;$/;"	m	class:bliss::TreeNode	file:
split_into_binary_rules	translate/split_rules.py	/^def split_into_binary_rules(rule, name_generator):$/;"	f
split_level	search/bliss/partition.h	/^    unsigned int split_level;$/;"	m	class:bliss::Partition::Cell
split_neighbourhood_of_cell	search/bliss/graph.cc	/^Digraph::split_neighbourhood_of_cell(Partition::Cell* const cell)$/;"	f	class:bliss::Digraph
split_neighbourhood_of_cell	search/bliss/graph.cc	/^Graph::split_neighbourhood_of_cell(Partition::Cell* const cell)$/;"	f	class:bliss::Graph
split_neighbourhood_of_unit_cell	search/bliss/graph.cc	/^Digraph::split_neighbourhood_of_unit_cell(Partition::Cell* const unit_cell)$/;"	f	class:bliss::Digraph
split_neighbourhood_of_unit_cell	search/bliss/graph.cc	/^Graph::split_neighbourhood_of_unit_cell(Partition::Cell* const unit_cell)$/;"	f	class:bliss::Graph
split_rule	translate/split_rules.py	/^def split_rule(rule, name_generator):$/;"	f
split_rules	translate/pddl_to_prolog.py	/^    def split_rules(self):$/;"	m	class:PrologProgram
split_selector	search/cegar/abstraction.h	/^    SplitSelector split_selector;$/;"	m	class:cegar::Abstraction
splitted_level_trail_index	search/bliss/partition.h	/^    unsigned int splitted_level_trail_index;$/;"	m	class:bliss::Partition::CR_BTInfo
splitting_element	search/bliss/graph.cc	/^  unsigned int splitting_element;$/;"	m	struct:bliss::__anon3	file:
splitting_queue	search/bliss/partition.h	/^  KQueue<Cell*> splitting_queue;$/;"	m	class:bliss::Partition
splitting_queue_add	search/bliss/partition.cc	/^Partition::splitting_queue_add(Cell* const cell)$/;"	f	class:bliss::Partition
splitting_queue_clear	search/bliss/partition.cc	/^Partition::splitting_queue_clear()$/;"	f	class:bliss::Partition
splitting_queue_is_empty	search/bliss/partition.h	/^Partition::splitting_queue_is_empty() const$/;"	f	class:bliss::Partition
splitting_queue_pop	search/bliss/partition.h	/^Partition::splitting_queue_pop()$/;"	f	class:bliss::Partition
src	search/merge_and_shrink/transition_system.h	/^    int src;$/;"	m	struct:merge_and_shrink::Transition
stabilize_initial_state	search/structural_symmetries/graph_creator.h	/^    bool stabilize_initial_state;$/;"	m	class:GraphCreator
stabilize_initial_state	search/structural_symmetries/group.h	/^    bool stabilize_initial_state;$/;"	m	class:Group
standard_out_of_memory_handler	search/utils/memory.cc	/^static void (*standard_out_of_memory_handler)() = nullptr;$/;"	m	namespace:utils	file:
star_successor	search/pdbs/match_tree.cc	/^    Node *star_successor;$/;"	m	struct:pdbs::MatchTree::Node	file:
start_f_value_statistics	search/search_engines/eager_search.cc	/^void EagerSearch::start_f_value_statistics(EvaluationContext &eval_context) {$/;"	f	class:eager_search::EagerSearch
start_f_value_statistics	search/search_engines/top_k_eager_search.cc	/^void TopKEagerSearch::start_f_value_statistics(EvaluationContext &eval_context) {$/;"	f	class:top_k_eager_search::TopKEagerSearch
start_parsing	search/options/option_parser.h	/^T OptionParser::start_parsing() {$/;"	f	class:options::OptionParser
start_ticks	search/utils/timer.h	/^    LARGE_INTEGER start_ticks;$/;"	m	class:utils::Timer
start_time	search/bliss/timer.h	/^  double start_time;$/;"	m	class:bliss::Timer
starting_peak_memory	search/merge_and_shrink/merge_and_shrink_heuristic.h	/^    long starting_peak_memory;$/;"	m	class:merge_and_shrink::MergeAndShrinkHeuristic
starts	search/lp/lp_solver.h	/^    std::vector<int> starts;$/;"	m	class:lp::LPSolver
state	search/heuristic_cache.h	/^    GlobalState state;$/;"	m	class:HeuristicCache
state	search/merge_and_shrink/shrink_bisimulation.cc	/^    int state;$/;"	m	struct:merge_and_shrink::Signature	file:
state_data_pool	search/state_registry.h	/^        const segmented_vector::SegmentedArrayVector<PackedStateBin> &state_data_pool;$/;"	m	struct:StateRegistry::StateIDSemanticEqual
state_data_pool	search/state_registry.h	/^        const segmented_vector::SegmentedArrayVector<PackedStateBin> &state_data_pool;$/;"	m	struct:StateRegistry::StateIDSemanticHash
state_data_pool	search/state_registry.h	/^    segmented_vector::SegmentedArrayVector<PackedStateBin> state_data_pool;$/;"	m	class:StateRegistry
state_id	search/search_space.h	/^    StateID state_id;$/;"	m	class:SearchNode
state_is_dead_end	search/cegar/cost_saturation.cc	/^bool CostSaturation::state_is_dead_end(const State &state) const {$/;"	f	class:cegar::CostSaturation
state_label	search/utils/util.h	/^inline std::string state_label(GlobalState& s)$/;"	f
state_label	search/utils/util.h	/^inline std::string state_label(const GlobalState& s)$/;"	f
state_packer	search/state_registry.h	/^    const int_packer::IntPacker &state_packer;$/;"	m	class:StateRegistry
state_registry	search/search_engine.h	/^    StateRegistry state_registry;$/;"	m	class:SearchEngine
state_registry	search/search_space.h	/^    StateRegistry &state_registry;$/;"	m	class:SearchSpace
state_registry	search/search_space.h	/^    const StateRegistry &state_registry;$/;"	m	class:SearchNode
state_size	search/state_registry.h	/^        int state_size;$/;"	m	struct:StateRegistry::StateIDSemanticEqual
state_size	search/state_registry.h	/^        int state_size;$/;"	m	struct:StateRegistry::StateIDSemanticHash
state_uniform_selection	search/open_lists/pareto_open_list.cc	/^    bool state_uniform_selection;$/;"	m	class:ParetoOpenList	file:
states	search/cegar/abstract_search.h	/^    AbstractStates &states;$/;"	m	class:cegar::AbstractSearch
states	search/cegar/abstraction.h	/^    AbstractStates states;$/;"	m	class:cegar::Abstraction
statistics	search/evaluation_context.h	/^    SearchStatistics *statistics;$/;"	m	class:EvaluationContext
statistics	search/merge_and_shrink/distances.cc	/^void Distances::statistics() const {$/;"	f	class:merge_and_shrink::Distances
statistics	search/merge_and_shrink/factored_transition_system.cc	/^void FactoredTransitionSystem::statistics(int index) const {$/;"	f	class:merge_and_shrink::FactoredTransitionSystem
statistics	search/merge_and_shrink/transition_system.cc	/^void TransitionSystem::statistics() const {$/;"	f	class:merge_and_shrink::TransitionSystem
statistics	search/search_engine.h	/^    SearchStatistics statistics;$/;"	m	class:SearchEngine
statistics	search/structural_symmetries/group.cc	/^void Group::statistics() const {$/;"	f	class:Group
status	search/heuristics/lm_cut_landmarks.h	/^    PropositionStatus status;$/;"	m	struct:lm_cut_heuristic::RelaxedProposition
status	search/landmarks/landmark_graph.h	/^    landmark_status status;$/;"	m	class:landmarks::EdgeType::LandmarkNode
status	search/search_engine.h	/^	SearchStatus status;$/;"	m	class:SearchEngine
status	search/search_node_info.h	/^    unsigned int status : 2;$/;"	m	struct:SearchNodeInfo
std	search/abstract_task.h	/^namespace std {$/;"	n
std	search/cegar/utils.h	/^namespace std {$/;"	n
std	search/state_id.h	/^namespace std {$/;"	n
std	search/task_proxy.h	/^namespace std {$/;"	n
std	search/utils/hash.h	/^namespace std {$/;"	n
std	search/utils/logging.h	/^namespace std {$/;"	n
step	search/search_engines/eager_search.cc	/^SearchStatus EagerSearch::step() {$/;"	f	class:eager_search::EagerSearch
step	search/search_engines/enforced_hill_climbing_search.cc	/^SearchStatus EnforcedHillClimbingSearch::step() {$/;"	f	class:enforced_hill_climbing_search::EnforcedHillClimbingSearch
step	search/search_engines/iterated_search.cc	/^SearchStatus IteratedSearch::step() {$/;"	f	class:iterated_search::IteratedSearch
step	search/search_engines/lazy_search.cc	/^SearchStatus LazySearch::step() {$/;"	f	class:lazy_search::LazySearch
step	search/search_engines/top_k_eager_search.cc	/^SearchStatus TopKEagerSearch::step() {$/;"	f	class:top_k_eager_search::TopKEagerSearch
step_return_value	search/search_engines/iterated_search.cc	/^SearchStatus IteratedSearch::step_return_value() {$/;"	f	class:iterated_search::IteratedSearch
stop	search/utils/timer.cc	/^double Timer::stop() {$/;"	f	class:utils::Timer
stopped	search/utils/timer.h	/^    bool stopped;$/;"	m	class:utils::Timer
storage	search/options/options.h	/^    std::map<std::string, Any> storage;$/;"	m	class:options::Options
store	search/heuristics/cg_cache.h	/^    void store(int var, const State &state,$/;"	f	class:cg_heuristic::CGCache
store_helpful_transition	search/heuristics/cg_cache.h	/^    void store_helpful_transition($/;"	f	class:cg_heuristic::CGCache
str_to_lower	search/options/option_parser.cc	/^static string str_to_lower(string s) {$/;"	f	namespace:options
strips_to_sas_dictionary	translate/translate.py	/^def strips_to_sas_dictionary(groups, assert_partial):$/;"	f
stubborn	search/pruning/stubborn_sets.h	/^    std::vector<bool> stubborn;$/;"	m	class:stubborn_sets::StubbornSets
stubborn_queue	search/pruning/stubborn_sets.h	/^    std::vector<int> stubborn_queue;$/;"	m	class:stubborn_sets::StubbornSets
stubborn_sets	search/pruning/stubborn_sets.cc	/^namespace stubborn_sets {$/;"	n	file:
stubborn_sets	search/pruning/stubborn_sets.h	/^namespace stubborn_sets {$/;"	n
stubborn_sets_ec	search/pruning/stubborn_sets_ec.cc	/^namespace stubborn_sets_ec {$/;"	n	file:
stubborn_sets_ec	search/pruning/stubborn_sets_ec.h	/^namespace stubborn_sets_ec {$/;"	n
stubborn_sets_simple	search/pruning/stubborn_sets_simple.cc	/^namespace stubborn_sets_simple {$/;"	n	file:
stubborn_sets_simple	search/pruning/stubborn_sets_simple.h	/^namespace stubborn_sets_simple {$/;"	n
subcertificate_length	search/bliss/graph.cc	/^  unsigned int subcertificate_length;$/;"	m	class:bliss::TreeNode	file:
subcertificate_length	search/bliss/graph.cc	/^  unsigned int subcertificate_length;$/;"	m	struct:bliss::__anon3	file:
subevaluators	search/evaluators/combining_evaluator.h	/^    std::vector<ScalarEvaluator *> subevaluators;$/;"	m	class:combining_evaluator::CombiningEvaluator
subscribe	search/state_registry.cc	/^void StateRegistry::subscribe(PerStateInformationBase *psi) const {$/;"	f	class:StateRegistry
subscribers	search/state_registry.h	/^    mutable std::set<PerStateInformationBase *> subscribers;$/;"	m	class:StateRegistry
substitute_complicated_goal	translate/normalize.py	/^def substitute_complicated_goal(task):$/;"	f
substr	search/options/errors.h	/^    std::string substr;$/;"	m	struct:options::ParseError
subtask_generators	search/cegar/cost_saturation.h	/^    const std::vector<std::shared_ptr<SubtaskGenerator>> subtask_generators;$/;"	m	class:cegar::CostSaturation
subtree	search/ext/tree.hh	/^tree<T, tree_node_allocator> tree<T, tree_node_allocator>::subtree(sibling_iterator from, sibling_iterator to) const$/;"	f	class:tree
subtree	search/ext/tree.hh	/^void tree<T, tree_node_allocator>::subtree(tree& tmp, sibling_iterator from, sibling_iterator to) const$/;"	f	class:tree
subtree	search/options/parse_tree.h	/^tree<T> subtree($/;"	f	namespace:options
succ_builder	search/causal_graph.cc	/^    IntRelationBuilder succ_builder;$/;"	m	struct:CausalGraphBuilder	file:
succ_signature	search/merge_and_shrink/shrink_bisimulation.cc	/^    SuccessorSignature succ_signature;$/;"	m	struct:merge_and_shrink::Signature	file:
successors	search/causal_graph.h	/^    IntRelation successors;$/;"	m	class:CausalGraph
successors	search/pdbs/match_tree.cc	/^    Node **successors;$/;"	m	struct:pdbs::MatchTree::Node	file:
sum_evaluator	search/evaluators/sum_evaluator.cc	/^namespace sum_evaluator {$/;"	n	file:
sum_evaluator	search/evaluators/sum_evaluator.h	/^namespace sum_evaluator {$/;"	n
support_help	search/options/doc_store.h	/^    std::vector<LanguageSupportInfo> support_help;$/;"	m	struct:options::DocStruct
supports_conditional_effects	search/landmarks/landmark_factory_h_m.cc	/^bool LandmarkFactoryHM::supports_conditional_effects() const {$/;"	f	class:landmarks::LandmarkFactoryHM
supports_conditional_effects	search/landmarks/landmark_factory_merged.cc	/^bool LandmarkFactoryMerged::supports_conditional_effects() const {$/;"	f	class:landmarks::LandmarkFactoryMerged
supports_conditional_effects	search/landmarks/landmark_factory_rpg_exhaust.cc	/^bool LandmarkFactoryRpgExhaust::supports_conditional_effects() const {$/;"	f	class:landmarks::LandmarkFactoryRpgExhaust
supports_conditional_effects	search/landmarks/landmark_factory_rpg_sasp.cc	/^bool LandmarkFactoryRpgSasp::supports_conditional_effects() const {$/;"	f	class:landmarks::LandmarkFactoryRpgSasp
supports_conditional_effects	search/landmarks/landmark_factory_zhu_givan.cc	/^bool LandmarkFactoryZhuGivan::supports_conditional_effects() const {$/;"	f	class:landmarks::LandmarkFactoryZhuGivan
swap	search/ext/tree.hh	/^void tree<T, tree_node_allocator>::swap(iterator one, iterator two)$/;"	f	class:tree
swap	search/ext/tree.hh	/^void tree<T, tree_node_allocator>::swap(sibling_iterator it)$/;"	f	class:tree
swap	search/options/any.h	/^    Any &swap(Any &rhs) {$/;"	f	class:options::Any
swap_and_pop_from_vector	search/utils/collections.h	/^T swap_and_pop_from_vector(std::vector<T> &vec, size_t pos) {$/;"	f	namespace:utils
switch_var	search/successor_generator.cc	/^    VariableProxy switch_var;$/;"	m	class:GeneratorSwitch	file:
symmetrical_lookups	search/structural_symmetries/group.h	/^    SymmetricalLookups symmetrical_lookups;$/;"	m	class:Group
synergy	search/landmarks/lama_ff_synergy.cc	/^    LamaFFSynergy *synergy;$/;"	m	class:landmarks::FFSlaveHeuristic	file:
synergy	search/landmarks/lama_ff_synergy.cc	/^    LamaFFSynergy *synergy;$/;"	m	class:landmarks::LamaMasterHeuristic	file:
synopsis	search/options/doc_store.h	/^    std::string synopsis;$/;"	m	struct:options::DocStruct
synopsis	search/options/type_documenter.h	/^    static std::string synopsis() {$/;"	f	struct:options::TypeDocumenter
t2t_escape	search/utils/markup.cc	/^static string t2t_escape(const string &s) {$/;"	f	namespace:utils
tag	search/merge_and_shrink/transition_system.cc	/^string TransitionSystem::tag() const {$/;"	f	class:merge_and_shrink::TransitionSystem
tail	search/bliss/kqueue.h	/^  Type *head, *tail;$/;"	m	class:bliss::KQueue
target	search/cegar/transition.h	/^    AbstractState *target;$/;"	m	struct:cegar::Transition
target	search/domain_transition_graph.h	/^    ValueNode *target;$/;"	m	struct:ValueTransition
target	search/heuristics/cea_heuristic.cc	/^    LocalProblemNode *target;$/;"	m	struct:cea_heuristic::LocalTransition	file:
target	search/merge_and_shrink/transition_system.h	/^    int target;$/;"	m	struct:merge_and_shrink::Transition
target_cost	search/heuristics/cea_heuristic.cc	/^    int target_cost;$/;"	m	struct:cea_heuristic::LocalTransition	file:
task	search/cegar/cartesian_heuristic_function.h	/^    const std::shared_ptr<AbstractTask> task;$/;"	m	class:cegar::CartesianHeuristicFunction
task	search/cegar/split_selector.h	/^    const std::shared_ptr<AbstractTask> task;$/;"	m	class:cegar::SplitSelector
task	search/heuristic.h	/^    const std::shared_ptr<AbstractTask> task;$/;"	m	class:Heuristic
task	search/pdbs/pattern_collection_generator_genetic.h	/^    std::shared_ptr<AbstractTask> task;$/;"	m	class:pdbs::PatternCollectionGeneratorGenetic
task	search/potentials/potential_optimizer.h	/^    std::shared_ptr<AbstractTask> task;$/;"	m	class:potentials::PotentialOptimizer
task	search/pruning_method.h	/^    std::shared_ptr<AbstractTask> task;$/;"	m	class:PruningMethod
task	search/state_registry.h	/^    const AbstractTask &task;$/;"	m	class:StateRegistry
task	search/task_proxy.h	/^    const AbstractTask *task;$/;"	m	class:AxiomsProxy
task	search/task_proxy.h	/^    const AbstractTask *task;$/;"	m	class:ConditionsProxy
task	search/task_proxy.h	/^    const AbstractTask *task;$/;"	m	class:EffectProxy
task	search/task_proxy.h	/^    const AbstractTask *task;$/;"	m	class:EffectsProxy
task	search/task_proxy.h	/^    const AbstractTask *task;$/;"	m	class:FactProxy
task	search/task_proxy.h	/^    const AbstractTask *task;$/;"	m	class:FactsProxy
task	search/task_proxy.h	/^    const AbstractTask *task;$/;"	m	class:FactsProxyIterator
task	search/task_proxy.h	/^    const AbstractTask *task;$/;"	m	class:OperatorProxy
task	search/task_proxy.h	/^    const AbstractTask *task;$/;"	m	class:OperatorsProxy
task	search/task_proxy.h	/^    const AbstractTask *task;$/;"	m	class:State
task	search/task_proxy.h	/^    const AbstractTask *task;$/;"	m	class:TaskProxy
task	search/task_proxy.h	/^    const AbstractTask *task;$/;"	m	class:VariableProxy
task	search/task_proxy.h	/^    const AbstractTask *task;$/;"	m	class:VariablesProxy
task	search/tasks/domain_abstracted_task_factory.cc	/^    shared_ptr<AbstractTask> task;$/;"	m	class:extra_tasks::DomainAbstractedTaskFactory	file:
task	translate/build_model.py	/^    task = pddl_parser.open()$/;"	v
task	translate/instantiate.py	/^    task = pddl_parser.open()$/;"	v
task	translate/invariant_finder.py	/^    task = pddl_parser.open()$/;"	v
task	translate/normalize.py	/^    task = pddl_parser.open()$/;"	v
task	translate/pddl_to_prolog.py	/^    task = pddl_parser.open()$/;"	v
task_has_axioms	search/axioms.h	/^    bool task_has_axioms;$/;"	m	class:AxiomEvaluator
task_has_conditional_effects	search/merge_and_shrink/fts_factory.cc	/^    int task_has_conditional_effects;$/;"	m	class:merge_and_shrink::FTSFactory	file:
task_proxy	search/cegar/abstraction.h	/^    const TaskProxy task_proxy;$/;"	m	class:cegar::Abstraction
task_proxy	search/cegar/cartesian_heuristic_function.h	/^    TaskProxy task_proxy;$/;"	m	class:cegar::CartesianHeuristicFunction
task_proxy	search/cegar/split_selector.h	/^    const TaskProxy task_proxy;$/;"	m	class:cegar::SplitSelector
task_proxy	search/domain_transition_graph.h	/^    const TaskProxy &task_proxy;$/;"	m	class:DTGFactory
task_proxy	search/heuristic.h	/^    TaskProxy task_proxy;$/;"	m	class:Heuristic
task_proxy	search/heuristics/cg_cache.h	/^    TaskProxy task_proxy;$/;"	m	class:cg_heuristic::CGCache
task_proxy	search/merge_and_shrink/fts_factory.cc	/^    const TaskProxy &task_proxy;$/;"	m	class:merge_and_shrink::FTSFactory	file:
task_proxy	search/pdbs/incremental_canonical_pdbs.h	/^    TaskProxy task_proxy;$/;"	m	class:pdbs::IncrementalCanonicalPDBs
task_proxy	search/pdbs/match_tree.h	/^    TaskProxy task_proxy;$/;"	m	class:pdbs::MatchTree
task_proxy	search/pdbs/pattern_collection_information.h	/^    TaskProxy task_proxy;$/;"	m	class:pdbs::PatternCollectionInformation
task_proxy	search/potentials/potential_optimizer.h	/^    TaskProxy task_proxy;$/;"	m	class:potentials::PotentialOptimizer
task_proxy	search/successor_generator.h	/^    TaskProxy task_proxy;$/;"	m	class:SuccessorGenerator
task_proxy	search/variable_order_finder.h	/^    TaskProxy task_proxy;$/;"	m	class:VariableOrderFinder
tasks	search/tasks/cost_adapted_task.cc	/^namespace tasks {$/;"	n	file:
tasks	search/tasks/cost_adapted_task.h	/^namespace tasks {$/;"	n
tasks	search/tasks/delegating_task.cc	/^namespace tasks {$/;"	n	file:
tasks	search/tasks/delegating_task.h	/^namespace tasks {$/;"	n
tasks	search/tasks/root_task.cc	/^namespace tasks {$/;"	n	file:
tasks	search/tasks/root_task.h	/^namespace tasks {$/;"	n
termination_propositions	search/landmarks/exploration.h	/^    std::vector<ExProposition *> termination_propositions;$/;"	m	class:landmarks::Exploration
test	search/algorithms/dynamic_bitset.h	/^    bool test(std::size_t pos) const {$/;"	f	class:dynamic_bitset::DynamicBitset
test	search/cegar/domains.h	/^    bool test(int var, int value) const {$/;"	f	class:cegar::Domains
test_goal	search/globals.cc	/^bool test_goal(const GlobalState &state) {$/;"	f
test_normalization	translate/tests/test_normalization.py	/^def test_normalization():$/;"	f
test_scripts	translate/tests/test_scripts.py	/^def test_scripts():$/;"	f
the_size	search/algorithms/segmented_vector.h	/^    size_t the_size;$/;"	m	class:segmented_vector::SegmentedArrayVector
the_size	search/algorithms/segmented_vector.h	/^    size_t the_size;$/;"	m	class:segmented_vector::SegmentedVector
time_bound	search/structural_symmetries/graph_creator.h	/^    int time_bound;$/;"	m	class:GraphCreator
time_limit	search/bliss/graph.h	/^  double time_limit; \/\/ time limit for find_automorphism. 0 means no time limit$/;"	m	class:bliss::AbstractGraph
timer	search/bliss/graph.h	/^  Timer *timer;$/;"	m	class:bliss::AbstractGraph
timer	search/cegar/abstraction.h	/^    utils::CountdownTimer timer;$/;"	m	class:cegar::Abstraction
timer	search/utils/countdown_timer.h	/^    Timer timer;$/;"	m	class:utils::CountdownTimer
timing	translate/timers.py	/^def timing(text, block=False):$/;"	f
to	search/search_engines/top_k_eager_search.h	/^	StateID to = StateID::no_state;$/;"	m	struct:top_k_eager_search::StateActionPair
to_list	search/options/option_parser.cc	/^static vector<string> to_list(string s) {$/;"	f	namespace:options
to_ops_no	search/structural_symmetries/operator_permutation.h	/^    std::vector<int> to_ops_no;$/;"	m	class:OperatorPermutation
to_str	search/options/option_parser.h	/^    static std::string to_str(T in) {$/;"	f	class:options::OptionParser
to_untyped_strips	translate/pddl/conditions.py	/^    def to_untyped_strips(self):$/;"	m	class:Atom
to_untyped_strips	translate/pddl/conditions.py	/^    def to_untyped_strips(self):$/;"	m	class:Condition
to_untyped_strips	translate/pddl/conditions.py	/^    def to_untyped_strips(self):$/;"	m	class:Conjunction
to_untyped_strips	translate/pddl/conditions.py	/^    def to_untyped_strips(self):$/;"	m	class:Truth
tokenize	translate/pddl_parser/lisp_parser.py	/^def tokenize(input):$/;"	f
tokenize_list	translate/pddl_parser/pretty_print.py	/^def tokenize_list(obj):$/;"	f
top	search/algorithms/priority_queues.h	/^	Entry top() {$/;"	f	class:priority_queues::AdaptiveQueue
top	search/algorithms/priority_queues.h	/^	virtual Entry top() {$/;"	f	class:priority_queues::BucketQueue
top	search/algorithms/priority_queues.h	/^	virtual Entry top() {$/;"	f	class:priority_queues::HeapQueue
top	search/bliss/kstack.h	/^  Type top() const {BLISS_ASSERT(cursor > entries); return *cursor; }$/;"	f	class:bliss::KStack
top	search/open_lists/alternation_open_list.cc	/^Entry AlternationOpenList<Entry>::top() { $/;"	f	class:AlternationOpenList
top	search/open_lists/epsilon_greedy_open_list.cc	/^Entry EpsilonGreedyOpenList<Entry>::top() {$/;"	f	class:EpsilonGreedyOpenList
top	search/open_lists/pareto_open_list.cc	/^Entry ParetoOpenList<Entry>::top() {$/;"	f	class:ParetoOpenList
top	search/open_lists/standard_scalar_open_list.cc	/^Entry StandardScalarOpenList<Entry>::top() {$/;"	f	class:StandardScalarOpenList
top	search/open_lists/tiebreaking_open_list.cc	/^Entry TieBreakingOpenList<Entry>::top() {$/;"	f	class:TieBreakingOpenList
top	search/open_lists/type_based_open_list.cc	/^Entry TypeBasedOpenList<Entry>::top() {$/;"	f	class:TypeBasedOpenList
top_k_eager_search	search/search_engines/top_k_eager_search.cc	/^namespace top_k_eager_search {$/;"	n	file:
top_k_eager_search	search/search_engines/top_k_eager_search.h	/^namespace top_k_eager_search {$/;"	n
top_k_plans	search/search_engines/top_k_eager_search.h	/^	std::vector<Plan> top_k_plans;	$/;"	m	class:top_k_eager_search::TopKEagerSearch
top_node	search/ext/tree.hh	/^				tree_node *top_node;$/;"	m	class:tree::fixed_depth_iterator
top_node	search/ext/tree.hh	/^				tree_node *top_node;$/;"	m	class:tree::leaf_iterator
trace	search/utils/logging.cc	/^void trace(const string &msg) {$/;"	f	namespace:utils
trace_path	search/search_space.cc	/^void SearchSpace::trace_path(const GlobalState &goal_state,$/;"	f	class:SearchSpace
trace_path_with_symmetries	search/search_space.cc	/^void SearchSpace::trace_path_with_symmetries(const GlobalState &goal_state,$/;"	f	class:SearchSpace
transform_to_pattern_normal_form	search/pdbs/pattern_collection_generator_genetic.cc	/^Pattern PatternCollectionGeneratorGenetic::transform_to_pattern_normal_form($/;"	f	class:pdbs::PatternCollectionGeneratorGenetic
transition_graphs	search/heuristics/cea_heuristic.h	/^    std::vector<DomainTransitionGraph *> transition_graphs;$/;"	m	class:cea_heuristic::ContextEnhancedAdditiveHeuristic
transition_graphs	search/heuristics/cg_heuristic.h	/^    std::vector<DomainTransitionGraph *> transition_graphs;$/;"	m	class:cg_heuristic::CGHeuristic
transition_index	search/domain_transition_graph.h	/^    std::vector<std::unordered_map<std::pair<int, int>, int>> transition_index;$/;"	m	class:DTGFactory
transition_system	search/merge_and_shrink/distances.h	/^    const TransitionSystem &transition_system;$/;"	m	class:merge_and_shrink::Distances
transition_system_data_by_var	search/merge_and_shrink/fts_factory.cc	/^    vector<TransitionSystemData> transition_system_data_by_var;$/;"	m	class:merge_and_shrink::FTSFactory	file:
transition_system_order	search/merge_and_shrink/label_reduction.h	/^    std::vector<int> transition_system_order;$/;"	m	class:merge_and_shrink::LabelReduction
transition_systems	search/merge_and_shrink/factored_transition_system.h	/^    std::vector<std::unique_ptr<TransitionSystem>> transition_systems;$/;"	m	class:merge_and_shrink::FactoredTransitionSystem
transition_updater	search/cegar/abstraction.h	/^    TransitionUpdater transition_updater;$/;"	m	class:cegar::Abstraction
transitions	search/domain_transition_graph.h	/^    std::vector<ValueTransition> transitions;$/;"	m	struct:ValueNode
transitions	search/merge_and_shrink/transition_system.h	/^    const std::vector<Transition> &transitions;$/;"	m	struct:merge_and_shrink::GroupAndTransitions
transitions_by_group_id	search/merge_and_shrink/transition_system.h	/^    const std::vector<std::vector<Transition>> &transitions_by_group_id;$/;"	m	class:merge_and_shrink::TSConstIterator
transitions_by_group_id	search/merge_and_shrink/transition_system.h	/^    std::vector<std::vector<Transition>> transitions_by_group_id;$/;"	m	class:merge_and_shrink::TransitionSystem
transitions_by_label	search/merge_and_shrink/fts_factory.cc	/^        vector<vector<Transition>> transitions_by_label;$/;"	m	struct:merge_and_shrink::FTSFactory::TransitionSystemData	file:
transitive_closure	translate/graph.py	/^def transitive_closure(pairs):$/;"	f
translate	translate/pddl_to_prolog.py	/^def translate(task):$/;"	f
translate_facts	translate/pddl_to_prolog.py	/^def translate_facts(prog, task):$/;"	f
translate_operator	translate/simplify.py	/^    def translate_operator(self, op):$/;"	m	class:VarValueRenaming
translate_pair	translate/simplify.py	/^    def translate_pair(self, fact_pair):$/;"	m	class:VarValueRenaming
translate_pre_post	translate/simplify.py	/^    def translate_pre_post(self, pre_post_entry, conditions_dict):$/;"	m	class:VarValueRenaming
translate_strips_axiom	translate/translate.py	/^def translate_strips_axiom(axiom, dictionary, ranges, mutex_dict, mutex_ranges):$/;"	f
translate_strips_axioms	translate/translate.py	/^def translate_strips_axioms(axioms, strips_to_sas, ranges, mutex_dict,$/;"	f
translate_strips_conditions	translate/translate.py	/^def translate_strips_conditions(conditions, dictionary, ranges,$/;"	f
translate_strips_conditions_aux	translate/translate.py	/^def translate_strips_conditions_aux(conditions, dictionary, ranges):$/;"	f
translate_strips_operator	translate/translate.py	/^def translate_strips_operator(operator, dictionary, ranges, mutex_dict,$/;"	f
translate_strips_operator_aux	translate/translate.py	/^def translate_strips_operator_aux(operator, dictionary, ranges, mutex_dict,$/;"	f
translate_strips_operators	translate/translate.py	/^def translate_strips_operators(actions, strips_to_sas, ranges, mutex_dict,$/;"	f
translate_task	translate/translate.py	/^def translate_task(strips_to_sas, ranges, translation_key,$/;"	f
translate_typed_object	translate/pddl_to_prolog.py	/^def translate_typed_object(prog, obj, type_dict):$/;"	f
traversal_queue	search/ext/tree.hh	/^				std::queue<tree_node *> traversal_queue;$/;"	m	class:tree::breadth_first_queued_iterator
tree	search/ext/tree.hh	/^class tree {$/;"	c
tree	search/ext/tree.hh	/^tree<T, tree_node_allocator>::tree() $/;"	f	class:tree
tree	search/ext/tree.hh	/^tree<T, tree_node_allocator>::tree(const T& x) $/;"	f	class:tree
tree	search/ext/tree.hh	/^tree<T, tree_node_allocator>::tree(const iterator_base& other)$/;"	f	class:tree
tree	search/ext/tree.hh	/^tree<T, tree_node_allocator>::tree(const tree<T, tree_node_allocator>& other)$/;"	f	class:tree
tree_hh_	search/ext/tree.hh	25;"	d
tree_node	search/ext/tree.hh	/^		typedef tree_node_<T> tree_node;$/;"	t	class:tree
tree_node_	search/ext/tree.hh	/^class tree_node_ { \/\/ size: 5*4=20 bytes (on 32 bit arch), can be reduced by 8.$/;"	c
tree_util_hh_	search/ext/tree_util.hh	28;"	d
trivial_task	translate/translate.py	/^def trivial_task(solvable):$/;"	f
try_to_fire_transition	search/heuristics/cea_heuristic.cc	/^void ContextEnhancedAdditiveHeuristic::try_to_fire_transition($/;"	f	class:cea_heuristic::ContextEnhancedAdditiveHeuristic
ts_index	search/merge_and_shrink/merge_tree.h	/^    int ts_index;$/;"	m	struct:merge_and_shrink::MergeTreeNode
tuplify	translate/sas_tasks.py	/^        def tuplify(entry):$/;"	f	function:SASOperator._canonical_pre_post
type	search/options/any.h	/^        virtual const std::type_info &type() const {$/;"	f	class:options::Any::Holder
type	search/options/any.h	/^    const std::type_info &type() const {$/;"	f	class:options::Any
type	search/options/doc_store.h	/^    std::string type;$/;"	m	struct:options::DocStruct
type	search/options/registries.h	/^    std::type_index type;$/;"	m	class:options::PluginTypeInfo
type_name	search/options/doc_store.h	/^    std::string type_name;$/;"	m	struct:options::ArgumentInfo
type_name	search/options/registries.h	/^    std::string type_name;$/;"	m	class:options::PluginTypeInfo
unary_operators	search/heuristics/relaxation_heuristic.h	/^    std::vector<UnaryOperator> unary_operators;$/;"	m	class:relaxation_heuristic::RelaxationHeuristic
unary_operators	search/landmarks/exploration.h	/^    std::vector<ExUnaryOperator> unary_operators;$/;"	m	class:landmarks::Exploration
unbalanced_renamings	translate/invariants.py	/^    def unbalanced_renamings(self, del_effect, add_effect,$/;"	m	class:Invariant
unify	translate/build_model.py	/^    def unify(self, atom):$/;"	m	class:Unifier
union_of_condition_labels	search/landmarks/landmark_factory_zhu_givan.cc	/^lm_set LandmarkFactoryZhuGivan::union_of_condition_labels($/;"	f	class:landmarks::LandmarkFactoryZhuGivan
union_of_precondition_labels	search/landmarks/landmark_factory_zhu_givan.cc	/^lm_set LandmarkFactoryZhuGivan::union_of_precondition_labels(const OperatorProxy &op,$/;"	f	class:landmarks::LandmarkFactoryZhuGivan
union_with	search/landmarks/landmark_factory_h_m.cc	/^void union_with(list<T> &alist, const list<T> &other) {$/;"	f	namespace:landmarks
uniquify_name	translate/pddl/pddl_types.py	/^    def uniquify_name(self, type_map, renamings):$/;"	m	class:TypedObject
uniquify_variables	translate/pddl/actions.py	/^    def uniquify_variables(self):$/;"	m	class:Action
uniquify_variables	translate/pddl/axioms.py	/^    def uniquify_variables(self):$/;"	m	class:Axiom
uniquify_variables	translate/pddl/conditions.py	/^    def uniquify_variables(self, type_map, renamings={}):$/;"	m	class:Condition
uniquify_variables	translate/pddl/conditions.py	/^    def uniquify_variables(self, type_map, renamings={}):$/;"	m	class:Literal
uniquify_variables	translate/pddl/conditions.py	/^    def uniquify_variables(self, type_map, renamings={}):$/;"	m	class:QuantifiedCondition
uniquify_variables	translate/pddl/effects.py	/^    def uniquify_variables(self, type_map):$/;"	m	class:Effect
unlimited	search/options/bounds.h	/^    static Bounds unlimited() {$/;"	f	struct:options::Bounds
unmet_goals	search/cegar/abstraction.h	/^    int unmet_goals;$/;"	m	class:cegar::Abstraction
unmet_preconditions	search/cegar/abstraction.h	/^    int unmet_preconditions;$/;"	m	class:cegar::Abstraction
unordered_items	search/algorithms/ordered_set.h	/^    std::unordered_set<T> unordered_items;$/;"	m	class:ordered_set::OrderedSet
unparsed_config	search/options/option_parser.h	/^    std::string unparsed_config;$/;"	m	class:options::OptionParser
unparsed_config	search/options/options.h	/^    std::string unparsed_config;$/;"	m	class:options::Options
unreached_conditions	search/heuristics/cea_heuristic.cc	/^    int unreached_conditions;$/;"	m	struct:cea_heuristic::LocalTransition	file:
unsat_pc_count_	search/landmarks/landmark_factory_h_m.h	/^    std::vector<std::pair<int, std::vector<int>>> unsat_pc_count_;$/;"	m	class:landmarks::LandmarkFactoryHM
unsatisfied_conditions	search/axioms.h	/^        int unsatisfied_conditions;$/;"	m	struct:AxiomEvaluator::AxiomRule
unsatisfied_preconditions	search/heuristics/lm_cut_landmarks.h	/^    int unsatisfied_preconditions;$/;"	m	struct:lm_cut_heuristic::RelaxedOperator
unsatisfied_preconditions	search/heuristics/relaxation_heuristic.h	/^    int unsatisfied_preconditions;$/;"	m	struct:relaxation_heuristic::UnaryOperator
unsatisfied_preconditions	search/landmarks/exploration.h	/^    int unsatisfied_preconditions;$/;"	m	struct:landmarks::ExUnaryOperator
unsolvable_index	search/merge_and_shrink/factored_transition_system.h	/^    int unsolvable_index; \/\/ -1 if solvable, index of an unsolvable entry otw.$/;"	m	class:merge_and_shrink::FactoredTransitionSystem
unsolvable_sas_task	translate/translate.py	/^def unsolvable_sas_task(msg):$/;"	f
unsubscribe	search/state_registry.cc	/^void StateRegistry::unsubscribe(PerStateInformationBase *const psi) const {$/;"	f	class:StateRegistry
untyped	translate/pddl/actions.py	/^    def untyped(self):$/;"	m	class:Action
untyped	translate/pddl/conditions.py	/^    def untyped(self):$/;"	m	class:Condition
unused_variable	search/utils/language.h	/^void unused_variable(const T &) {$/;"	f	namespace:utils
update	search/bliss/uintseqhash.cc	/^void UintSeqHash::update(unsigned int i)$/;"	f	class:bliss::UintSeqHash
update	search/merge_and_shrink/merge_tree.cc	/^void MergeTree::update(pair<int, int> merge, int new_index) {$/;"	f	class:merge_and_shrink::MergeTree
update	translate/greedy_join.py	/^    def update(self, symatom, delta):$/;"	m	class:OccurrencesTracker
update_constraints	search/operator_counting/lm_cut_constraints.cc	/^bool LMCutConstraints::update_constraints(const State &state,$/;"	f	class:operator_counting::LMCutConstraints
update_constraints	search/operator_counting/pho_constraints.cc	/^bool PhOConstraints::update_constraints(const State &state,$/;"	f	class:operator_counting::PhOConstraints
update_constraints	search/operator_counting/state_equation_constraints.cc	/^bool StateEquationConstraints::update_constraints(const State &state,$/;"	f	class:operator_counting::StateEquationConstraints
update_current_bucket_no	search/algorithms/priority_queues.h	/^    void update_current_bucket_no() const {$/;"	f	class:priority_queues::BucketQueue
update_f_value_statistics	search/search_engines/eager_search.cc	/^void EagerSearch::update_f_value_statistics(const SearchNode &node) {$/;"	f	class:eager_search::EagerSearch
update_f_value_statistics	search/search_engines/top_k_eager_search.cc	/^void TopKEagerSearch::update_f_value_statistics(const SearchNode &node) {$/;"	f	class:top_k_eager_search::TopKEagerSearch
update_h_and_g_values	search/cegar/abstraction.cc	/^void Abstraction::update_h_and_g_values() {$/;"	f	class:cegar::Abstraction
update_h_max_supporter	search/heuristics/lm_cut_landmarks.h	/^inline void RelaxedOperator::update_h_max_supporter() {$/;"	f	class:lm_cut_heuristic::RelaxedOperator
update_hm_entry	search/heuristics/hm_heuristic.cc	/^int HMHeuristic::update_hm_entry(const Tuple &t, int val) {$/;"	f	class:hm_heuristic::HMHeuristic
update_hm_table	search/heuristics/hm_heuristic.cc	/^void HMHeuristic::update_hm_table() {$/;"	f	class:hm_heuristic::HMHeuristic
update_index	translate/build_model.py	/^    def update_index(self, new_atom, cond_index):$/;"	m	class:JoinRule
update_index	translate/build_model.py	/^    def update_index(self, new_atom, cond_index):$/;"	m	class:ProductRule
update_index	translate/build_model.py	/^    def update_index(self, new_atom, cond_index):$/;"	m	class:ProjectRule
update_labeling	search/bliss/graph.cc	/^AbstractGraph::update_labeling(unsigned int* const labeling)$/;"	f	class:bliss::AbstractGraph
update_labeling_and_its_inverse	search/bliss/graph.cc	/^AbstractGraph::update_labeling_and_its_inverse(unsigned int* const labeling,$/;"	f	class:bliss::AbstractGraph
update_lm_status	search/landmarks/landmark_status_manager.cc	/^bool LandmarkStatusManager::update_lm_status(const GlobalState &global_state) {$/;"	f	class:landmarks::LandmarkStatusManager
update_maximum	search/utils/util.h	/^inline void update_maximum(int& current_value, int& old_value) {$/;"	f
update_option	search/merge_and_shrink/merge_tree.h	/^    UpdateOption update_option;$/;"	m	class:merge_and_shrink::MergeTree
update_option	search/merge_and_shrink/merge_tree_factory.h	/^    UpdateOption update_option;$/;"	m	class:merge_and_shrink::MergeTreeFactory
update_orbit_information	search/bliss/graph.cc	/^AbstractGraph::update_orbit_information(Orbit& o, const unsigned int* perm)$/;"	f	class:bliss::AbstractGraph
update_parent	search/search_space.cc	/^void SearchNode::update_parent(const SearchNode &parent_node,$/;"	f	class:SearchNode
update_path_graph	search/search_engines/top_k_eager_search.cc	/^void TopKEagerSearch::update_incomming_edges(SearchNode node, $/;"	f	class:top_k_eager_search::TopKEagerSearch
update_reached_lms	search/landmarks/landmark_status_manager.cc	/^bool LandmarkStatusManager::update_reached_lms(const GlobalState &parent_global_state,$/;"	f	class:landmarks::LandmarkStatusManager
update_transition_condition	search/domain_transition_graph.cc	/^void DTGFactory::update_transition_condition(const FactProxy &fact,$/;"	f	class:DTGFactory
upheap	search/bliss/heap.cc	/^void Heap::upheap(unsigned int index)$/;"	f	class:bliss::Heap
upper_bound	search/lp/lp_solver.h	/^    double upper_bound;$/;"	m	class:lp::LPConstraint
upper_bound	search/lp/lp_solver.h	/^    double upper_bound;$/;"	m	struct:lp::LPVariable
usage	search/options/option_parser.cc	/^string OptionParser::usage(string progname) {$/;"	f	class:options::OptionParser
use_action_landmarks	search/landmarks/landmark_cost_assignment.h	/^    bool use_action_landmarks;$/;"	m	class:landmarks::LandmarkUniformSharedCostAssignment
use_disjunctive_landmarks	search/landmarks/landmark_factory.h	/^    bool use_disjunctive_landmarks() const {return disjunctive_landmarks; }$/;"	f	class:landmarks::LandmarkFactory
use_dks	search/search_engines/eager_search.cc	/^bool EagerSearch::use_dks() const {$/;"	f	class:eager_search::EagerSearch
use_general_costs	search/cegar/abstraction.h	/^    const bool use_general_costs;$/;"	m	class:cegar::Abstraction
use_general_costs	search/cegar/cost_saturation.h	/^    const bool use_general_costs;$/;"	m	class:cegar::CostSaturation
use_multi_path_dependence	search/search_engines/eager_search.h	/^    const bool use_multi_path_dependence;$/;"	m	class:eager_search::EagerSearch
use_orders	search/landmarks/landmark_factory.h	/^    bool use_orders() const {return !no_orders; }  \/\/ only needed by HMLandmark$/;"	f	class:landmarks::LandmarkFactory
use_oss	search/search_engines/eager_search.cc	/^bool EagerSearch::use_oss() const {$/;"	f	class:eager_search::EagerSearch
use_preferred	search/search_engines/enforced_hill_climbing_search.h	/^    bool use_preferred;$/;"	m	class:enforced_hill_climbing_search::EnforcedHillClimbingSearch
use_preferred_operators	search/landmarks/landmark_count_heuristic.h	/^    const bool use_preferred_operators;$/;"	m	class:landmarks::LandmarkCountHeuristic
use_reasonable_orders	search/landmarks/landmark_factory.h	/^    bool use_reasonable_orders() const {return reasonable_orders; }$/;"	f	class:landmarks::LandmarkFactory
useful_groups	translate/invariant_finder.py	/^def useful_groups(invariants, initial_facts):$/;"	f
utils	search/cegar/abstraction.h	/^namespace utils {$/;"	n
utils	search/cegar/cost_saturation.h	/^namespace utils {$/;"	n
utils	search/cegar/split_selector.h	/^namespace utils {$/;"	n
utils	search/cegar/subtask_generators.h	/^namespace utils {$/;"	n
utils	search/globals.h	/^namespace utils {$/;"	n
utils	search/merge_and_shrink/label_reduction.h	/^namespace utils {$/;"	n
utils	search/merge_and_shrink/merge_and_shrink_heuristic.h	/^namespace utils {$/;"	n
utils	search/merge_and_shrink/merge_scoring_function_single_random.h	/^namespace utils {$/;"	n
utils	search/merge_and_shrink/merge_scoring_function_total_order.h	/^namespace utils {$/;"	n
utils	search/merge_and_shrink/merge_tree.h	/^namespace utils {$/;"	n
utils	search/merge_and_shrink/merge_tree_factory.h	/^namespace utils {$/;"	n
utils	search/merge_and_shrink/shrink_bucket_based.h	/^namespace utils {$/;"	n
utils	search/pdbs/pattern_collection_generator_genetic.h	/^namespace utils {$/;"	n
utils	search/pdbs/pattern_collection_generator_hillclimbing.h	/^namespace utils {$/;"	n
utils	search/potentials/diverse_potential_heuristics.h	/^namespace utils {$/;"	n
utils	search/potentials/util.h	/^namespace utils {$/;"	n
utils	search/sampling.h	/^namespace utils {$/;"	n
utils	search/structural_symmetries/group.h	/^namespace utils {$/;"	n
utils	search/utils/collections.h	/^namespace utils {$/;"	n
utils	search/utils/countdown_timer.cc	/^namespace utils {$/;"	n	file:
utils	search/utils/countdown_timer.h	/^namespace utils {$/;"	n
utils	search/utils/hash.h	/^namespace utils {$/;"	n
utils	search/utils/language.h	/^namespace utils {$/;"	n
utils	search/utils/logging.cc	/^namespace utils {$/;"	n	file:
utils	search/utils/logging.h	/^namespace utils {$/;"	n
utils	search/utils/markup.cc	/^namespace utils {$/;"	n	file:
utils	search/utils/markup.h	/^namespace utils {$/;"	n
utils	search/utils/math.cc	/^namespace utils {$/;"	n	file:
utils	search/utils/math.h	/^namespace utils {$/;"	n
utils	search/utils/memory.cc	/^namespace utils {$/;"	n	file:
utils	search/utils/memory.h	/^namespace utils {$/;"	n
utils	search/utils/rng.cc	/^namespace utils {$/;"	n	file:
utils	search/utils/rng.h	/^namespace utils {$/;"	n
utils	search/utils/rng_options.cc	/^namespace utils {$/;"	n	file:
utils	search/utils/rng_options.h	/^namespace utils {$/;"	n
utils	search/utils/system.cc	/^namespace utils {$/;"	n	file:
utils	search/utils/system.h	/^namespace utils {$/;"	n
utils	search/utils/system_unix.cc	/^namespace utils {$/;"	n	file:
utils	search/utils/system_windows.cc	/^namespace utils {$/;"	n	file:
utils	search/utils/timer.cc	/^namespace utils {$/;"	n	file:
utils	search/utils/timer.h	/^namespace utils {$/;"	n
v	search/bliss/bignum.h	/^  mpz_t v;$/;"	m	class:bliss::BigNum
val	search/global_operator.h	/^    int val;$/;"	m	struct:GlobalCondition
val	search/global_operator.h	/^    int val;$/;"	m	struct:GlobalEffect
valid_keys	search/options/option_parser.h	/^    std::vector<std::string> valid_keys;$/;"	m	class:options::OptionParser
validate	translate/build_model.py	/^    def validate(self):$/;"	m	class:JoinRule
validate	translate/build_model.py	/^    def validate(self):$/;"	m	class:ProductRule
validate	translate/build_model.py	/^    def validate(self):$/;"	m	class:ProjectRule
validate	translate/sas_tasks.py	/^    def validate(self):$/;"	m	class:SASTask
validate	translate/sas_tasks.py	/^    def validate(self):$/;"	m	class:SASVariables
validate	translate/sas_tasks.py	/^    def validate(self, variables):$/;"	m	class:SASGoal
validate	translate/sas_tasks.py	/^    def validate(self, variables):$/;"	m	class:SASInit
validate	translate/sas_tasks.py	/^    def validate(self, variables):$/;"	m	class:SASMutexGroup
validate	translate/sas_tasks.py	/^    def validate(self, variables):$/;"	m	class:SASOperator
validate	translate/sas_tasks.py	/^    def validate(self, variables, init):$/;"	m	class:SASAxiom
validate_and_normalize_pattern	search/pdbs/validation.cc	/^void validate_and_normalize_pattern(const TaskProxy &task_proxy,$/;"	f	namespace:pdbs
validate_and_normalize_patterns	search/pdbs/validation.cc	/^void validate_and_normalize_patterns(const TaskProxy &task_proxy,$/;"	f	namespace:pdbs
validate_condition	translate/sas_tasks.py	/^    def validate_condition(self, condition):$/;"	m	class:SASVariables
validate_fact	translate/sas_tasks.py	/^    def validate_fact(self, fact):$/;"	m	class:SASVariables
validate_h_max	search/heuristics/lm_cut_landmarks.cc	/^void LandmarkCutLandmarks::validate_h_max() const {$/;"	f	class:lm_cut_heuristic::LandmarkCutLandmarks
value	search/abstract_task.h	/^    int value;$/;"	m	struct:FactPair
value	search/cegar/refinement_hierarchy.h	/^    int value;$/;"	m	class:cegar::Node
value	search/domain_transition_graph.h	/^    int value;$/;"	m	struct:ValueNode
value	search/domain_transition_graph.h	/^    short value;$/;"	m	struct:LocalAssignment
value	search/evaluators/const_evaluator.h	/^    int value;$/;"	m	class:const_evaluator::ConstEvaluator
value	search/options/parse_tree.h	/^    std::string value;$/;"	m	struct:options::ParseNode
value	search/state_id.h	/^    int value;$/;"	m	class:StateID
value	search/structural_symmetries/permutation.h	/^    int* value;$/;"	m	class:Permutation
value	search/task_proxy.h	/^    int value;$/;"	m	class:FactsProxyIterator
value_explanations	search/options/doc_store.h	/^    std::vector<std::pair<std::string, std::string>> value_explanations;$/;"	m	struct:options::ArgumentInfo
value_map	search/tasks/domain_abstracted_task.h	/^    const std::vector<std::vector<int>> value_map;$/;"	m	class:extra_tasks::DomainAbstractedTask
value_map	search/tasks/domain_abstracted_task_factory.cc	/^    vector<vector<int>> value_map;$/;"	m	class:extra_tasks::DomainAbstractedTaskFactory	file:
value_type	search/ext/tree.hh	/^				typedef T                               value_type;$/;"	t	class:tree::iterator_base
value_type	search/ext/tree.hh	/^		typedef T value_type;$/;"	t	class:tree
values	search/cegar/split_selector.h	/^    const std::vector<int> values;$/;"	m	struct:cegar::Split
values	search/task_proxy.h	/^    std::vector<int> values;$/;"	m	class:State
var	search/abstract_task.h	/^    int var;$/;"	m	struct:FactPair
var	search/cegar/refinement_hierarchy.h	/^    int var;$/;"	m	class:cegar::Node
var	search/domain_transition_graph.h	/^    int var;$/;"	m	class:DomainTransitionGraph
var	search/global_operator.h	/^    int var;$/;"	m	struct:GlobalCondition
var	search/global_operator.h	/^    int var;$/;"	m	struct:GlobalEffect
var_by_val	search/structural_symmetries/permutation.cc	/^vector<int> Permutation::var_by_val;$/;"	m	class:Permutation	file:
var_by_val	search/structural_symmetries/permutation.h	/^    static std::vector<int> var_by_val;$/;"	m	class:Permutation
var_domain_size	search/pdbs/match_tree.cc	/^    int var_domain_size;$/;"	m	struct:pdbs::MatchTree::Node	file:
var_id	search/cegar/split_selector.h	/^    const int var_id;$/;"	m	struct:cegar::Split
var_id	search/merge_and_shrink/merge_and_shrink_representation.h	/^    const int var_id;$/;"	m	class:merge_and_shrink::MergeAndShrinkRepresentationLeaf
var_id	search/pdbs/match_tree.cc	/^    int var_id;$/;"	m	struct:pdbs::MatchTree::Node	file:
var_id	search/task_proxy.h	/^    int var_id;$/;"	m	class:FactsProxyIterator
var_infos	search/algorithms/int_packer.h	/^    std::vector<VariableInfo> var_infos;$/;"	m	class:int_packer::IntPacker
var_no	search/axioms.h	/^        int var_no;$/;"	m	struct:AxiomEvaluator::NegationByFailureInfo
variable_order_type	search/merge_and_shrink/merge_tree_factory_linear.h	/^    VariableOrderType variable_order_type;$/;"	m	class:merge_and_shrink::MergeTreeFactoryLinear
variable_order_type	search/variable_order_finder.h	/^    const VariableOrderType variable_order_type;$/;"	m	class:VariableOrderFinder
variables	search/lp/lp_solver.h	/^    std::vector<int> variables;$/;"	m	class:lp::LPConstraint
variables	translate/greedy_join.py	/^    def variables(self):$/;"	m	class:OccurrencesTracker
variables_to_numbers	translate/build_model.py	/^def variables_to_numbers(effect, conditions):$/;"	f
vars_affected	search/structural_symmetries/permutation.h	/^    std::vector<int> vars_affected;$/;"	m	class:Permutation
verbose_level	search/bliss/graph.h	/^  unsigned int verbose_level;$/;"	m	class:bliss::AbstractGraph
verbosity	search/merge_and_shrink/merge_and_shrink_heuristic.h	/^    const Verbosity verbosity;$/;"	m	class:merge_and_shrink::MergeAndShrinkHeuristic
verbstr	search/bliss/graph.h	/^  FILE *verbstr;$/;"	m	class:bliss::AbstractGraph
verify_axiom_predicates	translate/normalize.py	/^def verify_axiom_predicates(task):$/;"	f
verify_list_non_empty	search/options/options.h	/^    void verify_list_non_empty(std::string key) const {$/;"	f	class:options::Options
verify_no_axioms	search/globals.cc	/^void verify_no_axioms() {$/;"	f
verify_no_axioms	search/task_tools.cc	/^void verify_no_axioms(TaskProxy task) {$/;"	f
verify_no_axioms_no_conditional_effects	search/globals.cc	/^void verify_no_axioms_no_conditional_effects() {$/;"	f
verify_no_conditional_effects	search/globals.cc	/^void verify_no_conditional_effects() {$/;"	f
verify_no_conditional_effects	search/task_tools.cc	/^void verify_no_conditional_effects(TaskProxy task) {$/;"	f
version	search/bliss/defs.h	/^static const char * const version = "0.72";$/;"	m	namespace:bliss
vertex_color_invariant	search/bliss/graph.cc	/^Digraph::vertex_color_invariant(const Digraph* const g, const unsigned int vnum)$/;"	f	class:bliss::Digraph
vertex_color_invariant	search/bliss/graph.cc	/^Graph::vertex_color_invariant(const Graph* const g, const unsigned int v)$/;"	f	class:bliss::Graph
vertices	search/bliss/graph.h	/^  std::vector<Vertex> vertices;$/;"	m	class:bliss::Digraph
vertices	search/bliss/graph.h	/^  std::vector<Vertex> vertices;$/;"	m	class:bliss::Graph
visit	translate/variable_order.py	/^    def visit(self, vertex):$/;"	m	class:SCC
w	search/evaluators/weighted_evaluator.h	/^    int w;$/;"	m	class:weighted_evaluator::WeightedEvaluator
waiting_list	search/heuristics/cea_heuristic.cc	/^    vector<LocalTransition *> waiting_list;$/;"	m	struct:cea_heuristic::LocalProblemNode	file:
warn_on_unusual_options	search/merge_and_shrink/merge_and_shrink_heuristic.cc	/^void MergeAndShrinkHeuristic::warn_on_unusual_options() const {$/;"	f	class:merge_and_shrink::MergeAndShrinkHeuristic
warning	search/options/option_parser.cc	/^void OptionParser::warning(string msg) {$/;"	f	class:options::OptionParser
was_updated	search/heuristics/hm_heuristic.h	/^    bool was_updated;$/;"	m	class:hm_heuristic::HMHeuristic
weight_graph_from_axioms	translate/variable_order.py	/^    def weight_graph_from_axioms(self, axioms):$/;"	m	class:CausalGraph
weight_graph_from_ops	translate/variable_order.py	/^    def weight_graph_from_ops(self, operators):$/;"	m	class:CausalGraph
weighted_evaluator	search/evaluators/weighted_evaluator.cc	/^namespace weighted_evaluator {$/;"	n	file:
weighted_evaluator	search/evaluators/weighted_evaluator.h	/^namespace weighted_evaluator {$/;"	n
wrap	search/ext/tree.hh	/^template <typename iter> iter tree<T, tree_node_allocator>::wrap(iter position, const T& x)$/;"	f	class:tree
wrap_lines	translate/pddl_parser/pretty_print.py	/^def wrap_lines(lines):$/;"	f
wrapped_queue	search/algorithms/priority_queues.h	/^    AbstractQueue<Value> *wrapped_queue;$/;"	m	class:priority_queues::AdaptiveQueue
write_dimacs	search/bliss/graph.cc	/^Digraph::write_dimacs(FILE* const fp)$/;"	f	class:bliss::Digraph
write_dimacs	search/bliss/graph.cc	/^Graph::write_dimacs(FILE* const fp)$/;"	f	class:bliss::Graph
write_dot	search/bliss/graph.cc	/^Digraph::write_dot(FILE* const fp)$/;"	f	class:bliss::Digraph
write_dot	search/bliss/graph.cc	/^Digraph::write_dot(const char* const filename)$/;"	f	class:bliss::Digraph
write_dot	search/bliss/graph.cc	/^Graph::write_dot(FILE* const fp)$/;"	f	class:bliss::Graph
write_dot	search/bliss/graph.cc	/^Graph::write_dot(const char* const filename)$/;"	f	class:bliss::Graph
write_overflow_warning	search/heuristics/additive_heuristic.cc	/^void AdditiveHeuristic::write_overflow_warning() {$/;"	f	class:additive_heuristic::AdditiveHeuristic
write_overflow_warning	search/landmarks/exploration.cc	/^void Exploration::write_overflow_warning() {$/;"	f	class:landmarks::Exploration
write_reentrant	search/utils/system_unix.cc	/^void write_reentrant(int filedescr, const char *message, int len) {$/;"	f	namespace:utils
write_reentrant_char	search/utils/system_unix.cc	/^void write_reentrant_char(int filedescr, char c) {$/;"	f	namespace:utils
write_reentrant_int	search/utils/system_unix.cc	/^void write_reentrant_int(int filedescr, int value) {$/;"	f	namespace:utils
write_reentrant_str	search/utils/system_unix.cc	/^void write_reentrant_str(int filedescr, const char *message) {$/;"	f	namespace:utils
written_vars	search/pruning/stubborn_sets_ec.h	/^    std::vector<bool> written_vars;$/;"	m	class:stubborn_sets_ec::StubbornSetsEC
zero_one_pdbs	search/pdbs/zero_one_pdbs_heuristic.h	/^    ZeroOnePDBs zero_one_pdbs;$/;"	m	class:pdbs::ZeroOnePDBsHeuristic
zero_unused_bits	search/algorithms/dynamic_bitset.h	/^    void zero_unused_bits() {$/;"	f	class:dynamic_bitset::DynamicBitset
zeros	search/algorithms/dynamic_bitset.h	/^    static const Block zeros;$/;"	m	class:dynamic_bitset::DynamicBitset
zeros	search/algorithms/dynamic_bitset.h	/^const Block DynamicBitset<Block>::zeros = Block(0);$/;"	m	class:dynamic_bitset::DynamicBitset
zplit_cell	search/bliss/partition.cc	/^Partition::zplit_cell(Partition::Cell* const cell,$/;"	f	class:bliss::Partition
~AbstractGraph	search/bliss/graph.cc	/^AbstractGraph::~AbstractGraph()$/;"	f	class:bliss::AbstractGraph
~AbstractOperator	search/pdbs/pattern_database.cc	/^AbstractOperator::~AbstractOperator() {$/;"	f	class:pdbs::AbstractOperator
~AbstractQueue	search/algorithms/priority_queues.h	/^    virtual ~AbstractQueue() {}$/;"	f	class:priority_queues::AbstractQueue
~Abstraction	search/cegar/abstraction.cc	/^Abstraction::~Abstraction() {$/;"	f	class:cegar::Abstraction
~AdaptiveQueue	search/algorithms/priority_queues.h	/^    ~AdaptiveQueue() {$/;"	f	class:priority_queues::AdaptiveQueue
~AdditiveHeuristic	search/heuristics/additive_heuristic.cc	/^AdditiveHeuristic::~AdditiveHeuristic() {$/;"	f	class:additive_heuristic::AdditiveHeuristic
~BigNum	search/bliss/bignum.h	/^  ~BigNum() {mpz_clear(v); }$/;"	f	class:bliss::BigNum
~BlindSearchHeuristic	search/heuristics/blind_search_heuristic.cc	/^BlindSearchHeuristic::~BlindSearchHeuristic() {$/;"	f	class:blind_search_heuristic::BlindSearchHeuristic
~BucketQueue	search/algorithms/priority_queues.h	/^    virtual ~BucketQueue() {$/;"	f	class:priority_queues::BucketQueue
~CGCache	search/heuristics/cg_cache.cc	/^CGCache::~CGCache() {$/;"	f	class:cg_heuristic::CGCache
~CGHeuristic	search/heuristics/cg_heuristic.cc	/^CGHeuristic::~CGHeuristic() {$/;"	f	class:cg_heuristic::CGHeuristic
~CausalGraphBuilder	search/causal_graph.cc	/^    ~CausalGraphBuilder() {$/;"	f	struct:CausalGraphBuilder
~CombiningEvaluator	search/evaluators/combining_evaluator.cc	/^CombiningEvaluator::~CombiningEvaluator() {$/;"	f	class:combining_evaluator::CombiningEvaluator
~ContextEnhancedAdditiveHeuristic	search/heuristics/cea_heuristic.cc	/^ContextEnhancedAdditiveHeuristic::~ContextEnhancedAdditiveHeuristic() {$/;"	f	class:cea_heuristic::ContextEnhancedAdditiveHeuristic
~CountdownTimer	search/utils/countdown_timer.cc	/^CountdownTimer::~CountdownTimer() {$/;"	f	class:utils::CountdownTimer
~Digraph	search/bliss/graph.cc	/^Digraph::~Digraph()$/;"	f	class:bliss::Digraph
~Distances	search/merge_and_shrink/distances.cc	/^Distances::~Distances() {$/;"	f	class:merge_and_shrink::Distances
~DocPrinter	search/options/doc_printer.cc	/^DocPrinter::~DocPrinter() {$/;"	f	class:options::DocPrinter
~EnforcedHillClimbingSearch	search/search_engines/enforced_hill_climbing_search.cc	/^EnforcedHillClimbingSearch::~EnforcedHillClimbingSearch() {$/;"	f	class:enforced_hill_climbing_search::EnforcedHillClimbingSearch
~EquivalenceRelation	search/algorithms/equivalence_relation.cc	/^EquivalenceRelation::~EquivalenceRelation() {$/;"	f	class:equivalence_relation::EquivalenceRelation
~ErrorCatchingCoinMessageHandler	search/lp/lp_internals.cc	/^    ~ErrorCatchingCoinMessageHandler() {$/;"	f	class:lp::ErrorCatchingCoinMessageHandler
~FFHeuristic	search/heuristics/ff_heuristic.cc	/^FFHeuristic::~FFHeuristic() {$/;"	f	class:ff_heuristic::FFHeuristic
~FTSFactory	search/merge_and_shrink/fts_factory.cc	/^FTSFactory::~FTSFactory() {$/;"	f	class:merge_and_shrink::FTSFactory
~FactoredTransitionSystem	search/merge_and_shrink/factored_transition_system.cc	/^FactoredTransitionSystem::~FactoredTransitionSystem() {$/;"	f	class:merge_and_shrink::FactoredTransitionSystem
~GeneratorSwitch	search/successor_generator.cc	/^GeneratorSwitch::~GeneratorSwitch() {$/;"	f	class:GeneratorSwitch
~GoalCountHeuristic	search/heuristics/goal_count_heuristic.cc	/^GoalCountHeuristic::~GoalCountHeuristic() {$/;"	f	class:goal_count_heuristic::GoalCountHeuristic
~Graph	search/bliss/graph.cc	/^Graph::~Graph()$/;"	f	class:bliss::Graph
~GraphCreator	search/structural_symmetries/graph_creator.cc	/^GraphCreator::~GraphCreator() {$/;"	f	class:GraphCreator
~Group	search/structural_symmetries/group.cc	/^Group::~Group() {$/;"	f	class:Group
~HSPMaxHeuristic	search/heuristics/max_heuristic.cc	/^HSPMaxHeuristic::~HSPMaxHeuristic() {$/;"	f	class:max_heuristic::HSPMaxHeuristic
~Heap	search/bliss/heap.cc	/^Heap::~Heap()$/;"	f	class:bliss::Heap
~HeapQueue	search/algorithms/priority_queues.h	/^    virtual ~HeapQueue() {$/;"	f	class:priority_queues::HeapQueue
~Heuristic	search/heuristic.cc	/^Heuristic::~Heuristic() {$/;"	f	class:Heuristic
~IntPacker	search/algorithms/int_packer.cc	/^IntPacker::~IntPacker() {$/;"	f	class:int_packer::IntPacker
~IntRelationBuilder	search/causal_graph.cc	/^IntRelationBuilder::~IntRelationBuilder() {$/;"	f	class:IntRelationBuilder
~KQueue	search/bliss/kqueue.h	/^KQueue<Type>::~KQueue()$/;"	f	class:bliss::KQueue
~KStack	search/bliss/kstack.h	/^KStack<Type>::~KStack()$/;"	f	class:bliss::KStack
~LPSolver	search/lp/lp_solver.cc	/^LPSolver::~LPSolver() {$/;"	f	class:lp::LPSolver
~Label	search/merge_and_shrink/labels.h	/^    ~Label() {}$/;"	f	class:merge_and_shrink::Label
~LandmarkCountHeuristic	search/landmarks/landmark_count_heuristic.cc	/^LandmarkCountHeuristic::~LandmarkCountHeuristic() {$/;"	f	class:landmarks::LandmarkCountHeuristic
~LandmarkCutHeuristic	search/heuristics/lm_cut_heuristic.cc	/^LandmarkCutHeuristic::~LandmarkCutHeuristic() {$/;"	f	class:lm_cut_heuristic::LandmarkCutHeuristic
~LandmarkCutLandmarks	search/heuristics/lm_cut_landmarks.cc	/^LandmarkCutLandmarks::~LandmarkCutLandmarks() {$/;"	f	class:lm_cut_heuristic::LandmarkCutLandmarks
~LocalProblem	search/heuristics/cea_heuristic.cc	/^    ~LocalProblem() {$/;"	f	struct:cea_heuristic::LocalProblem
~LocalProblemNode	search/heuristics/cea_heuristic.cc	/^    ~LocalProblemNode() {$/;"	f	struct:cea_heuristic::LocalProblemNode
~LocalTransition	search/heuristics/cea_heuristic.cc	/^    ~LocalTransition() {$/;"	f	struct:cea_heuristic::LocalTransition
~MatchTree	search/pdbs/match_tree.cc	/^MatchTree::~MatchTree() {$/;"	f	class:pdbs::MatchTree
~MaxEvaluator	search/evaluators/max_evaluator.cc	/^MaxEvaluator::~MaxEvaluator() {$/;"	f	class:max_evaluator::MaxEvaluator
~MemoryTracer	search/utils/logging.cc	/^MemoryTracer::~MemoryTracer() {$/;"	f	class:utils::MemoryTracer
~MergeAndShrinkRepresentation	search/merge_and_shrink/merge_and_shrink_representation.cc	/^MergeAndShrinkRepresentation::~MergeAndShrinkRepresentation() {$/;"	f	class:merge_and_shrink::MergeAndShrinkRepresentation
~MergeTree	search/merge_and_shrink/merge_tree.cc	/^MergeTree::~MergeTree() {$/;"	f	class:merge_and_shrink::MergeTree
~MergeTreeNode	search/merge_and_shrink/merge_tree.cc	/^MergeTreeNode::~MergeTreeNode() {$/;"	f	class:merge_and_shrink::MergeTreeNode
~Node	search/cegar/refinement_hierarchy.cc	/^Node::~Node() {$/;"	f	class:cegar::Node
~Node	search/pdbs/match_tree.cc	/^MatchTree::Node::~Node() {$/;"	f	class:pdbs::MatchTree::Node
~OperatorCountingHeuristic	search/operator_counting/operator_counting_heuristic.cc	/^OperatorCountingHeuristic::~OperatorCountingHeuristic() {$/;"	f	class:operator_counting::OperatorCountingHeuristic
~OperatorPermutation	search/structural_symmetries/operator_permutation.cc	/^OperatorPermutation::~OperatorPermutation(){$/;"	f	class:OperatorPermutation
~Orbit	search/bliss/orbit.cc	/^Orbit::~Orbit()$/;"	f	class:bliss::Orbit
~Partition	search/bliss/partition.cc	/^Partition::~Partition()$/;"	f	class:bliss::Partition
~PerStateInformation	search/per_state_information.h	/^    ~PerStateInformation() {$/;"	f	class:PerStateInformation
~PerStateInformationBase	search/per_state_information.h	/^    virtual ~PerStateInformationBase() {}$/;"	f	class:PerStateInformationBase
~Permutation	search/structural_symmetries/permutation.cc	/^Permutation::~Permutation(){$/;"	f	class:Permutation
~Placeholder	search/options/any.h	/^        virtual ~Placeholder() {}$/;"	f	class:options::Any::Placeholder
~PlainPrinter	search/options/doc_printer.cc	/^PlainPrinter::~PlainPrinter() {$/;"	f	class:options::PlainPrinter
~PluginTypeInfo	search/options/registries.h	/^    ~PluginTypeInfo() {$/;"	f	class:options::PluginTypeInfo
~PotentialHeuristic	search/potentials/potential_heuristic.cc	/^PotentialHeuristic::~PotentialHeuristic() {$/;"	f	class:potentials::PotentialHeuristic
~PrefEvaluator	search/evaluators/pref_evaluator.cc	/^PrefEvaluator::~PrefEvaluator() {$/;"	f	class:pref_evaluator::PrefEvaluator
~RandomNumberGenerator	search/utils/rng.cc	/^RandomNumberGenerator::~RandomNumberGenerator() {$/;"	f	class:utils::RandomNumberGenerator
~RelaxationHeuristic	search/heuristics/relaxation_heuristic.cc	/^RelaxationHeuristic::~RelaxationHeuristic() {$/;"	f	class:relaxation_heuristic::RelaxationHeuristic
~SearchEngine	search/search_engine.cc	/^SearchEngine::~SearchEngine() {$/;"	f	class:SearchEngine
~SegmentedArrayVector	search/algorithms/segmented_vector.h	/^    ~SegmentedArrayVector() {$/;"	f	class:segmented_vector::SegmentedArrayVector
~SegmentedVector	search/algorithms/segmented_vector.h	/^    ~SegmentedVector() {$/;"	f	class:segmented_vector::SegmentedVector
~SplitSelector	search/cegar/split_selector.cc	/^SplitSelector::~SplitSelector() {$/;"	f	class:cegar::SplitSelector
~StateID	search/state_id.h	/^    ~StateID() {$/;"	f	class:StateID
~StateRegistry	search/state_registry.cc	/^StateRegistry::~StateRegistry() {$/;"	f	class:StateRegistry
~SuccessorGenerator	search/successor_generator.cc	/^SuccessorGenerator::~SuccessorGenerator() {$/;"	f	class:SuccessorGenerator
~SumEvaluator	search/evaluators/sum_evaluator.cc	/^SumEvaluator::~SumEvaluator() {$/;"	f	class:sum_evaluator::SumEvaluator
~TraceBlock	search/utils/logging.cc	/^TraceBlock::~TraceBlock() {$/;"	f	class:utils::TraceBlock
~TransitionSystem	search/merge_and_shrink/transition_system.cc	/^TransitionSystem::~TransitionSystem() {$/;"	f	class:merge_and_shrink::TransitionSystem
~Txt2TagsPrinter	search/options/doc_printer.cc	/^Txt2TagsPrinter::~Txt2TagsPrinter() {$/;"	f	class:options::Txt2TagsPrinter
~VariableInfo	search/algorithms/int_packer.cc	/^    ~VariableInfo() {$/;"	f	class:int_packer::IntPacker::VariableInfo
~Vertex	search/bliss/graph.cc	/^Digraph::Vertex::~Vertex()$/;"	f	class:bliss::Digraph::Vertex
~Vertex	search/bliss/graph.cc	/^Graph::Vertex::~Vertex()$/;"	f	class:bliss::Graph::Vertex
~WeightedEvaluator	search/evaluators/weighted_evaluator.cc	/^WeightedEvaluator::~WeightedEvaluator() {$/;"	f	class:weighted_evaluator::WeightedEvaluator
~const_iterator	search/per_state_information.h	/^        ~const_iterator() {}$/;"	f	class:PerStateInformation::const_iterator
~tree	search/ext/tree.hh	/^tree<T, tree_node_allocator>::~tree()$/;"	f	class:tree
