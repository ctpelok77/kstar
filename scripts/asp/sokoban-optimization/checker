#!/usr/bin/env perl

use strict;

my $debugoutput = 0; # set to 1 for getting weird output

my %up = ();
my %down = ();
my %left = ();
my %right = ();
my %boxes = ();
my %targets = ();
my %steps = ();
my %next = ();
my $sokoban = "";
my %pushes = ();

#############################################################################
# subs

######################
# 

sub invalid_exit {
  print "WARN\n";
  exit 42;
}

######################
# 

sub incorrect_exit {
  print "FAIL\n";
  exit 0;
}

######################
# 

sub correct_exit {
  my ($val) = @_;
  print "OK $val\n";
  exit 0;
}

######################
# 

sub parse_sokoban_instance_and_solution {
  my $IF = shift;
  my ($up,$down,$left,$right,$boxes,$targets,$steps,$next,$sokoban,$pushes) = @_;

  while(<$IF>) {
    chomp;
    s/%.*$//;
    my @facts = split(/\.\s*/);
    foreach my $f (@facts) {
      if( $f =~ /^top\(([a-z0-9][a-zA-Z0-9_]*),([a-z0-9][a-zA-Z0-9_]*)\)$/ ) {
        return 0 if(exists $up->{$1} && $up->{$1} != $2);
        return 0 if(exists $down->{$2} && $down->{$2} != $1);
        $up->{$1} = $2;
        $down->{$2} = $1;
      } elsif ( $f =~ /^right\(([a-z0-9][a-zA-Z0-9_]*),([a-z0-9][a-zA-Z0-9_]*)\)$/ ) {
        return 0 if(exists $right->{$1} && $right->{$1} != $2);
        return 0 if(exists $left->{$2} && $left->{$2} != $1);
        $right->{$1} = $2;
        $left->{$2} = $1;
      } elsif ( $f =~ /^box\(([a-z0-9][a-zA-Z0-9_]*)\)$/ ) {
        $boxes->{$1} = 1;
      } elsif ( $f =~ /^solution\(([a-z0-9][a-zA-Z0-9_]*)\)$/ ) {
        $targets->{$1} = 1;
      } elsif ( $f =~ /^sokoban\(([a-z0-9][a-zA-Z0-9_]*)\)$/ ) {
        return 0 if($$sokoban != "" && $$sokoban != $1);
        $$sokoban = $1;
      } elsif ( $f =~ /^step\(([a-z0-9][a-zA-Z0-9_]*)\)$/ ) {
        $steps->{$1} = 1;
      } elsif ( $f =~ /^next\(([a-z0-9][a-zA-Z0-9_]*),([a-z0-9][a-zA-Z0-9_]*)\)$/ ) {
        return 0 if(exists $next->{$1} && $next->{$1} != $2);
        $next->{$1} = $2;
      } elsif( $f =~ /^push\(([a-z0-9][a-zA-Z0-9_]*),([a-z0-9][a-zA-Z0-9_]*),([a-z0-9][a-zA-Z0-9_]*),([a-z0-9][a-zA-Z0-9_]*)\)$/ ) {
        my @t = ($1,$2,$3);
        $pushes->{$4} = \@t;
      } else {
        print "$f\n" if $debugoutput;
        return 0;
      }
    }
  }
  return 1;
}


######################
# 

sub reachable {
  my ($snode,$tnode,$up,$down,$left,$right,$boxes) = @_;

  my %old = ();
  my %new = ();

  print "$snode == $tnode\n" if $debugoutput;
  return 1 if $snode eq $tnode;

  $new{$snode} = 1;

  while( scalar keys %new > 0 ) {
    for my $vertex ( keys %new ) {
      delete $new{$vertex};
      $old{$vertex} = 1;
      print "popped $vertex\n" if $debugoutput;
      if(exists $up->{$vertex} && ! $old{$up->{$vertex}} && ! $new{$up->{$vertex}}) {
        print "pushed $up->{$vertex}\n" if $debugoutput;
        return 1 if $up->{$vertex} eq $tnode;
        $new{$up->{$vertex}} = 1 unless $boxes->{$up->{$vertex}};
      }
      if(exists $down->{$vertex} && ! $old{$down->{$vertex}} && ! $new{$down->{$vertex}}) {
        print "pushed $down->{$vertex}\n" if $debugoutput;
        return 1 if $down->{$vertex} eq $tnode;
        $new{$down->{$vertex}} = 1 unless $boxes->{$down->{$vertex}};
      }
      if(exists $left->{$vertex} && ! $old{$left->{$vertex}} && ! $new{$left->{$vertex}}) {
        print "pushed $left->{$vertex}\n" if $debugoutput;
        return 1 if $left->{$vertex} eq $tnode;
        $new{$left->{$vertex}} = 1 unless $boxes->{$left->{$vertex}};
      }
      if(exists $right->{$vertex} && ! $old{$right->{$vertex}} && ! $new{$right->{$vertex}}) {
        print "pushed $right->{$vertex}\n" if $debugoutput;
        return 1 if $right->{$vertex} eq $tnode;
        $new{$right->{$vertex}} = 1 unless $boxes->{$right->{$vertex}};
      }
    }
  }
  return 0;
}

######################
# 

sub get_first_step {
  my ($next) = @_;
  my @diff = ();
  my %count = ();

  for my $e (values %$next) { 
    $count{$e}++ if exists $next->{$e};
  }
  for my $e (keys %$next) {
    push @diff, $e if ! exists $count{$e};
  }

  return "" if $#diff != 0;

  return $diff[0];
}

######################
# 

sub get_start_location_for_push {
  my ($snode,$direction,$up,$down,$left,$right) = @_;
  print "$snode , $direction\n" if $debugoutput;
  if( $direction eq "down" && exists $up->{$snode} ) {
    return $up->{$snode};
  } elsif( $direction eq "up" && exists $down->{$snode} ) {
    return $down->{$snode};
  } elsif( $direction eq "right" && exists $left->{$snode} ) {
    return $left->{$snode};
  } elsif( $direction eq "left" && exists $right->{$snode} ) {
    return $right->{$snode};
  }
  return ""
}

######################
# 

sub check_box_push_path {
  my ($snode,$direction,$enode,$up,$down,$left,$right,$boxes) = @_;

  exists $boxes->{$snode} || return 0;

  my $dir;
  if( $direction eq "down" ) {
    $dir = $down;
  } elsif( $direction eq "up" ) {
    $dir = $up;
  } elsif( $direction eq "right" ) {
    $dir = $right;
  } elsif( $direction eq "left" ) {
    $dir = $left;
  } else {
    return 0;
  }

  print "$direction\n" if $debugoutput;
  print "e $enode\n" if $debugoutput;
  while($snode ne $enode) {
    print "pre $snode\n" if $debugoutput;
    exists $dir->{$snode} || return 0;
    $snode = $dir->{$snode};
    print "post $snode\n" if $debugoutput;
    ! exists $boxes->{$snode} || return 0;
  }

  return 1;
}

######################
# 

sub check_push {
  my ($up,$down,$left,$right,$boxes,$steps,$next,$sokoban,$push) = @_;

  print join(" ",@$push) . "\n" if $debugoutput;
  print "$#$push\n" if $debugoutput;
  $#$push == 2 || return 0;
  my ($snode,$direction,$enode) = @$push;

  my $sokobanpushpos = get_start_location_for_push($snode,$direction,$up,$down,$left,$right);

  print "_" . $sokobanpushpos . "_\n" if $debugoutput;
  $sokobanpushpos ne "" || return 0;

  reachable($$sokoban,$sokobanpushpos,$up,$down,$left,$right,$boxes) || return 0;

  check_box_push_path($snode,$direction,$enode,$up,$down,$left,$right,$boxes) || return 0;

  delete $boxes->{$snode};
  $boxes->{$enode} = 1;
  $$sokoban = get_start_location_for_push($enode,$direction,$up,$down,$left,$right);

  $$sokoban ne "" || return 0;

  return 1;
}

sub verify_final_configuration {
  my ($boxes,$targets) = @_;

  for my $t (keys %$targets) {
    exists $boxes->{$t} || return 0;
  }
  return 1;
}

#############################################################################
# "main"

if ( @ARGV != 0 )
{
	die "Usage: $0\n";
}


# Parse instance file and solver output.
parse_sokoban_instance_and_solution(\*STDIN,\%up,\%down,\%left,\%right,\%boxes,\%targets,\%steps,\%next,\$sokoban,\%pushes) || invalid_exit;


my $currentstep = get_first_step(\%next);
$currentstep ne "" || invalid_exit;

(scalar keys %steps) > scalar keys %pushes || incorrect_exit;

while( exists $pushes{$currentstep} ) {
  my $push = $pushes{$currentstep};

  print join(" ",@$push) . "\n" if $debugoutput;
  check_push(\%up,\%down,\%left,\%right,\%boxes,\%steps,\%next,\$sokoban,$push) || incorrect_exit;

  $currentstep = $next{$currentstep};
}

verify_final_configuration(\%boxes,\%targets) || incorrect_exit;

correct_exit(scalar keys %pushes);

